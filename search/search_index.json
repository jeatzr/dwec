{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Client-Side Web Development","text":"<p>This website has been created to share the materials for the subject \"Desarrollo Web en Entorno Cliente\" in its bilingual option.</p> <p>The contents have been divided into the following units:</p> <ol> <li>Introduction to Frontend Tools</li> <li>JS Fundamentals</li> <li>Arrays, Objects, and Classes</li> <li>Manipulating the DOM</li> <li>Event Management and Form Validation</li> <li>AJAX</li> <li>Local Storage</li> </ol> <p>DWEC Bilingual Materials by Jos\u00e9 Enrique Ati\u00e9nzar Ib\u00e1\u00f1ez is licensed under CC BY-NC-SA 4.0</p>"},{"location":"01_frontend_introduction/","title":"UNIT1 - Introduction to Frontend Tools","text":""},{"location":"01_frontend_introduction/#1-difference-between-the-internet-and-the-www","title":"1. Difference Between the Internet and the WWW","text":""},{"location":"01_frontend_introduction/#the-internet-the-www","title":"The Internet === The WWW ??","text":""},{"location":"01_frontend_introduction/#the-internet","title":"The Internet:","text":"<ul> <li>Definition: The Internet is a global network of interconnected computers and other devices. It is the infrastructure that enables various types of digital communication and data exchange.</li> <li>History: The development of the Internet began in the late 1960s with the creation of ARPANET, a project funded by the U.S. Department of Defense. Over the following decades, it evolved into a global network with the adoption of TCP/IP protocols in the 1980s.</li> <li>Components: The Internet consists of hardware (servers, routers, cables) and dertain standards and protocols (TCP/IP, Ethernet).</li> <li>Functions: It supports a wide range of services such as email, file transfer, instant messaging, and, of course, the World Wide Web.</li> <li>Analogy: Think of the Internet as the physical network of roads and highways.</li> </ul>"},{"location":"01_frontend_introduction/#the-world-wide-web-www","title":"The World Wide Web (WWW):","text":"<ul> <li>Definition: The World Wide Web is a collection of information, accessible via the Internet, which is formatted and interlinked using hypertext and hypermedia. It is a service that operates on the Internet. History: The World Wide Web was invented by Tim Berners-Lee in 1989 while working at CERN. He developed the first web browser and web server, and the first website went live in 1991. The WWW rapidly grew in popularity throughout the 1990s, becoming a major part of everyday life.</li> <li>Components: The WWW consists of web pages, websites, and web browsers. Web pages are documents written in HTML and accessed through URLs.</li> <li> <p>Functions: It allows users to access and navigate web pages through web browsers (like Chrome, Firefox, Safari). These pages can contain text, images, videos, and links to other </p> </li> <li> <p>Analogy: Think of the WWW as a specific system of paths and landmarks (websites and web pages) that exist on the physical roads and highways (the Internet).</p> </li> </ul>"},{"location":"01_frontend_introduction/#summary","title":"Summary:","text":"<ul> <li>Internet: The underlying global network connecting millions of computers.</li> <li>WWW: A subset of the Internet, consisting of web pages and sites, accessed through web browsers.</li> </ul> <p>The WWW relies on the Internet to function, but the Internet also supports many other services beyond the Web.</p>"},{"location":"01_frontend_introduction/#2-web-architecture","title":"2. Web Architecture","text":"<p>The most common architecture is client/server. </p> <ul> <li>A client is a service consumer. The web browser on our device acts as a client. </li> <li>A server is one or more processes hosted on machines that provide the services consummed by the client. The most used service in WWW is HTTP. </li> </ul> <p></p>"},{"location":"01_frontend_introduction/#3-frontend-and-backend-development","title":"3. Frontend and Backend development","text":"<ul> <li>Backend: The part of the web application that runs on the server.</li> <li>Frontend: The part of the web application that runs on the client.</li> </ul>"},{"location":"01_frontend_introduction/#31-backend-development","title":"3.1 Backend Development","text":"<p>It's the development carried out on the server side. It's responsible for the business logic and data persistence (storage in the database).</p> <p>Backend languajes:</p> <ul> <li>Java</li> <li>Python</li> <li>Node.js</li> <li>Ruby</li> <li>PHP</li> <li>ASP.NET</li> </ul> <p></p>"},{"location":"01_frontend_introduction/#32-frontend-development","title":"3.2 Frontend Development","text":"<p>It's the part developed to run on the client (web browser). The web browser only knows how to interpret three languages:</p> <ul> <li>HTML: For the structure and content of the page</li> <li>CSS: Defines the appearance of the web page.</li> <li>JavaScript: Language that defines dynamic behavior.</li> </ul> <p></p> <p>Currently, it is gaining a lot of prominence due to the increased weight of web applications on the client side -&gt; Single-page application (SPAs).</p> <p>A single-page application (SPA) is a web application or website that interacts with the user by dynamically rewriting the current web page with new data from the web server, instead of the default method of a web browser loading entire new pages. The goal is faster transitions that make the website feel more like a native app. (Source: Wikipedia)</p> <p>We can write the logic of our page in Vanilla JS. But the complexity of projects has made it necessary for various JavaScript frameworks and libraries to appear:</p> <ul> <li>Angular</li> <li>React</li> <li>Vue</li> <li>Svelte</li> <li>Astro</li> <li>Many more and many more to come.</li> </ul> <p></p>"},{"location":"01_frontend_introduction/#4-javascript-languaje","title":"4. Javascript Languaje","text":"<p>JS is an interpreted languaje defined as:</p> <ul> <li> <p>Object oriented: JavaScript uses objects to organize and structure code, associating properties and methods with data.</p> </li> <li> <p>Imperative: JavaScript executes statements sequentially to perform tasks, focusing on how to achieve results step by step.</p> </li> <li> <p>Prototype-based: Instead of classes, JavaScript uses prototypes as templates for creating objects, allowing objects to inherit properties and methods directly from other objects.</p> </li> <li> <p>Weakly typed: JavaScript allows flexible variable types, where variables can change types during execution without explicit declarations.</p> </li> <li> <p>Dynamically typed: Types are determined at runtime in JavaScript, enabling variables to hold different types of values as the program runs, which enhances flexibility but requires careful handling to avoid unexpected behavior.</p> </li> </ul> <p>It is primarily used on the client side, implemented as part of the web browser to enhance the web interface and provide dynamic behavior.</p> <p>It can be used also in the server side with node.js to create the backend and many other applications.</p> <p>REMINDER</p> <ul> <li>Compiled Languajes: A compiled language is a programming language where source code is translated entirely into machine code before execution, typically resulting in faster performance but requiring specific compilation for different platforms. Examples include C, C++, and Rust.</li> <li>Interpreted Languajes: An interpreted language is a programming language where the code is executed line by line by an interpreter, translating each instruction to machine code one at a time during runtime. This approach enhances portability across different systems but typically results in slower performance compared to compiled languages. Examples include Python, JavaScript, and Ruby.</li> </ul>"},{"location":"01_frontend_introduction/#41-js-versions","title":"4.1 JS versions","text":"<p>JS is a dialect of ECMAScript and is defined by that standard. </p> <p>History:</p> <ul> <li>It was created by Brendan Eich for Netscape in 1995, initially called LiveScript before being renamed JavaScript. </li> <li>In 1997, ECMA created the first ECMAScript standard. </li> <li>ECMAScript 5, ES5, released in 2009, introduced many improvements and remained a standard for many years. </li> <li>ECMAScript 6, also known as ES6, released in 2015, introduced major enhancements such as the use of classes and modules. It is the most widely supported version by all current browsers.</li> <li>Since ES6, a new version has been released every year. For example, the version for 2023 is ECMAScript 14. We can check ESCMAScript version history on Wikipedia or the official site of ECMA to check the most releases of ECMAScript.</li> </ul> <p></p> <p>Image source: Gabriel Lebec @ Course Report</p>"},{"location":"01_frontend_introduction/#42-typescript","title":"4.2 TypeScript","text":"<p>TypeScript is a statically typed superset of JavaScript that compiles to plain JavaScript. It is developed and maintained by Microsoft. TypeScript adds optional static types, classes, and interfaces to JavaScript, providing a robust development experience for building large-scale applications.</p> <p></p>"},{"location":"01_frontend_introduction/#5-tools-for-frontend-web-development","title":"5. Tools for frontend web development","text":""},{"location":"01_frontend_introduction/#51-text-editors","title":"5.1 Text editors","text":"<p>The most important tool to code will be a good text editor. </p> <p>We can find several options in the market, from the old and reliable (but simple) Notepad++ to the very powerful VS Code.</p> <ul> <li>Notepad++</li> <li>Sublime Text</li> <li>Atom</li> <li>VS Code</li> </ul> <p></p> <p>We will use the most extended nowadays: VSCode. This powerful and handy editor from Microsoft has a lot of desiderable features as:</p> <ul> <li>Syntax highlighting</li> <li>Multiplatform: For Windows, macOS and Linux</li> <li>Support for debugging</li> <li>Built-in Git control and integration with GitHub</li> <li>Integration with GitHub Copylot. </li> <li>\"Snippets\" or reusable pieces of code</li> <li>A multitude of installable extensions</li> </ul> <p>Online code editors. They have the advantage of not having to install and configure tools on your computer. They are very useful as a sandbox (controlled environment).</p> <ul> <li>Stackblitz</li> <li>Code Sandbox</li> <li>Code Pen</li> </ul>"},{"location":"01_frontend_introduction/#52-web-browsers","title":"5.2 Web browsers","text":"<p>Developers rely on browsers not only to view web pages but also for essential tools and capabilities that aid in the development and debugging process:</p> <ul> <li>Development Tools: Modern browsers come equipped with developer tools (like Chrome Developer Tools, Firefox Developer Tools, and Safari Web Inspector) that provide features such as:<ul> <li>DOM Inspection</li> <li>CSS Inspection</li> <li>Javascript console</li> </ul> </li> </ul> <p></p>"},{"location":"01_frontend_introduction/#53-version-control-tools","title":"5.3 Version control tools","text":"<p>Version control tools are software systems that help manage changes to files, documents, or any collection of information over time. They are essential for tracking modifications made by individuals or teams, facilitating collaboration, and ensuring the integrity and traceability of project history. The tools we will use are:</p> <ul> <li>Git: Git is a distributed version control system designed for speed and efficiency. It allows multiple developers to work on the same project simultaneously and offers branching and merging capabilities. This is a tool we need to install in our computer: Git</li> </ul> <p></p> <ul> <li> <p>GitHub: GitHub primarily functions as a hosting platform for Git repositories, so we can synchronize our local Git project to Github. But we can see all the different purposes of this tool:</p> <ol> <li> <p>Version Control: GitHub hosts Git repositories, enabling developers to manage and track changes to their codebase over time.</p> </li> <li> <p>Collaboration: Facilitates teamwork by allowing multiple developers to work on the same project simultaneously, manage branches, and merge changes.</p> </li> <li> <p>Code Hosting: Provides a platform for developers to host and share their source code repositories, making them accessible for viewing, cloning, and contributing.</p> </li> <li> <p>Issue Tracking: Includes an issue tracking system for managing and resolving bugs, tasks, and feature requests related to projects.</p> </li> <li> <p>Project Management: Offers tools like project boards and milestones to organize tasks, track progress, and prioritize work items across teams.</p> </li> <li> <p>CI/CD Integration: Integrates with CI/CD tools to automate build, test, and deployment processes, ensuring code changes are tested and deployed efficiently.</p> </li> <li> <p>Community and Open Source: Fosters a community around open source software development, allowing users to discover, contribute to, and collaborate on projects globally.</p> </li> <li> <p>Documentation: Provides tools for creating and maintaining project documentation, wikis, and README files to explain project goals, usage instructions, and contribution guidelines.</p> </li> </ol> </li> </ul> <p>DOCUMENT DOCUMENT DOCUMENT!!!:</p> <ul> <li>Dont forget to document your project with a README.md file written in Markdown. Markdown is a lightweight markup language that is commonly used for formatting text on the web. When writing README files on platforms like GitHub, Markdown provides a simple and readable way to structure and style text without needing to write HTML directly.</li> <li>Learn something about Markdown languaje </li> <li> <p>See this example -&gt; README.md</p> </li> <li> <p>Example of Markdown syntax: </p> </li> </ul> <pre><code># Project Name\n\nDescription of your project.\n\n## Installation\n\nInstructions on how to install and run your project.\n\n## Usage\n\nExamples and instructions on how to use your project.\n\n### Code Example\n\n```javascript\nconsole.log('Hello, World!');\n</code></pre>"},{"location":"01_frontend_introduction/#54-package-managers","title":"5.4 Package Managers","text":"<p>Package managers help us install various utilities, features, and frameworks. They streamline the process of adding, updating, and managing software packages, ensuring that we have the necessary dependencies and tools to develop and run our applications efficiently. Popular examples are pip for Python and npm form JavaScript.  In our case, JS,  the two main options are:</p> <ul> <li> <p>npm (Node Package Manager) is the default package manager for Node.js. It helps developers install, share, and manage JavaScript libraries and dependencies for their projects. It also provides a registry where developers can publish their own packages.</p> </li> <li> <p>Yarn is an alternative package manager for JavaScript that focuses on speed, security, and reliability. Developed by Facebook, Yarn uses a lockfile to ensure consistent installations across different environments and optimizes the process of installing and updating dependencies.</p> </li> </ul> <p></p>"},{"location":"01_frontend_introduction/#55-linters-transpilers-and-bundlers","title":"5.5 Linters, Transpilers, and Bundlers","text":"<p>Linters are tools that analyze your code to find and fix programming errors, bugs, stylistic errors, and other problematic patterns. They help enforce coding standards and improve code quality. Examples include:</p> <ul> <li>ESLint: A popular linter for JavaScript and TypeScript that helps identify and fix problems in your code.</li> <li>JSHint: Another JavaScript linter that detects errors and potential problems in your code.</li> </ul> <p></p> <p>Transpilers are tools that convert code written in one programming language or version into another. They are often used to translate modern JavaScript (ES6+) into older versions that are compatible with all browsers. Examples include:</p> <ul> <li>Babel: A widely-used JavaScript transpiler that converts ES6+ code into ES5, making it compatible with older browsers.</li> <li>TypeScript Compiler (tsc): Converts TypeScript code into JavaScript, allowing developers to use TypeScript's type-checking features while still deploying JavaScript.</li> <li>Sass: A preprocessor scripting language that is interpreted or compiled into CSS, making it easier to write and maintain styles.</li> </ul> <p></p> <p>Bundlers are tools that combine multiple files and modules into a single file (or a few files) for easier distribution and deployment. They handle dependencies, optimize code, and often include features like code splitting and minification. Examples include:</p> <ul> <li>Webpack: A powerful module bundler for JavaScript applications that processes and bundles various assets like JavaScript, CSS, and images.</li> <li>Parcel: A fast, zero-configuration web application bundler that works out of the box with no configuration needed.</li> <li>Rollup: A module bundler for JavaScript that compiles small pieces of code into something larger and more complex, often used for building libraries.</li> </ul> <p></p> <p>These tools are essential in modern web development, helping maintain code quality, ensuring compatibility across different environments, and optimizing the final output for performance.</p>"},{"location":"01_frontend_introduction/#56-libraries-and-frameworks","title":"5.6 Libraries and Frameworks","text":"<p>Libraries and frameworks extend capabilities and simplify the use of JavaScript (JS) or CSS. They provide pre-written code to perform common tasks, helping developers build applications more efficiently and with fewer errors.</p> <ul> <li>Bootstrap: A CSS framework that simplifies the creation of web interface elements.</li> <li>jQuery: A JavaScript library that makes using JS easier and improves compatibility. A bit old fashioned and unnecesary, but still used in legacy websites.</li> </ul>"},{"location":"01_frontend_introduction/#frameworks","title":"Frameworks","text":"<ul> <li>Angular: A JS framework created by Google that facilitates the creation of Single Page Applications (SPA) and follows the MVC (Model-View-Controller) pattern. It is widely used and has a large community.</li> <li>Vue.js: An open-source JS framework also designed for creating SPAs.</li> <li>React: An open-source JS library created by Facebook. It is mainly used for defining the View layer, though it can work with extensions to define more parts of the application architecture. It is also used for creating SPAs.</li> </ul> <p>Some other memes :) Framework war Meme - jQuery meme </p>  Hands-On Exercise 1.1 <p>Take a look on State Of JS and comment. </p> <p>Research different frameworks and select one that you would use to build a Single Page Application (SPA). State the reasons that convinced you.</p>"},{"location":"01_frontend_introduction/#6-include-javascript-code","title":"6. Include JavaScript code.","text":"<p>We have several ways to include  JavaScript code in our web page:</p> <ol> <li> <p>Internal JavaScript</p> <p>You can include JavaScript within the <code>&lt;head&gt;</code> or <code>&lt;body&gt;</code> section of your HTML file using the <code>&lt;script&gt;</code> tag. If you want to assure that the code is executed once the entire document is parsed, it is recomended to include this tag al the end of <code>&lt;body&gt;</code>.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Internal JavaScript Example&lt;/title&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Internal JavaScript Example&lt;/h1&gt;\n    &lt;script&gt;\n        alert(\"Hello, World!\");       \n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>External JavaScript</p> <p>You can include JavaScript from an external file using the <code>&lt;script&gt;</code> tag with the <code>src</code> attribute. As with the internal JavaScript, the position of the <code>&lt;script&gt;</code> tag inside the HTML document matters.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;External JavaScript Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;External JavaScript Example&lt;/h1&gt;\n    &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>script.js: <pre><code>alert(\"Hello, World!\");\nconsole.log(\"Hello World!!!\")\n</code></pre></p> </li> <li> <p>Defer and Async Attributes     You can use the <code>defer</code> or <code>async</code> attributes in the <code>&lt;script&gt;</code> tag to control the loading behavior of your JavaScript.</p> <ul> <li><code>defer</code>: The script will be executed after the HTML has been completely parsed.</li> <li><code>async</code>: The script will be executed asynchronously as soon as it is available.</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Defer and Async Example&lt;/title&gt;\n    &lt;script src=\"defer-script.js\" defer&gt;&lt;/script&gt;\n    &lt;script src=\"async-script.js\" async&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Defer and Async Example&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>defer-script.js</p> <pre><code>console.log(\"Defer Script Loaded\");\n</code></pre> <p>async-script.js</p> <pre><code>console.log(\"Async Script Loaded\");\n</code></pre> <p>Placing your script tags just before the closing <code>&lt;/body&gt;</code> tag ensures that the script runs after the HTML has been parsed. However, this doesn't inherently guarantee the order of execution if you have multiple scripts and asynchronous behavior. By the use of <code>defer</code>we have more control over the execution. of the scripts because  <code>defer</code> maintains the order of execution if you have multiple scripts</p> <p>Even that in our case any of the two options are OK to preserve the execution of the script once the HTML document is totally parsed.</p> </li> <li> <p>Event Handlers in HTML Attributes</p> <p>You can include JavaScript directly within HTML attributes, such as <code>onclick</code>, <code>onload</code>, etc. It is not a good practice, just in some specific cases.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Event Handlers Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Event Handlers Example&lt;/h1&gt;\n    &lt;button onclick=\"alert('Hello, World!')\"&gt;Click Me&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> </ol>"},{"location":"02_js_fundamentals/","title":"UNIT2 - JavaScript Fundamentals","text":""},{"location":"02_js_fundamentals/#1-general-syntax-of-javascript","title":"1. General Syntax of JavaScript","text":""},{"location":"02_js_fundamentals/#ecmascript-syntax","title":"ECMAScript Syntax","text":"<p>JavaScript, also known as ECMAScript, has a syntax similar to languages like C++ and Java.</p>"},{"location":"02_js_fundamentals/#single-line-comments","title":"Single-line Comments","text":"<p>Use <code>//</code> to write comments on a single line.</p> <pre><code>// This is a single-line comment\n</code></pre>"},{"location":"02_js_fundamentals/#multi-line-comments","title":"Multi-line Comments","text":"<p>Use <code>/* ... */</code> to write comments that span multiple lines. <pre><code>/* This is \na multiline\ncomment\n*/\n</code></pre></p>"},{"location":"02_js_fundamentals/#semicolons","title":"Semicolons","text":"<p>The semicolon (<code>;</code>) at the end of a line is optional but recommended to avoid potential issues during code execution.</p> <pre><code>let x = 5;  // Semicolon is recommended\n</code></pre>"},{"location":"02_js_fundamentals/#reserved-words","title":"Reserved words","text":"<p>Do not use reserved keywords for variable names, as they have special meaning in the language. <pre><code>// Incorrect\nlet for = 10;  // 'for' is a reserved word\n\n// Correct\nlet count = 10;\n</code></pre></p> <p>List of reserved words: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#reserved_words</p>"},{"location":"02_js_fundamentals/#weak-typing","title":"Weak typing","text":"<p>JavaScript is a weakly typed language, meaning you do not need to declare data types explicitly. <pre><code>let variable = 10;   // No need to declare type, it's a number\nvariable = \"text\";   // Now it's a string\n</code></pre></p> <p>Lexical Grammar: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar</p>"},{"location":"02_js_fundamentals/#2-console-messages-and-browser-alerts","title":"2. Console messages and browser alerts","text":""},{"location":"02_js_fundamentals/#21-debugging-console","title":"2.1 Debugging Console","text":"<p>We can view the console in the browser by selecting the \"Inspect\" option. We can interact with the system console object by invoking its methods.</p> <pre><code>console.log('Hello World!');           // general message\nconsole.info('This is an info message'); // info message\nconsole.warn('Be careful!');            // warning message\nconsole.error('Fatal error');           // error message\n</code></pre>"},{"location":"02_js_fundamentals/#debugger-statement","title":"Debugger statement","text":"<p>The <code>debugger</code> statement can be used to pause the execution of a script for debugging purposes.</p> <p>Using the <code>debugger</code> statement, you can pause the code execution at a specific point to inspect the current state of variables and the call stack.</p> <p><pre><code>function add(a, b) {\n    debugger;  // Execution will pause here if the developer tools are open\n    return a + b;\n}\nadd(2, 3);\n</code></pre> When the code execution reaches the debugger statement, it will pause, allowing you to use the browser's developer tools to inspect the current state and debug your code effectively.</p>"},{"location":"02_js_fundamentals/#22-alert-prompt-and-confirm","title":"2.2 Alert, Prompt and Confirm","text":"<p>These methods are used to show browser alerts, request data, and confirm actions with an OK/Cancel dialog.</p>"},{"location":"02_js_fundamentals/#alert","title":"alert()","text":"<p>The <code>alert()</code> method displays an alert dialog with a specified message and an OK button.</p> <pre><code>alert(\"This is an alert message!\");\n</code></pre>"},{"location":"02_js_fundamentals/#prompt","title":"prompt()","text":"<p>The <code>prompt()</code> method displays a dialog with a message prompting the user to input some text. It returns the text entered by the user, or <code>null</code> if the user pressed Cancel.</p> <pre><code>let userInput = prompt(\"Please enter your name:\");\nconsole.log(\"User entered: \" + userInput);\n</code></pre>"},{"location":"02_js_fundamentals/#confirm","title":"confirm()","text":"<p>The <code>confirm()</code> method displays a dialog with a specified message, along with an OK and a Cancel button. It returns <code>true</code> if the user pressed OK, and <code>false</code> otherwise.</p> <pre><code>let userConfirmed = confirm(\"Do you really want to delete this item?\");\nif (userConfirmed) {\n    console.log(\"User confirmed the action.\");\n} else {\n    console.log(\"User canceled the action.\");\n}\n</code></pre>"},{"location":"02_js_fundamentals/#best-practices","title":"Best Practices","text":"<p>We should try to avoid using these methods whenever possible. They interrupt the user experience and are generally considered bad practice for modern web development. We will use them only for now, as we do not yet know other forms of dynamic communication with the user.</p>"},{"location":"02_js_fundamentals/#3-variable-declaration","title":"3. Variable declaration","text":"<p>We can declare variables in three ways:</p>"},{"location":"02_js_fundamentals/#var","title":"var","text":"<p>The traditional way to declare a variable. It is not recomended nowadays. </p> <p>Variables declared with <code>var</code> inside a function are function-scoped, meaning they are accessible throughout the function in which they are declared, but not outside of it. </p> <p><code>var</code>  will create globally-scoped variables when declared outside of a function or in the global scope.</p> <pre><code>var globalVar = \"I'm accessible from anywhere in the script\";\nfunction testVar() {\n    var functionVar = \"I'm accessible within this function only\";\n    console.log(globalVar);  // Outputs: I'm accessible from anywhere in the script\n    console.log(functionVar);  // Outputs: I'm accessible within this function only\n}\nconsole.log(globalVar);  // Outputs: I'm accessible from anywhere in the script\n// console.log(functionVar);  // Uncaught ReferenceError: functionVar is not defined\n</code></pre>"},{"location":"02_js_fundamentals/#let","title":"let","text":"<p>A variable that is only accessible within the block, statement, or expression where it is declared. <code>let</code> is block-scoped.</p> <pre><code>function testLet() {\n    let blockVar = \"I'm accessible within this block only\";\n    if (true) {\n        let innerBlockVar = \"I'm accessible within this inner block only\";\n        console.log(blockVar);  // Outputs: I'm accessible within this block only\n        console.log(innerBlockVar);  // Outputs: I'm accessible within this inner block only\n    }\n    console.log(blockVar);  // Outputs: I'm accessible within this block only\n    // console.log(innerBlockVar);  // Uncaught ReferenceError: innerBlockVar is not defined\n}\n</code></pre>"},{"location":"02_js_fundamentals/#const","title":"const","text":"<p>A constant that is only accessible within the block, statement, or expression where it is declared. Constants cannot be reassigned after their initial declaration. <code>const</code> is block-scoped.</p> <pre><code>function testConst() {\n    const constantVar = \"I'm a constant within this block\";\n    if (true) {\n        const innerConstantVar = \"I'm a constant within this inner block\";\n        console.log(constantVar);  // Outputs: I'm a constant within this block\n        console.log(innerConstantVar);  // Outputs: I'm a constant within this inner block\n    }\n    console.log(constantVar);  // Outputs: I'm a constant within this block\n    // console.log(innerConstantVar);  // Uncaught ReferenceError: innerConstantVar is not defined\n    // constantVar = \"New value\";  // Uncaught TypeError: Assignment to constant variable.\n}\n</code></pre>"},{"location":"02_js_fundamentals/#best-practices_1","title":"Best Practices","text":"<p>It is recommended to use <code>let</code> or <code>const</code> depending on whether the value of the variable should change or not.</p> <ul> <li>Use <code>let</code> for variables that will change.</li> <li>Use <code>const</code> for variables that should not change.</li> </ul> <pre><code>let mutableVariable = \"I can change\";\nmutableVariable = \"I have changed\";\n\nconst immutableVariable = \"I cannot change\";\n// immutableVariable = \"Trying to change\";  // Uncaught TypeError: Assignment to constant variable.\n</code></pre>"},{"location":"02_js_fundamentals/#4-primitive-data-types","title":"4. Primitive Data Types","text":"<p>JavaScript has several primitive data types:</p> <ul> <li> <p>Number: Represents both integer and floating-point numbers.</p> </li> <li> <p>String: Represents a sequence of characters (text).</p> </li> <li> <p>Boolean: Represents a logical entity and can have two values: <code>true</code> or <code>false</code>.</p> </li> <li> <p>Undefined: Indicates that a variable has been declared but has not yet been assigned a value.</p> </li> <li> <p>Null: Represents the intentional absence of any object value. It is one of JavaScript's primitive values and is treated as falsy for boolean operations.</p> </li> </ul>"},{"location":"02_js_fundamentals/#note","title":"Note:","text":"<ul> <li>Undefined: <code>undefined</code> means a variable has been declared but has not yet been assigned a value.</li> <li>Null: <code>null</code> is an assignment value. It can be assigned to a variable as a representation of no value.</li> </ul> <p>These are the basic building blocks of data in JavaScript. Understanding and using them appropriately is crucial for effective programming in JavaScript.</p>"},{"location":"02_js_fundamentals/#41-number-type","title":"4.1 Number Type","text":"<p>In JavaScript, the <code>number</code> data type represents both integers and floating-point numbers.</p>"},{"location":"02_js_fundamentals/#characteristics-of-numbers","title":"Characteristics of Numbers","text":"<ul> <li>Positive or Negative Numbers:</li> </ul> <pre><code>let positiveNumber = 4;\nlet negativeNumber = -30;\n</code></pre> <ul> <li>Numbers with or without decimals</li> </ul> <pre><code>let integer = 34;\nlet floatingPoint = 34.4;\nlet zero = 0;\nlet negativeFloat = -9.45;\nlet largeNumber = 150000000;\n</code></pre>"},{"location":"02_js_fundamentals/#arithmetic-operations","title":"Arithmetic Operations","text":"<p>You can perform various arithmetic operations on numbers:</p> <ul> <li>Addition <code>+</code></li> <li>Subtraction <code>-</code></li> <li>Multiplication <code>*</code></li> <li>Division <code>/</code></li> <li>Modulus <code>%</code>: Returns the remainder of a division.</li> <li>Exponentiation <code>**</code>: Raises the first operand to the power of the second operand.</li> <li>Increment <code>++</code>: Increases the value of a variable by 1.</li> <li>Decrement <code>--</code>: Decreases the value of a variable by 1.</li> </ul> <pre><code>let sum = 4 + 5;  // 9\nlet difference = 10 - 3;  // 7\nlet product = 4 * 3;  // 12\nlet quotient = 12 / 4;  // 3\n\nlet power = 2 ** 3;  // 8\n\nlet counter = 0;\ncounter++;  // counter is now 1\n\ncounter--;  // counter is now 0\n</code></pre>"},{"location":"02_js_fundamentals/#comparison-operations","title":"Comparison Operations","text":"<p>You can also compare numbers using various comparison operators:</p> <ul> <li>Less than <code>&lt;</code></li> <li>Greater than <code>&gt;</code></li> <li>Less than or equal to <code>&lt;=</code></li> <li>Greater than or equal to <code>&gt;=</code></li> <li>Equal to <code>==</code></li> <li>Strict equal to <code>===</code></li> <li>Not equal to <code>!=</code></li> <li>Strict not equal to <code>!==</code></li> </ul> <p><pre><code>let isLessThan = 5 &lt; 10;  // true\nlet isGreaterThan = 10 &gt; 5;  // true\nlet isLessThanOrEqualTo = 5 &lt;= 5;  // true\nlet isGreaterThanOrEqualTo = 10 &gt;= 10;  // true\nlet isEqualTo = 5 == '5';  // true (type coercion)\nlet isStrictEqualTo = 5 === 5;  // true\nlet isStrictEqualToDifferentTypes = 5 === '5';  // false (no type coercion)\nlet isNotEqualTo = 5 != '5';  // false (type coercion)\nlet isStrictNotEqualTo = 5 !== '5';  // true (no type coercion)\n</code></pre> --&gt; Equality comparisons and sameness</p>"},{"location":"02_js_fundamentals/#additional-number-methods-in-math-object","title":"Additional Number Methods in Math Object","text":"<p>JavaScript also provides several built-in methods for working with numbers by the Math Object.</p>  Hands-On Exercise <p>In JS there is not an operator to calculate the integer division operation. Can you implement a way to obtain this operation using the operations listed above ?</p> <p>Examples:</p> <ul> <li>10 // 3 = 3</li> <li>13 // -3 = -4</li> </ul>"},{"location":"02_js_fundamentals/#more-about-number","title":"More about number","text":"<ul> <li><code>typeof</code>: Type of the variable</li> <li><code>NaN</code>: Not-a-Number</li> <li><code>isNaN()</code>: Check if value is NaN</li> <li><code>.toString()</code>: Convert number to string</li> <li><code>.toFixed()</code>: Format number to fixed decimal places</li> </ul> <pre><code>// Type of the variable\nlet typeOfNumber = typeof 123;  // 'number'\nlet typeOfString = typeof '123';  // 'string'\n\n// NaN (Not-a-Number)\nlet notANumber = NaN;\nlet isNanCheck1 = isNaN(123);  // false\nlet isNanCheck2 = isNaN(NaN);  // true\nlet isNanCheck3 = isNaN('Hello');  // true\n\n// Convert number to string\nlet numberToString = (123).toString();  // '123'\n\n// Format number to fixed decimal places\nlet fixedDecimal = (123.456).toFixed(2);  // '123.46'\n</code></pre>"},{"location":"02_js_fundamentals/#42-string-type","title":"4.2 String Type","text":"<p>In JavaScript, the <code>string</code> data type is used to represent textual data.</p>"},{"location":"02_js_fundamentals/#characteristics-of-strings","title":"Characteristics of Strings","text":"<ul> <li>Strings: A sequence of characters enclosed in quotes.</li> <li>Double quotes: <code>\"Hello world\"</code></li> <li>Single quotes: <code>'Hello world'</code></li> </ul>"},{"location":"02_js_fundamentals/#operations-with-strings","title":"Operations with Strings","text":"<ul> <li>Concatenation: Combining multiple strings into one.<ul> <li>Example: <code>cadena = 'Hola' + ' mundo'</code> results in <code>'Hola mundo'</code></li> </ul> </li> <li>Comparison Operations: Comparing strings.<ul> <li>Equal to (<code>==</code>)</li> <li>Strict equal to (<code>===</code>)</li> <li>Not equal to (<code>!=</code>)</li> </ul> </li> <li>Other Useful Methods: We can find them in the String Object</li> </ul> <pre><code>// Characteristics of Strings\nlet string1 = \"Hello world\";\nlet string2 = 'Hello world';\n\n// Concatenation\nlet greeting = 'Hola' + ' mundo';  // 'Hola mundo'\n\n// Comparison Operations\nlet isEqual = 'Hello' == 'Hello';  // true\nlet isStrictEqual = 'Hello' === 'Hello';  // true\nlet isStrictEqual2 = '123' === 132;  // false\nlet isNotEqual = 'Hello' != 'World';  // true\n\n// Other useful methods\nlet stringLength = greeting.length;  // 10\nlet upperCase = greeting.toUpperCase();  // 'HOLA MUNDO'\nlet lowerCase = greeting.toLowerCase();  // 'hola mundo'\nlet includesWord = greeting.includes('mundo');  // true\nlet splitString = greeting.split(' ');  // ['Hola', 'mundo']\nlet substring = greeting.substring(1, 4);  // 'ola'  substring(start, end+1)\nlet charAt = greeting.charAt(1);  // 'o'\nlet indexOfChar = greeting.indexOf('m');  // 5\nlet replacedString = greeting.replace('mundo', 'everyone');  // 'Hola everyone'\nlet trimmedString = '   Hola mundo   '.trim();  // 'Hola mundo'\n</code></pre>"},{"location":"02_js_fundamentals/#template-literals","title":"Template literals","text":"<p>Template literals, also known as template strings, are a feature in JavaScript that allows for easier string interpolation and multi-line strings. They are enclosed by backticks (<code>`</code>) instead of single or double quotes.</p> <pre><code>let text = `Hello, world!`;\n</code></pre>"},{"location":"02_js_fundamentals/#features-of-template-literals","title":"Features of Template Literals","text":"<ol> <li>String Interpolation: Embed expressions within a string using the <code>${expression}</code> syntax.</li> </ol> <pre><code>let firstName = \"John\";\nlet lastName = \"Doe\";\nlet age = 30;\nlet introduction = `My name is ${firstName} ${lastName} and I am ${age} years old.`;\n\nlet result = `2 + 2 is ${2 + 2}`;  // \"2 + 2 is 4\"\n</code></pre> <ol> <li>Multi-line Strings: Create strings that span multiple lines.</li> </ol> <pre><code>let address = `1234 Elm Street\nSpringfield, IL\n62704`;\n</code></pre>  Hands-On Exercise: Working with Strings in JavaScript <p>Follow these steps to complete the exercise:</p> <ol> <li>Concatenation and Template Literals:             <ul> <li>Create two string variables, <code>firstName</code> and <code>lastName</code>.</li> <li>Concatenate them using both the <code>+</code> operator and template literals to form a full name.</li> </ul> </li> <li>String Methods:             <ul> <li>Use <code>.toUpperCase()</code> and <code>.toLowerCase()</code> methods to change the case of the full name.</li> <li>Extract a substring from the full name using both <code>substring()</code> and <code>slice()</code>.</li> </ul> </li> <li>String Interpolation:             <ul> <li>Create a multi-line string using template literals that includes the full name and an address.</li> </ul> </li> <li>Splitting and Trimming Strings:             <ul> <li>Create a string that includes a list of comma-separated items.</li> <li>Split the string into an array and trim any extra whitespace from each item.</li> </ul> </li> <li>Checking and Converting:             <ul> <li>Create a variable that includes a number as a string.</li> <li>Check if it is a number using <code>isNaN()</code> and convert it to a number.</li> <li>Use <code>.toString()</code> to convert a number back to a string.</li> <li>Use <code>.toFixed()</code> to format a number to two decimal places.</li> </ul> </li> </ol>"},{"location":"02_js_fundamentals/#43-boolean-type","title":"4.3 Boolean Type","text":"<ul> <li>It only accepts two values: <code>true</code> or <code>false</code></li> <li>It is useful for checking the state of the application</li> <li> <p>It is recommended that its name defines the positive state</p> <ul> <li>Example: <code>userIsLogged</code>, <code>itemFound</code>, <code>errorFound</code> </li> </ul> </li> <li> <p><code>Boolean(value);</code> returns the boolean value of a condition or variable.</p> </li> </ul>"},{"location":"02_js_fundamentals/#boolean","title":"Boolean()","text":"<p><code>Boolean(value);</code> returns the boolean value of a condition or variable.</p>"},{"location":"02_js_fundamentals/#true-vs-false","title":"True vs False","text":"True False 1 0, -0 <code>\"Whatever\"</code> <code>\"\"</code> 3.14 NaN <code>100 &gt; 5</code> null <code>1 &lt; 100</code> undefined <code>'1' == 1</code> <code>'1' === 1</code> <pre><code>// Example 1: Using Boolean() to get the boolean value\nconsole.log(Boolean(1));           // true\nconsole.log(Boolean(0));           // false\nconsole.log(Boolean(\"Whatever\"));  // true\nconsole.log(Boolean(\"\"));          // false\n\n// Example 2: Using expressions\nconsole.log(100 &gt; 5);              // true\nconsole.log(1 &lt; 100);              // true\nconsole.log('1' == 1);             // true\nconsole.log('1' === 1);            // false\n\n// Example 3: Checking for undefined and null\nlet a;\nconsole.log(Boolean(a));           // false\n\nlet b = null;\nconsole.log(Boolean(b));           // false\n\n// Example 4: NaN check\nlet c = NaN;\nconsole.log(Boolean(c));           // false\nconsole.log(isNaN(c));             // true\n\n// Example 5: Combining multiple checks\nlet value = \"Hello\";\nif (value &amp;&amp; typeof value === \"string\") {\n    console.log(\"Value is a non-empty string\"); // This will log\n}\n\nlet number = 0;\nif (!number) {\n    console.log(\"Number is zero or false\"); // This will log\n}\n</code></pre>"},{"location":"02_js_fundamentals/#44-undefined-and-null-types","title":"4.4 Undefined and Null Types","text":"<p>In JavaScript, <code>undefined</code> and <code>null</code> are two distinct types that represent absence of value or non-existence. They are often confused with each other but have different meanings and use cases.</p>"},{"location":"02_js_fundamentals/#undefined","title":"Undefined","text":"<ul> <li>Type: <code>undefined</code></li> <li>Description: A variable that has been declared but has not yet been assigned a value has the value <code>undefined</code>.</li> <li>Example:     <pre><code>let a;\nconsole.log(a); // Output: undefined\n</code></pre></li> </ul>"},{"location":"02_js_fundamentals/#null","title":"Null","text":"<ul> <li>Type: <code>object</code></li> <li>Description: <code>null</code> is an assignment value that can be used to represent no value or no object. It's explicitly set by the programmer to indicate \"no value\".</li> <li>Example:     <pre><code>let b = null;\nconsole.log(b); // Output: null\n</code></pre></li> </ul>"},{"location":"02_js_fundamentals/#key-differences","title":"Key Differences","text":"<ul> <li> <p>Type:</p> <ul> <li><code>undefined</code>: The type of <code>undefined</code> is <code>undefined</code>.</li> <li><code>null</code>: The type of <code>null</code> is <code>object</code> (this is a historical bug in JavaScript, but it remains for backward compatibility).</li> </ul> </li> <li> <p>Default Value:</p> <ul> <li><code>undefined</code> is the default value for uninitialized variables.</li> <li><code>null</code> is an explicit assignment to indicate an empty or non-existent value.</li> </ul> </li> <li> <p>Usage:</p> <ul> <li>Use <code>undefined</code> to check if a variable has been declared but not yet assigned a value.</li> <li>Use <code>null</code> to intentionally signify that a variable should be empty.</li> </ul> </li> </ul>"},{"location":"02_js_fundamentals/#examples","title":"Examples","text":"<pre><code>// Undefined example\nlet x;\nconsole.log(x); // Output: undefined\n\n// Null example\nlet y = null;\nconsole.log(y); // Output: null\n\n// Checking types\nconsole.log(typeof x); // Output: undefined\nconsole.log(typeof y); // Output: object\n</code></pre>"},{"location":"02_js_fundamentals/#5-control-sentences","title":"5. Control Sentences","text":""},{"location":"02_js_fundamentals/#51-conditional-statements","title":"5.1 Conditional Statements","text":""},{"location":"02_js_fundamentals/#ifelse","title":"if...else","text":"<p>Conditional statements allow the execution of specific code blocks based on certain conditions. The most common conditional statements are <code>if</code>, <code>else if</code>, and <code>else</code>.</p> <p>Examples of usage:</p> <pre><code>let number = 10;\n\nif (number &gt; 0) {\n    console.log(\"The number is positive.\");\n} else if (number &lt; 0) {\n    console.log(\"The number is negative.\");\n} else {\n    console.log(\"The number is zero.\");\n}\n</code></pre>"},{"location":"02_js_fundamentals/#switch","title":"switch","text":"<p>A <code>switch</code> statement evaluates a variable or expression and matches its value to one of several possible cases. Each case corresponds to a specific code block that executes when a match is found. If no match is found, an optional <code>default</code> case can execute.</p> <p>Examples of usage:</p>"},{"location":"02_js_fundamentals/#javascript","title":"JavaScript","text":"<pre><code>let fruit = 'apple';\n\nswitch (fruit) {\n    case 'apple':\n        console.log(\"This is an apple.\");\n        break;\n    case 'banana':\n        console.log(\"This is a banana.\");\n        break;\n    case 'orange':\n        console.log(\"This is an orange.\");\n        break;\n    default:\n        console.log(\"Unknown fruit.\");\n}\n</code></pre>"},{"location":"02_js_fundamentals/#conditional-ternary-operator","title":"Conditional (ternary) operator","text":"<p>The conditional ternary operator is a concise way to perform conditional evaluations. It takes three operands: a condition, a result for true, and a result for false. The syntax is:</p> <p><code>condition ? expression_if_true : expression_if_false</code></p> <p>Examples of usage:</p> <pre><code>let age = 18;\nlet canVote = (age &gt;= 18) ? \"Yes, you can vote.\" : \"No, you cannot vote.\";\nconsole.log(canVote);\n</code></pre>"},{"location":"02_js_fundamentals/#52-loops-or-iterations","title":"5.2 Loops or Iterations","text":""},{"location":"02_js_fundamentals/#for-traditional-loop-with-a-counter","title":"for (traditional loop with a counter)","text":"<p>The <code>for</code> loop is a traditional loop that iterates with a counter. It is used to repeat a block of code a certain number of times.</p> <p>Examples of usage:</p> <pre><code>for (let i = 0; i &lt; 5; i++) {\n    console.log(i);\n}\n\n// Counting backwards in 5 units steps\nfor (let i = 50; i &gt;= 0; i -= 5) {\n    console.log(i);\n}\n</code></pre>"},{"location":"02_js_fundamentals/#forin-iterates-over-properties-of-an-object","title":"for..in (iterates over properties of an object)","text":"<p>The <code>for..in</code> loop iterates over the enumerable properties of an object. It is used to traverse object properties.</p> <p>Examples of usage: <pre><code>let person = {name: 'John', age: 30, city: 'New York'};\nfor (let key in person) {\n    console.log(key + ': ' + person[key]);\n}\n</code></pre></p>"},{"location":"02_js_fundamentals/#forof-es6-iterates-over-a-collection-of-objects","title":"for..of (ES6) (iterates over a collection of objects)","text":"<p>The <code>for..of</code> loop, introduced in ES6, iterates over iterable objects such as arrays, strings, and other collections.</p> <p>Examples of usage:</p> <pre><code>let fruits = ['apple', 'banana', 'orange'];\nfor (let fruit of fruits) {\n    console.log(fruit);\n}\n</code></pre>"},{"location":"02_js_fundamentals/#foreach-method-to-iterate-over-a-collection-of-objects","title":"forEach (method to iterate over a collection of objects)","text":"<p>However, in JavaScript, the most common way to iterate over arrays of objects is using the <code>forEach</code> method. This method executes a provided function once for each array element, making it more convenient and readable for such tasks.</p> <pre><code>const users = [\n    { name: 'John', age: 30 },\n    { name: 'Jane', age: 25 },\n    { name: 'Jim', age: 35 }\n];\n\nusers.forEach(user =&gt; {\n    console.log(`${user.name} is ${user.age} years old.`);\n});\n</code></pre>"},{"location":"02_js_fundamentals/#while-traditional-while-loop","title":"while (traditional while loop)","text":"<p>The <code>while</code> loop repeats a block of code as long as a specified condition is true.</p> <pre><code>let i = 0;\nwhile (i &gt; 0.5) {\n    console.log(i);\n    i = Math.rand();\n}\nconsole.log(`Found a rand number greater than 0.5: ${i}`);\n</code></pre>"},{"location":"02_js_fundamentals/#6-native-javascript-objects","title":"6. Native JavaScript Objects","text":"<p>JavaScript provides several built-in objects that allow developers to work with different data types, perform common tasks, manipulate the DOM and handle errors. These objects are part of the JavaScript language and are available globally.</p> <p></p> <p>JavaScript native objects can be categorized into two types based on their usage context and origin:</p>"},{"location":"02_js_fundamentals/#browser-independent-objects-available-also-in-nodejs","title":"Browser-Independent Objects (Available also in Node.js)","text":"<p>These objects are part of the JavaScript language specification and can be used in both browser and server-side environments (like Node.js). They typically start with an uppercase letter:</p> <ul> <li>Math: Provides mathematical constants and functions.</li> <li>Number: Represents numerical values and provides methods for numeric operations.</li> <li>Date: Represents dates and times.</li> <li>Array: Represents a list-like collection of elements.</li> </ul> <p>These objects are implemented as part of the JavaScript language itself and do not rely on the presence of a browser environment.</p>"},{"location":"02_js_fundamentals/#browser-dependent-objects-client-side-environment","title":"Browser-Dependent Objects (Client-Side Environment)","text":"<p>These objects are specific to the browser environment and are not available in server-side JavaScript (Node.js). They typically start with a lowercase letter:</p> <ul> <li>window: Represents the global browser window and acts as the global object in client-side JavaScript.</li> <li>document: Represents the HTML document loaded in the browser window.</li> <li>navigator: Provides information about the client's browser and operating system.</li> <li>localStorage / sessionStorage: Provides storage mechanisms within the browser for persisting data.</li> </ul> <p>These objects interact directly with the browser's Document Object Model (DOM) and are essential for client-side scripting and web application development.</p>"},{"location":"02_js_fundamentals/#usage-contexts","title":"Usage Contexts","text":"<ul> <li>Node.js: Browser-independent objects (e.g., Math, Number, Date) can be used in Node.js applications without any dependency on a browser environment.</li> <li>Browser: Browser-dependent objects (e.g., window, document, navigator) are specific to the client-side environment and require a web browser for execution.</li> </ul> <p>We are going to explain the most useful for us for the scope of this course.</p>"},{"location":"02_js_fundamentals/#61-date-object","title":"6.1 Date Object","text":"<ul> <li>The Date object in JavaScript is used for working with dates and times. </li> <li>It allows you to create and manipulate dates, get and set various date components (like year, month, day, hour, minute, second), and perform operations such as formatting and arithmetic.</li> <li>Internally, the number of milliseconds since 00:00:00 UTC on January 1, 1970, is stored.</li> </ul> <p>Constructor: </p> <pre><code>let currentDate = new Date();               // Current date and hour\nlet specificDate = new Date(1626176282855); // Example with number of millisecons\nlet customDate = new Date(2023, 5, 12, 14, 30, 0, 0); // June 12, 2023, 14:30:00\n</code></pre>"},{"location":"02_js_fundamentals/#getfullyear-getmonth-getdate-getday-gethours-getminutes-getseconds-getmilliseconds-retrieve-various-components-of-the-date","title":"getFullYear(), getMonth(), getDate(), getDay(), getHours(), getMinutes(), getSeconds(), getMilliseconds(): Retrieve various components of the date.","text":"<pre><code>let now = new Date();\nlet year = now.getFullYear();\nlet month = now.getMonth(); // 0-indexed (January is 0)\nlet day = now.getDate();\nlet hours = now.getHours();\nlet minutes = now.getMinutes();\nlet seconds = now.getSeconds();\n</code></pre>"},{"location":"02_js_fundamentals/#setfullyear-setmonth-setdate-sethours-setminutes-setseconds-setmilliseconds-set-various-components-of-the-date","title":"setFullYear(), setMonth(), setDate(), setHours(), setMinutes(), setSeconds(), setMilliseconds(): Set various components of the date.","text":"<pre><code>day = new Date(2000, 0, 1); // January 1, 2000\nbirthday.setFullYear(2001); // Change year to 2001\n</code></pre>"},{"location":"02_js_fundamentals/#todatestring-toisostring-tolocaledatestring-tolocaletimestring-convert-date-objects-to-different-string-representations","title":"toDateString(), toISOString(), toLocaleDateString(), toLocaleTimeString(): Convert date objects to different string representations.","text":"<pre><code>let today = new Date();\nlet dateString = today.toDateString(); // \"Tue Jul 13 2024\"\nlet isoString = today.toISOString(); // \"2024-07-13T12:30:00.000Z\"\nlet localeDateString = today.toLocaleDateString(); // Depends on locale\n</code></pre>"},{"location":"02_js_fundamentals/#working-with-dates","title":"Working with dates","text":"<p>Here's an example that demonstrates creating a <code>Date</code> object, accessing its components, and formatting its output:</p> <pre><code>let now = new Date();\n\nlet year = now.getFullYear();\nlet month = now.getMonth(); // 0-indexed (July is 6)\nlet day = now.getDate();\nlet hours = now.getHours();\nlet minutes = now.getMinutes();\nlet seconds = now.getSeconds();\n\nconsole.log(`Current date and time: ${day}/${month + 1}/${year} ${hours}:${minutes}:${seconds}`);\n</code></pre> <p>Here's the example in JavaScript comparing two dates:</p> <pre><code>// Create two dates\nlet date1 = new Date('2023-07-13');\nlet date2 = new Date('2023-07-14');\n\n// Compare the dates\nif (date1 &lt; date2) {\n    console.log(`${date1.toDateString()} is before ${date2.toDateString()}`);\n} else if (date1 &gt; date2) {\n    console.log(`${date1.toDateString()} is after ${date2.toDateString()}`);\n} else {\n    console.log(`${date1.toDateString()} and ${date2.toDateString()} are equal`);\n}\n</code></pre>"},{"location":"02_js_fundamentals/#62-math-object","title":"6.2 Math Object","text":"<p>The Math object in JavaScript provides mathematical constants and functions, allowing you to perform mathematical tasks without explicitly creating a Math object instance. It includes methods for rounding, trigonometry, logarithms, exponentiation, some constants as PI number, and more.</p> <ul> <li><code>Math.abs()</code>: Absolute value</li> <li><code>Math.ceil()</code>: Round up</li> <li><code>Math.floor()</code>: Round down</li> <li><code>Math.round()</code>: Round to nearest integer</li> <li><code>Math.max()</code>: Maximum value</li> <li><code>Math.min()</code>: Minimum value</li> <li><code>Math.random()</code>: Random number between 0 and 1</li> <li><code>Math.sqrt()</code>: Square root</li> <li><code>Math.PI</code>: PI number</li> </ul> <pre><code>let absoluteValue = Math.abs(-5);  // 5\nlet roundedUp = Math.ceil(4.2);  // 5\nlet roundedDown = Math.floor(4.8);  // 4\nlet rounded = Math.round(4.5);  // 5\nlet roundedDownExample = Math.round(4.4);  // 4\nlet max = Math.max(1, 2, 3);  // 3\nlet min = Math.min(1, 2, 3);  // 1\nlet random = Math.random();  // e.g., 0.543\nlet squareRoot = Math.sqrt(16);  // 4\n\n// Also Math object contains some useful constants as PI or E number\nlet piNumber = Math.PI;  // 3.1415......\n</code></pre>"},{"location":"02_js_fundamentals/#64-string-object","title":"6.4 String Object","text":"<p>The String object is a wrapper around JavaScript's primitive string data type. It provides various methods and properties to work with strings effectively.</p>"},{"location":"02_js_fundamentals/#creating-string-objects","title":"Creating String Objects","text":"<p>In JavaScript, you can create a string primitive directly or use the String object constructor to create a String object:</p> <pre><code>// String primitive\nlet message = 'Hello, World!';\n\n// Using String object constructor\nlet anotherMessage = new String('Hello, World!');\n</code></pre>"},{"location":"02_js_fundamentals/#useful-methods-and-properties","title":"Useful Methods and properties","text":"<ul> <li><code>length</code>: Returns the length of the string.</li> <li><code>charAt(index)</code>: Returns the character at the specified index.</li> <li><code>concat(str1, str2, ...)</code>: Concatenates one or more strings to the end of the calling string and returns a new string.</li> <li><code>toUpperCase()</code>: Converts all characters to uppercase.</li> <li><code>toLowerCase()</code>: Converts all characters to lowercase.</li> <li><code>indexOf(searchValue, startIndex)</code>: Returns the index of the first occurrence of <code>searchValue</code> in the string, starting the search at <code>startIndex</code>.</li> <li><code>substring(startIndex, endIndex)</code>: Returns a new substring from <code>startIndex</code> to <code>endIndex</code> (excluding <code>endIndex</code>).</li> <li><code>slice(startIndex, endIndex)</code>: Extracts a section of the string and returns it as a new string.</li> <li><code>split(separator)</code>: Splits the string into an array of substrings based on a specified <code>separator</code>.</li> </ul> <p>Examples of use:</p> <p>Those methods already have been used in the String Primitive Data Type</p>"},{"location":"02_js_fundamentals/#65-browser-interaction-objects","title":"6.5 Browser Interaction Objects","text":"<p>In addition to those presented earlier, there are other types of objects that allow manipulation of browser-specific features:</p> <ul> <li>navigator: Provides information about the client's browser and operating system.</li> <li>screen: Represents the properties of the user's screen.</li> <li>window: Represents the global browser window and acts as the global object in client-side JavaScript.</li> <li>document: Represents the HTML document loaded in the browser window.</li> <li>history: Provides the browser's session history (pages visited in the current tab/window).</li> </ul>"},{"location":"02_js_fundamentals/#navigator","title":"navigator","text":"<p>To identify the characteristics of the platform where a web application is running, you can use properties and methods provided by the <code>navigator</code> object in JavaScript:</p> <ol> <li> <p>Type of Browser and Version:</p> <ul> <li>Use <code>navigator.userAgent</code> to obtain the User-Agent string, which includes information about the browser type and version.</li> </ul> </li> <li> <p>Operating System:</p> <ul> <li>Use <code>navigator.platform</code> to retrieve the platform on which the browser is executing (e.g., \"Win32\", \"Linux x86_64\", \"MacIntel\").</li> </ul> </li> <li> <p>Geolocation:</p> <ul> <li>Utilize the Geolocation API to request and obtain the device's current geographical location, provided the user grants permission.</li> </ul> </li> </ol> <p>Example JavaScript code: <pre><code>// User Agent\nlet browserInfo = navigator.userAgent;\nconsole.log(`User-Agent: ${browserInfo}`);\n\n// Platform Info\nlet platformInfo = navigator.platform;\nconsole.log(`Platform: ${platformInfo}`);\n\n// Geolocation\nif ('geolocation' in navigator) {\n    navigator.geolocation.getCurrentPosition(position =&gt; {\n      console.log('Latitude:', position.coords.latitude);\n      console.log('Longitude:', position.coords.longitude);\n    }, error =&gt; {\n        console.error('Error getting geolocation:', error);\n    });\n} else {\n    console.error('Geolocation is not supported by this browser.');\n}\n</code></pre></p>"},{"location":"02_js_fundamentals/#screen","title":"screen","text":"<p>The <code>screen</code> object in JavaScript represents the user's screen and provides read-only properties to retrieve information about its characteristics.</p>"},{"location":"02_js_fundamentals/#properties-of-the-screen-object","title":"Properties of the <code>screen</code> Object","text":"<ul> <li><code>screen.width</code>: Returns the width of the user's screen in pixels.</li> <li><code>screen.height</code>: Returns the height of the user's screen in pixels.</li> <li><code>screen.availWidth</code>: Returns the available width of the user's screen (excluding operating system taskbars, etc.) in pixels.</li> <li><code>screen.availHeight</code>: Returns the available height of the user's screen (excluding operating system taskbars, etc.) in pixels.</li> <li><code>screen.colorDepth</code>: Returns the bit depth of the color palette for displaying images on the user's screen.</li> <li><code>screen.pixelDepth</code>: Returns the bit depth of the pixel buffer of the user's screen.</li> </ul> <p>These properties allow web applications to adapt their content or behavior based on the user's screen dimensions and capabilities, enhancing the user experience.</p> <p>Here's a simple example demonstrating how to access and use some of these properties in JavaScript:</p> <pre><code>console.log(`Screen width: ${screen.width}px`);\nconsole.log(`Screen height: ${screen.height}px`);\nconsole.log(`Available screen width: ${screen.availWidth}px`);\nconsole.log(`Available screen height: ${screen.availHeight}px`);\nconsole.log(`Color depth: ${screen.colorDepth} bits`);\nconsole.log(`Pixel depth: ${screen.pixelDepth} bits`);\n</code></pre>"},{"location":"02_js_fundamentals/#window","title":"window","text":"<p>The <code>window</code> object is considered one of the most important objects in JavaScript for several reasons:</p> <ul> <li> <p>Window Management: It allows for managing browser windows and provides methods to manipulate and interact with them.</p> </li> <li> <p>Implicit Object: The <code>window</code> object is implicit, meaning you don't need to explicitly reference it to access objects and properties nested within its hierarchy. For example, <code>window.document</code> directly refers to the <code>document</code> object without explicitly stating <code>window</code>.</p> </li> </ul>"},{"location":"02_js_fundamentals/#document","title":"document","text":"<p>The <code>document</code> object in JavaScript represents the current web page loaded in the browser window. It provides access to the DOM (Document Object Model) of the page, allowing developers to manipulate its content, structure, and styles dynamically.</p>"},{"location":"02_js_fundamentals/#key-features-of-the-document-object","title":"Key Features of the <code>document</code> Object:","text":"<ul> <li> <p>DOM Manipulation: Developers can access and modify elements within the web page using methods like <code>getElementById</code>, <code>querySelector</code>, and properties like <code>textContent</code>, <code>innerHTML</code>.</p> </li> <li> <p>Event Handling: Enables attaching event listeners to elements and responding to user interactions or other events on the page.</p> </li> <li> <p>Dynamic Updates: Allows scripts to dynamically update the content of the page based on user input, server responses, or other conditions.</p> </li> </ul>"},{"location":"02_js_fundamentals/#example-of-dom-manipulation","title":"Example of DOM Manipulation:","text":"<pre><code>// Accessing an element by its ID and changing its content\nconst headerElement = document.getElementById('header');\nheaderElement.textContent = 'Welcome to our Website!';\n</code></pre>"},{"location":"02_js_fundamentals/#history","title":"history","text":"<p>In JavaScript, the <code>history</code> object provides methods and properties to navigate through the user's browsing history. It allows storing references to visited web pages and facilitates navigation between them using a list-like structure.</p>"},{"location":"02_js_fundamentals/#key-features-of-the-history-object","title":"Key Features of the <code>history</code> Object:","text":"<ul> <li> <p><code>history.length</code>: Returns the number of entries in the browsing history stack.</p> </li> <li> <p><code>history.back()</code>: Moves back one page in the session history. Equivalent to clicking the browser's back button.</p> </li> <li> <p><code>history.forward()</code>: Moves forward one page in the session history. Equivalent to clicking the browser's forward button.</p> </li> <li> <p><code>history.go(n)</code>: Loads a specific page from the session history, where <code>n</code> can be a positive or negative integer. Negative values move backwards, and positive values move forwards.</p> </li> </ul>"},{"location":"02_js_fundamentals/#example-usage","title":"Example Usage:","text":"<pre><code>// Navigating back and forward in history\nfunction goBack() {\n    window.history.back();\n}\n\nfunction goForward() {\n    window.history.forward();\n}\n\n// Accessing the length of the history stack\nlet historyLength = window.history.length;\nconsole.log(`Number of pages in history: ${historyLength}`);\n</code></pre>"},{"location":"02_js_fundamentals/#7-functions","title":"7. Functions","text":"<p>A function in programming is a reusable block of code that performs a specific task. It can take inputs, process them, and return an output. Functions are fundamental building blocks in programming, allowing for modular, readable, and maintainable code.</p>"},{"location":"02_js_fundamentals/#key-characteristics-of-functions","title":"Key Characteristics of Functions:","text":"<ol> <li>Modularity: Functions allow code to be divided into smaller, manageable pieces, each performing a specific task.</li> <li>Reusability: Once defined, a function can be called multiple times within a program, reducing redundancy.</li> <li>Abstraction: Functions enable the encapsulation of complex operations, hiding the details and exposing only necessary interfaces.</li> <li>Maintainability: Functions make it easier to update and manage code. Changes made within a function do not affect other parts of the code that rely on it.</li> </ol>"},{"location":"02_js_fundamentals/#basic-structure-of-a-function","title":"Basic Structure of a Function:","text":"<ol> <li>Function Declaration: Defines the function and specifies its name, parameters, and body.</li> <li>Function Call: Executes the function by referencing its name and passing any required arguments. Optionally we can save the value that is returned by the function. </li> </ol>"},{"location":"02_js_fundamentals/#example-in-javascript","title":"Example in JavaScript:","text":"<p>Note that in Javascript we don't declare the type of the parameters and the return.</p> <pre><code>// Function Declaration\nfunction greet(name) {\n    return `Hello, ${name}!`;\n}\n\n// Function Call\nlet message = greet('Alice');\nconsole.log(message); // Output: Hello, Alice!\n</code></pre>"},{"location":"02_js_fundamentals/#71-global-functions-in-javascript","title":"7.1 Global Functions in JavaScript","text":"<p>Global functions in JavaScript are built-in functions that are part of the global object and can be called from anywhere in your code. They are available in both the browser and Node.js environments. Here are some of the most commonly used global functions:</p> <ol> <li> <p><code>parseInt(string, radix)</code></p> <ul> <li>Parses a string and returns an integer of the specified radix (base).</li> <li>Example:  <pre><code>let num = parseInt(\"10\", 10); // 10\n</code></pre></li> </ul> </li> <li> <p><code>parseFloat(string)</code></p> <ul> <li>Parses a string and returns a floating-point number.</li> <li>Example:     <pre><code>let num = parseFloat(\"10.5\"); // 10.5\n</code></pre></li> </ul> </li> <li> <p><code>isNaN(value)</code></p> <ul> <li>Determines whether a value is NaN (Not-a-Number).</li> <li>Example:     <pre><code>let result = isNaN(\"hello\"); // true\n</code></pre></li> </ul> </li> <li> <p><code>isFinite(value)</code></p> <ul> <li>Determines whether a value is a finite number.</li> <li>Example:     <pre><code>let result = isFinite(10); // true\nlet result2 = isFinite(Infinity); // false\n</code></pre></li> </ul> </li> <li> <p><code>eval(string)</code></p> <ul> <li>Evaluates JavaScript code represented as a string.</li> <li>Example:     <pre><code>let result = eval(\"2 + 2\"); // 4\n</code></pre></li> </ul> </li> <li> <p><code>encodeURI(uri)</code></p> <ul> <li>Encodes a Uniform Resource Identifier (URI) by escaping certain characters.</li> <li>Example:     <pre><code>let uri = \"https://www.example.com?name=John Doe\";\nlet encodedURI = encodeURI(uri); // \"https://www.example.com?name=John%20Doe\"\n</code></pre></li> </ul> </li> <li> <p><code>encodeURIComponent(uriComponent)</code></p> <ul> <li>Encodes a URI component by escaping certain characters.</li> <li>Example:     <pre><code>let uriComponent = \"John Doe &amp; Co\";\nlet encodedURIComponent = encodeURIComponent(uriComponent); // \"John%20Doe%20%26%20Co\"\n</code></pre></li> </ul> </li> <li> <p><code>decodeURI(encodedURI)</code></p> <ul> <li>Decodes a Uniform Resource Identifier (URI) created by <code>encodeURI</code>.</li> <li>Example:     <pre><code>let encodedURI = \"https://www.example.com?name=John%20Doe\";\nlet decodedURI = decodeURI(encodedURI); // \"https://www.example.com?name=John Doe\"\n</code></pre></li> </ul> </li> <li> <p><code>decodeURIComponent(encodedURIComponent)</code></p> <ul> <li>Decodes a URI component created by <code>encodeURIComponent</code>.</li> <li>Example:     <pre><code>let encodedURIComponent = \"John%20Doe%20%26%20Co\";\nlet decodedURIComponent = decodeURIComponent(encodedURIComponent); // \"John Doe &amp; Co\"\n</code></pre></li> </ul> </li> <li> <p><code>setTimeout(function, delay)</code></p> <ul> <li>Calls a function or evaluates an expression after a specified number of milliseconds.</li> <li>Example:       <pre><code>setTimeout(function() {\n    console.log(\"Hello after 2 seconds\");\n}, 2000);\n</code></pre></li> </ul> </li> <li> <p><code>setInterval(function, delay)</code></p> <ul> <li>Repeatedly calls a function or evaluates an expression at specified intervals (in milliseconds).</li> <li>Example:       <pre><code>setInterval(function() {\n    console.log(\"Hello every 2 seconds\");\n}, 2000);\n</code></pre></li> </ul> </li> <li> <p><code>clearTimeout(timeoutID)</code></p> <ul> <li>Clears a timer set with <code>setTimeout</code>.</li> <li>Example:       <pre><code>let timeoutID = setTimeout(function() {\n    console.log(\"This won't run\");\n}, 2000);\nclearTimeout(timeoutID);\n</code></pre></li> </ul> </li> <li> <p><code>clearInterval(intervalID)</code></p> <ul> <li>Clears a timer set with <code>setInterval</code>.</li> <li>Example:       <pre><code>let intervalID = setInterval(function() {\n    console.log(\"This won't run repeatedly\");\n}, 2000);\nclearInterval(intervalID);\n</code></pre></li> </ul> </li> </ol>"},{"location":"02_js_fundamentals/#72-declaring-user-functions","title":"7.2 Declaring User Functions","text":"<p>It is possible to create custom functions in JavaScript, different from the predefined functions provided by the language. There are two types of function declarations:</p> <ol> <li>Classical Function Declaration using the <code>function</code> Keyword</li> <li>Function by Expression (Lambda)</li> <li>Arrow Functions (introduced in ES6)</li> </ol>"},{"location":"02_js_fundamentals/#classical-function-declaration","title":"Classical Function Declaration","text":"<p>The classical way to define a function in JavaScript is by using the <code>function</code> keyword. This method allows you to create named or anonymous functions.</p> <p>Example:</p> <pre><code>// Named function\nfunction add(a, b) {\n    return a + b;\n}\n\n// Function call\nlet result = add(2, 3);\nconsole.log(result); // Output: 5\n</code></pre>"},{"location":"02_js_fundamentals/#function-by-expression-and-lambda-function","title":"Function by Expression and Lambda function.","text":"<p>You can asign a function to a variable by a expression.</p> <p>We can assing or pass as a parameter an anonymous function. We call this a Lambda function.</p> <pre><code>// 1. Function by expression\nconst multiply = function multiplication(a, b) {\n    return a * b;\n};\n\n// Calling the function\nlet result = multiply(5, 3);\nconsole.log(result); // Output: 15\n\n// 2. Lambda or anonymous function by expression\n// this second options has more sense\nconst divide = function (a,b) {\n    return a / b;\n}\n\n// We call exactly the same\nlet resultDiv = divide(15, 3);\nconsole.log(resultDiv); // Output: 5\n</code></pre>"},{"location":"02_js_fundamentals/#arrow-functions-lambda","title":"Arrow Functions (Lambda)Instructions:Example Usage:Hints:","text":"<p>Arrow functions provide a more concise syntax to write functions in JavaScript. They are anonymous (also called Lambda) and are often used in place of function expressions.</p> <pre><code>// Traditional Function\nconst f1 = function (a) {\n  return a + 100;\n}\n\n// Breakdown of the Arrow Function\n\n// 1. Remove the \"function\" keyword and place the arrow between the argument and the opening brace.\nconst f2 = (a) =&gt; {\n  return a + 100;\n}\n\n// 2. Remove the braces of the body and the \"return\" keyword \u2014 the return is implicit.\nconst f3 = (a) =&gt; a + 100;\n\n// 3. Omit the parentheses around the argument\nconst f4 = a =&gt; a + 100;\n</code></pre>  Hands-On Exercise: Calculate Days Between Two Dates <p>Write a JavaScript function that calculates the number of days between two given dates.</p> <ol> <li>Create a function <code>calculateDaysBetweenDates(date1, date2)</code> that takes two date strings as input.</li> <li>Parse the date strings into <code>Date</code> objects.</li> <li>Calculate the difference in milliseconds between the two dates.</li> <li>Convert the difference in milliseconds to days.</li> <li>Return the number of days between the two dates.</li> </ol> <pre><code>let date1 = \"2024-07-01\";\nlet date2 = \"2024-07-13\";\nlet daysBetween = calculateDaysBetweenDates(date1, date2);\nconsole.log(`There are ${daysBetween} days between ${date1} and ${date2}.`); // Output: There are 12 days between 2024-07-01 and 2024-07-13.</code></pre> <ul> <li>Use <code>new Date(dateString)</code> to create <code>Date</code> objects from the date strings.</li> <li>Subtract the earlier date from the later date to get the difference in milliseconds.</li> <li>There are <code>1000 * 60 * 60 * 24</code> milliseconds in a day.</li> </ul>"},{"location":"02_js_fundamentals/#73-callback-functions","title":"7.3 Callback Functions","text":"<p>At a high level, a callback is when a function B is passed as a parameter to another function A. This allows function A to invoke (or \"call back\") function B at a later time, typically in response to some event or condition.</p>"},{"location":"02_js_fundamentals/#key-points","title":"Key Points:","text":"<ul> <li>Flexibility: Callbacks provide a way to specify custom behavior that should be executed when an action is completed or an event occurs.</li> <li>Asynchronous Operations: They are commonly used in asynchronous programming to handle operations that take time to complete, such as fetching data from a server.</li> <li>External Definition: Callback functions are defined outside of the function that uses them, allowing for modular and reusable code.</li> </ul>"},{"location":"02_js_fundamentals/#example-concept","title":"Example Concept:","text":"<pre><code>// Function A takes function B as a callback parameter\nfunction A(callback) {\n    // Function A's logic\n    console.log(\"Inside function A\");\n\n    // Invoke the callback function B\n    callback();\n}\n\n// Function B (callback function)\nfunction B() {\n    console.log(\"Callback function B executed\");\n}\n\n// Call function A and pass function B as a callback\nA(B);\n</code></pre>"},{"location":"02_js_fundamentals/#ad-hoc-callback-functions","title":"Ad-hoc callback functions","text":"<p>In JavaScript, ad-hoc callback functions are functions that are defined inline at the moment they are passed as arguments to another function. The <code>forEach</code> method is a good example where ad-hoc callbacks are frequently used to iterate over arrays.</p>"},{"location":"02_js_fundamentals/#example-using-foreach","title":"Example Using <code>forEach</code>:","text":"<pre><code>// Array of numbers\nconst numbers = [1, 2, 3, 4, 5];\n\n// Using forEach with an ad-hoc callback function\nnumbers.forEach(function(item) {\n    console.log(item); // Show each number\n});\n\n\n// Using forEach with an ad-hoc callback arrow function\nnumbers.forEach( item =&gt; {\n    console.log(item * 2); // Show each number multiplied by 2\n});\n</code></pre>"},{"location":"03_objects_arrays/","title":"UNIT3 - Arrays, Objects, and Classes","text":""},{"location":"03_objects_arrays/#1-arrays","title":"1. Arrays","text":"<p>An Array is an ordered set of related values. Each of these values is called an element, and each element has an index indicating its numerical position in the Array. You must declare an Array before you can use it.</p>"},{"location":"03_objects_arrays/#key-points","title":"Key Points:","text":"<ul> <li>Elements: The individual values in an array.</li> <li>Indexes: Numerical positions of the elements, starting from 0.</li> <li>Declaration: Arrays must be declared before use.</li> </ul>"},{"location":"03_objects_arrays/#11-declaring-an-array","title":"1.1 Declaring an Array","text":"<p>In JavaScript, there are two main ways to create arrays:</p> <ol> <li>Using the <code>Array</code> constructor.</li> <li>Using array literal notation to define the array and its items.</li> </ol>"},{"location":"03_objects_arrays/#1-using-the-array-constructor","title":"1. Using the <code>Array</code> constructor","text":"<pre><code>const a1 = new Array(); // New empty array\nconsole.log(a1.length);\n\nconst a2 = new Array(4); // New array with 4 elements\n\n// New array with 3 defined elements\nconst artist = new Array('Michael Jackson', 'Taylor Swift', 'David Bowie');\n\n// Fill a1 new array with random values\nfor (let i =0; i&lt;10; i++){\n  a1[i] = Math.random();\n}\n\n// Showing length and array\nconsole.log(a1.length)\nconsole.log(a2.length)\nconsole.log(artist.length)\nconsole.log(a1)\nconsole.log(a2)\nconsole.log(artist)\n</code></pre>"},{"location":"03_objects_arrays/#2-using-array-literal-notation","title":"2. Using array literal notation","text":"<pre><code>const artist2 = ['Michael Jackson', 'Taylor Swift', 'David Bowie'];\n\n// Showing length, array, and first item:\nconsole.log(artist2.length)\nconsole.log(artist2)\nconsole.log(artist2[0])\n</code></pre>"},{"location":"03_objects_arrays/#12-accessing-items-in-the-array","title":"1.2 Accessing Items in the Array","text":"<p>You can access items in an array using their index. Array indexes start at 0, so the first element is at index 0, the second element is at index 1, and so on.</p>"},{"location":"03_objects_arrays/#example-of-accessing-items","title":"Example of Accessing Items:","text":"<pre><code>// Declare an array\nconst colors = [\"Red\", \"Green\", \"Blue\", \"Yellow\"];\n\n// Access elements by index\nconsole.log(colors[0]); // Output: Red\nconsole.log(colors[1]); // Output: Green\nconsole.log(colors[2]); // Output: Blue\nconsole.log(colors[3]); // Output: Yellow\n\n// Access the last element using the length property\nconsole.log(colors[colors.length - 1]); // Output: Yellow\n\n// Modify an element by index\ncolors[1] = \"Purple\";\nconsole.log(colors); // Output: [\"Red\", \"Purple\", \"Blue\", \"Yellow\"]\n\n// Loop through the array to access each element\ncolors.forEach(function(color, index) {\n    console.log(index + \": \" + color);\n});\n// Output:\n// 0: Red\n// 1: Purple\n// 2: Blue\n// 3: Yellow\n</code></pre>"},{"location":"03_objects_arrays/#13-ways-to-iterate-over-an-array","title":"1.3 Ways to Iterate Over an Array","text":"<p>In JavaScript, there are several ways to iterate over an array. Here are some of the most common methods:</p> <ol> <li>Traditional <code>for</code> Loop</li> <li><code>for...of</code> Loop</li> <li><code>for...in</code> Loop</li> <li><code>forEach</code> Method</li> </ol>"},{"location":"03_objects_arrays/#1-traditional-for-loop","title":"1. Traditional <code>for</code> Loop","text":"<p>The traditional <code>for</code> loop is the most basic and flexible way to iterate over an array.</p> <pre><code>const fruits = [\"Apple\", \"Banana\", \"Cherry\", \"Date\"];\n\nfor (let i = 0; i &lt; fruits.length; i++) {\n    console.log(fruits[i]);\n}\n// Output:\n// Apple\n// Banana\n// Cherry\n// Date\n</code></pre>"},{"location":"03_objects_arrays/#2-forof-loop","title":"2. <code>for...of</code> Loop","text":"<p>The for...of loop is used to iterate over the values of an array. <pre><code>for (const fruit of fruits) {\n    console.log(fruit);\n}\n// Output:\n// Apple\n// Banana\n// Cherry\n// Date\n</code></pre></p>"},{"location":"03_objects_arrays/#3-forin-loop","title":"3. <code>for...in</code> Loop","text":"<p>The for...in loop is used to iterate over the enumerable properties of an object, but it can also be used to iterate over the indices of an array (not recommended for arrays).</p> <pre><code>for (const index in fruits) {\n    console.log(fruits[index]);\n}\n// Output:\n// Apple\n// Banana\n// Cherry\n// Date\n</code></pre>"},{"location":"03_objects_arrays/#4-foreach-method","title":"4. <code>forEach</code> Method","text":"<p>The forEach method executes a provided callback function once for each array element.</p> <p>This is the most used method to iterate over arrays.</p> <pre><code>fruits.forEach((fruit, index) =&gt; {\n    console.log(index + \": \" + fruit);\n});\n// Output:\n// 0: Apple\n// 1: Banana\n// 2: Cherry\n// 3: Date\n</code></pre>"},{"location":"03_objects_arrays/#14-array-properties","title":"1.4 Array Properties","text":"<p>Arrays in JavaScript come with several built-in properties that provide useful information and functionality. Here are two of the most important properties:</p>"},{"location":"03_objects_arrays/#1-length","title":"1. <code>length</code>","text":"<p>The <code>length</code> property of an array returns the number of elements in the array.</p> <pre><code>const fruits = [\"Apple\", \"Banana\", \"Cherry\"];\nconsole.log(fruits.length); // Output: 3\n</code></pre>"},{"location":"03_objects_arrays/#2-prototype","title":"2. <code>prototype</code>","text":"<p>The <code>prototype</code> property allows you to add new properties and methods to all array objects.</p> <pre><code>Array.prototype.first = function() {\n    return this[0];\n};\n\nconsole.log(fruits.first()); // Output: Apple\n</code></pre>"},{"location":"03_objects_arrays/#15-array-important-methods","title":"1.5 Array Important Methods","text":"<p>JavaScript arrays come with a variety of built-in methods that provide powerful functionalities for manipulating and interacting with array elements. Here are some of the most important methods:</p> <ol> <li><code>push</code></li> <li><code>pop</code></li> <li><code>shift</code></li> <li><code>unshift</code></li> <li><code>concat</code></li> <li><code>slice</code></li> <li><code>splice</code></li> <li><code>indexOf</code></li> <li><code>includes</code></li> <li><code>forEach</code></li> <li><code>map</code></li> <li><code>filter</code></li> <li><code>reduce</code></li> </ol>"},{"location":"03_objects_arrays/#1-push","title":"1. <code>push</code>","text":"<p>Adds one or more elements to the end of an array and returns the new length of the array.</p> <pre><code>const fruits = [\"Apple\", \"Banana\"];\nfruits.push(\"Cherry\");\nconsole.log(fruits); // Output: [\"Apple\", \"Banana\", \"Cherry\"]\n</code></pre>"},{"location":"03_objects_arrays/#2-pop","title":"2. <code>pop</code>","text":"<p>Removes the last element from an array and returns that element.</p> <pre><code>const lastFruit = fruits.pop();\nconsole.log(lastFruit); // Output: Cherry\nconsole.log(fruits); // Output: [\"Apple\", \"Banana\"]\n</code></pre>"},{"location":"03_objects_arrays/#3-shift","title":"3. <code>shift</code>","text":"<p>Removes the first element from an array and returns that element.</p> <pre><code>const firstFruit = fruits.shift();\nconsole.log(firstFruit); // Output: Apple\nconsole.log(fruits); // Output: [\"Banana\"]\n</code></pre>"},{"location":"03_objects_arrays/#4-unshift","title":"4. <code>unshift</code>","text":"<p>Adds one or more elements to the beginning of an array and returns the new length of the array.</p> <pre><code>fruits.unshift(\"Apple\");\nconsole.log(fruits); // Output: [\"Apple\", \"Banana\"]\n</code></pre>"},{"location":"03_objects_arrays/#5-concat","title":"5. <code>concat</code>","text":"<p>Merges two or more arrays and returns a new array.</p> <pre><code>const moreFruits = [\"Cherry\", \"Date\"];\nconst allFruits = fruits.concat(moreFruits);\nconsole.log(allFruits); // Output: [\"Apple\", \"Banana\", \"Cherry\", \"Date\"]\n</code></pre>"},{"location":"03_objects_arrays/#6-slice","title":"6. <code>slice</code>","text":"<p>Returns a shallow copy of a portion of an array into a new array object. </p> <p><pre><code>const someFruits = allFruits.slice(1, 3);\nconsole.log(someFruits); // Output: [\"Banana\", \"Cherry\"]\n</code></pre> The last index is not included. In the example we take from index 1 to index 3 (not included).</p>"},{"location":"03_objects_arrays/#7-splice","title":"7. <code>splice</code>","text":"<p>Changes the contents of an array by removing or replacing existing elements and/or adding new elements.</p> <pre><code>allFruits.splice(2, 1, \"Blueberry\");\nconsole.log(allFruits); // Output: [\"Apple\", \"Banana\", \"Blueberry\", \"Date\"]\n</code></pre>"},{"location":"03_objects_arrays/#8-indexof","title":"8. <code>indexOf</code>","text":"<p>Returns the first index at which a given element can be found in the array, or -1 if it is not present.</p> <pre><code>const index = allFruits.indexOf(\"Banana\");\nconsole.log(index); // Output: 1\n</code></pre>"},{"location":"03_objects_arrays/#9-includes","title":"9. <code>includes</code>","text":"<p>Determines whether an array includes a certain element, returning true or false.</p> <pre><code>const hasBanana = allFruits.includes(\"Banana\");\nconsole.log(hasBanana); // Output: true\n</code></pre>"},{"location":"03_objects_arrays/#10-foreach","title":"10. <code>forEach</code>","text":"<p>Executes a provided function once for each array element.</p> <pre><code>allFruits.forEach(function(fruit, index) {\n    console.log(index + \": \" + fruit);\n});\n// Output:\n// 0: Apple\n// 1: Banana\n// 2: Blueberry\n// 3: Date\n</code></pre>"},{"location":"03_objects_arrays/#11-map","title":"11. <code>map</code>","text":"<p>Creates a new array with the results of calling a provided function on every element in the calling array.</p> <pre><code>const upperCaseFruits = allFruits.map(function(fruit) {\n    return fruit.toUpperCase();\n});\nconsole.log(upperCaseFruits); // Output: [\"APPLE\", \"BANANA\", \"BLUEBERRY\", \"DATE\"]\n</code></pre>"},{"location":"03_objects_arrays/#12-filter","title":"12. <code>filter</code>","text":"<p>Creates a new array with all elements that pass the test implemented by the provided function.</p> <pre><code>const longNamedFruits = allFruits.filter(function(fruit) {\n    return fruit.length &gt; 5;\n});\nconsole.log(longNamedFruits); // Output: [\"Blueberry\"]\n</code></pre>"},{"location":"03_objects_arrays/#13-reduce","title":"13. <code>reduce</code>","text":"<p>Executes a reducer function on each element of the array, resulting in a single output value.</p> <pre><code>const totalLength = allFruits.reduce(function(accumulator, fruit) {\n    return accumulator + fruit.length;\n}, 0);\nconsole.log(totalLength); // Output: 26\n</code></pre>  Hands-On Exercise: Array Manipulation with `map` <p>Create a web page that calculates the square of each number in an array and displays the results.</p>"},{"location":"03_objects_arrays/#2-objects","title":"2. Objects","text":"<p>JavaScript is designed on a simple object-based paradigm. An object is a collection of properties, where a property is an association between a name (or key) and a value. </p> <p>The value of a property can be a function, in which case the property is known as a method. </p> <p>In addition to the objects that are predefined in the browser, you can define your own objects.</p> <p>Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_objects</p>"},{"location":"03_objects_arrays/#key-points_1","title":"Key Points:","text":"<ul> <li>Properties: Associations between a name (key) and a value.</li> <li>Methods: Functions that are properties of objects.</li> <li>Custom Objects: User-defined objects in addition to browser-defined objects.</li> </ul>"},{"location":"03_objects_arrays/#21-declaring-objects","title":"2.1 Declaring Objects","text":"<p>In JavaScript, there are two main ways to create objects:</p> <ol> <li>Using the <code>Object</code> constructor and then adding properties.</li> <li>Using object literal notation to define the object and its properties directly.</li> </ol>"},{"location":"03_objects_arrays/#1-using-the-object-constructor","title":"1. Using the <code>Object</code> Constructor","text":"<p>You can create an empty object using the <code>Object</code> constructor and then add properties to it.</p> <pre><code>// Create an empty object using the Object constructor\nconst myCar = new Object();\n\n// Add properties to the object\nmyCar.make = \"Ford\";\nmyCar.model = \"Mustang\";\nmyCar.year = 1969;\n\n// Access properties\nconsole.log(`Make: ${myCar.Make} Model: ${myCar.model}`);\n</code></pre>"},{"location":"03_objects_arrays/#2-using-object-literal-notation","title":"2. Using object literal notation","text":"<p>You can define the object and its properties directly using object literal notation, which is more concise and easier to read.</p> <pre><code>// Create an object with literal notation\nconst myCar2 = {\n  make: 'Seat',\n  model: '600',\n  year: '1965'\n}\n\n// Access properties\nconsole.log(`Make: ${myCar2.Make} Model: ${myCar2.model}`);\n</code></pre>"},{"location":"03_objects_arrays/#creating-an-object-with-methods","title":"Creating an object with methods:","text":"<pre><code>// Define an object using object literal notation\nconst person = {\n    firstName: \"John\",\n    lastName: \"Doe\",\n    age: 30,\n    // this is a method:\n    greet: function() {\n        console.log(\"Hello, \" + this.firstName + \" \" + this.lastName);\n    }\n};\n\n// Access properties and call the method\nconsole.log(person.firstName); // Output: John\n// Calling the method\nperson.greet(); // Output: Hello, John Doe\n</code></pre>"},{"location":"03_objects_arrays/#22-constructor-functions-and-object-instances","title":"2.2 Constructor Functions and Object Instances","text":"<p>In JavaScript, you can create a constructor function to define the structure and behavior of objects. Then, you can create instances of the object using the <code>new</code> keyword.</p> <pre><code>// Define a constructor function\nfunction Person(firstName, lastName, age) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.age = age;\n    this.greet = function() {\n        console.log(\"Hello, \" + this.firstName + \" \" + this.lastName);\n    };\n}\n\n// Create instances of the Person object\nconst person1 = new Person(\"John\", \"Doe\", 30);\nconst person2 = new Person(\"Jane\", \"Smith\", 25);\n\n// Access properties and call methods\nconsole.log(person1.firstName); // Output: John\nperson1.greet(); // Output: Hello, John Doe\n\nconsole.log(person2.firstName); // Output: Jane\nperson2.greet(); // Output: Hello, Jane Smith\n</code></pre>"},{"location":"03_objects_arrays/#3-classes-in-javascript","title":"3. Classes in JavaScript","text":"<p>Since ES6 (ECMAScript 2015), JavaScript supports class syntax, allowing for a more traditional object-oriented programming style. Here are some key features of ES6 classes:</p>"},{"location":"03_objects_arrays/#class-declaration-with-constructor","title":"Class Declaration with Constructor","text":"<p>Classes in JavaScript can have a <code>constructor</code> method, which is a special method for initializing instances of the class with certain properties.</p> <pre><code>class Car {\n  constructor(brand, model) {\n    this.brand = brand;\n    this.model = model;\n    this.mileage = 0;\n  }\n}\n</code></pre>"},{"location":"03_objects_arrays/#setter-and-getter-methods","title":"Setter and Getter Methods","text":"<p>ES6 classes also support setter and getter methods using the <code>set</code> and <code>get</code> keywords, respectively, allowing controlled access to object properties. We can have regular methods also.</p> <pre><code>class Car {\n  constructor(brand, model) {\n    this._brand = brand;\n    this._model = model;\n    this._mileage = 0;\n  }\n\n  // Regular method\n  drive(distance) {\n    this.mileage += distance;\n    console.log(`Driving ${distance} miles in ${this.brand} ${this.model}.`);\n  }\n\n  // Getter method\n  get mileage() {\n    return this._mileage;\n  }\n\n  // Setter method\n  set mileage(value) {\n    if (value &gt;= 0) {\n      this._mileage = value;\n    } else {\n      console.error(\"Mileage cannot be negative.\");\n    }\n  }\n}\n\n// Create an instance of Car\nconst myCar = new Car(\"Toyota\", \"Corolla\");\n\n// Call regular method to drive\nmyCar.drive(50);\nmyCar.drive(30);\n\n// Access mileage using getter method\nconsole.log(`Total mileage: ${myCar.mileage} miles.`);\n</code></pre>"},{"location":"03_objects_arrays/#4-arrays-of-objects","title":"4. Arrays of objects","text":"<p>In JavaScript, arrays can hold a collection of objects. Each object within the array can have its own properties and methods, allowing for structured data organization and manipulation.</p> <pre><code>// Define an array of objects (array of cars)\nlet cars = [\n  { brand: \"Toyota\", model: \"Corolla\", year: 2020 },\n  { brand: \"Honda\", model: \"Civic\", year: 2019 },\n  { brand: \"Ford\", model: \"Mustang\", year: 2021 }\n];\n\n// Accessing objects in the array\nconsole.log(cars[0]); // Output: { brand: \"Toyota\", model: \"Corolla\", year: 2020 }\n\n// Adding a new object to the array\ncars.push({ brand: \"Tesla\", model: \"Model S\", year: 2022 });\n\n// Modifying an object in the array\ncars[1].year = 2020;\n\n// Removing an object from the array\ncars.splice(2, 1); // Removes the object at index 2\n\n// Iterating over the array of objects\ncars.forEach(function(car) {\n  console.log(`${car.brand} ${car.model} (${car.year})`);\n});\n</code></pre>"},{"location":"03_objects_arrays/#5-json-notation","title":"5. JSON Notation","text":"<p>JSON (JavaScript Object Notation) is a lightweight data-interchange format that is easy for humans to read and write, and easy for machines to parse and generate. It is widely used as a format for exchanging data between a server and a web application, and is a standard data format with many programming languages.</p>"},{"location":"03_objects_arrays/#syntax","title":"Syntax","text":"<ul> <li>Data is in name/value pairs: JSON data is represented as key-value pairs.</li> <li>Data is separated by commas: JSON data is separated by commas.</li> <li>Curly braces hold objects: JSON data is enclosed in curly braces <code>{}</code> to denote objects.</li> <li>Square brackets hold arrays: JSON arrays are enclosed in square brackets <code>[]</code>.</li> </ul> <pre><code>{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"age\": 30,\n  \"isStudent\": false,\n  \"address\": {\n    \"streetAddress\": \"123 Main Street\",\n    \"city\": \"Anytown\",\n    \"state\": \"CA\",\n    \"postalCode\": \"12345\"\n  },\n  \"phoneNumbers\": [\n    { \"type\": \"home\", \"number\": \"555-1234\" },\n    { \"type\": \"work\", \"number\": \"555-5678\" }\n  ]\n}\n</code></pre>"},{"location":"03_objects_arrays/#key-points_2","title":"Key Points","text":"<ul> <li>Data Types:JSON supports strings, numbers, objects, arrays, booleans, and null values.</li> <li>Universal Format: JSON is independent of programming languages, making it suitable for data exchange.</li> <li>Parsing: JSON can be parsed into JavaScript objects using JSON.parse() and converted back to JSON using JSON.stringify().</li> </ul>"},{"location":"03_objects_arrays/#usage","title":"Usage","text":"<ul> <li>Web APIs: Many web APIs use JSON to send data between servers and web browsers.</li> <li>Configuration Files: JSON is used in configuration files due to its human-readable format.</li> <li>Data Storage: JSON is used for storing and exchanging structured data in databases and applications.</li> </ul>"},{"location":"03_objects_arrays/#parsing-an-object-to-json-ready-to-send-or-store-and-vice-versa","title":"Parsing an object to JSON ready to send or store. And vice-versa.","text":"<pre><code>// Object with multiple attributes, including an array of objects\nlet user = {\n  name: \"John Doe\",\n  age: 35,\n  address: {\n    street: \"Main Street\",\n    city: \"New York\",\n    country: \"USA\"\n  },\n  orderHistory: [\n    { id: 1, product: \"Smartphone\", quantity: 1 },\n    { id: 2, product: \"Tablet\", quantity: 2 },\n    { id: 3, product: \"Laptop\", quantity: 1 }\n  ]\n};\n\n// Convert to JSON using JSON.stringify()\nlet jsonUser = JSON.stringify(user);\n\nconsole.log(\"Object converted to JSON:\");\nconsole.log(jsonUser);\n\n// Convert back to object using JSON.parse()\nlet parsedObject = JSON.parse(jsonUser);\n\nconsole.log(\"\\nJSON converted back to object:\");\nconsole.log(parsedObject);\n</code></pre>"},{"location":"04_DOM/","title":"UNIT4 - Manipulating the DOM","text":""},{"location":"04_DOM/#1-document-object-model-dom","title":"1. Document Object Model (DOM)","text":"<p>The DOM (Document Object Model) is a W3C standard that defines how to access documents such as HTML and XML. It is a W3C platform application programming interface (API) that allows scripts to access and dynamically update the content, structure, and style of a document.</p> <ul> <li>Standard: The DOM is a standard maintained by the World Wide Web Consortium (W3C) that provides a structured representation of a document.</li> <li>API: It serves as an interface for programming, enabling developers to manipulate the document's structure, style, and content through scripting languages like JavaScript.</li> <li>Dynamic Updates: With the DOM, scripts can dynamically modify the document's content, structure, and style, allowing for interactive and responsive web applications.</li> </ul> <p>Here's a simple example of how you might use the DOM to dynamically change the content of an HTML element:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;DOM Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1 id=\"title\"&gt;Hello, World!&lt;/h1&gt;\n    &lt;button onclick=\"changeTitle()\"&gt;Change Title&lt;/button&gt;\n\n    &lt;script&gt;\n        function changeTitle() {\n            // Access the DOM element with the id 'title'\n            const titleElement = document.getElementById('title');\n            // Change the content of the element\n            titleElement.textContent = 'Hello, DOM!';\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"04_DOM/#11-dom-history","title":"1.1 DOM History","text":"<ul> <li> <p>Early Web (1990s): The web started with simple static HTML pages. There was no standard way to manipulate the content or structure of these pages dynamically.</p> </li> <li> <p>Netscape and IE Wars: Netscape Navigator and Internet Explorer (IE) were the two dominant browsers. Each developed its own methods for manipulating HTML documents, leading to compatibility issues.</p> </li> <li> <p>Introduction of JavaScript (1995): Brendan Eich created JavaScript for Netscape, allowing basic dynamic interactions. However, Netscape\u2019s approach differed from IE\u2019s. Netscape Navigator 2.0 was the fist browser to implement the denominated DOM Level 0. </p> </li> <li> <p>W3C Involvement (1998): The World Wide Web Consortium (W3C) stepped in to standardize how documents should be accessed and manipulated, resulting in the creation of the Document Object Model (DOM) Level 1.</p> </li> <li> <p>DOM Level 1 (1998): The first version of the DOM was released, providing a standardized way to manipulate document structure and content across different browsers.</p> </li> <li> <p>DOM Level 2 (2000): Introduced more advanced features like CSS support, events, and XML document manipulation.</p> </li> <li> <p>DOM Level 3 (2004): Further expanded the API to include more features for document manipulation and traversal.</p> </li> <li> <p>HTML5 and Modern Web (2010s): HTML5 brought significant updates to the DOM, making it more robust and enabling more complex web applications. Modern browsers have largely adopted and implemented these standards consistently.</p> </li> </ul> <p>The development and standardization of the DOM have been crucial in creating the dynamic, interactive web we know today, providing a consistent way for scripts to interact with and modify web documents across different browsers.</p> <p>--&gt; DOM Level 3 Standard by the W3C</p>"},{"location":"04_DOM/#2the-dom-tree-structure","title":"2.The DOM Tree Structure","text":"<p>A DOM tree is a tree structure whose nodes represent an HTML or XML document's contents. Each HTML or XML document has a DOM tree representation. For example, consider the following document:</p> <p><pre><code>&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;title&gt;My Title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;a href=\"http://alink.com\"&gt;My Link&lt;/a&gt;\n    &lt;h1&gt;My Header&lt;/h1&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> It has a DOM tree that looks like that:</p> <p></p> <p>Although the above tree is similar to the above document's DOM tree, it's not identical, as the actual DOM tree preserves whitespace.</p> <p>When a web browser parses an HTML document, it builds a DOM tree and then uses it to display the document.</p> <p>SOURCE: mdn web docs_</p>"},{"location":"04_DOM/#tree-structure-rules","title":"Tree Structure Rules:","text":"<p>To organize the tree structure, there are a series of rules:</p> <ul> <li>In the tree of nodes, the top node (document) is called the root.</li> <li>Each node, except the root node, has a parent.</li> <li>A node can have any number of children.</li> <li>A leaf is a node with no children.</li> <li>Nodes that share the same parent are siblings.</li> </ul>"},{"location":"04_DOM/#21-the-node-interface","title":"2.1 The Node Interface","text":"<p>A Node is an abstract interface representing a single node in the tree. These nodes can be a Document, an Element, a DocumentFragment, and more.</p> <ul> <li>Document: The root node of the HTML document.</li> <li>DocumentType: A node representing the DTD (Document Type Definition) of the page.</li> <li>Element: A node representing an HTML element.</li> <li>Attr: A node representing an attribute of an element.</li> <li>Text: A node that stores the text contained within an Element node.</li> <li>Comment: A node that stores a comment in the HTML document.</li> </ul>"},{"location":"04_DOM/#node-interface","title":"Node Interface","text":"<ul> <li>To manipulate the information of nodes, JavaScript creates an object called <code>Node</code>.</li> <li>This object defines properties and methods for processing documents.</li> <li>It also defines a set of constants that identify the types of nodes. Those are the values that the <code>nodeType</code> property can have:</li> </ul> Constant Description Value <code>Node.ELEMENT_NODE</code> Represents an element node. 1 <code>Node.ATTRIBUTE_NODE</code> Represents an attribute node. 2 <code>Node.TEXT_NODE</code> Represents a text node. 3 <code>Node.CDATA_SECTION_NODE</code> Represents a CDATA section node. 4 <code>Node.ENTITY_REFERENCE_NODE</code> Represents an entity reference node. 5 <code>Node.ENTITY_NODE</code> Represents an entity node. 6 <code>Node.PROCESSING_INSTRUCTION_NODE</code> Represents a processing instruction node. 7 <code>Node.COMMENT_NODE</code> Represents a comment node. 8 <code>Node.DOCUMENT_NODE</code> Represents the document node. 9 <code>Node.DOCUMENT_TYPE_NODE</code> Represents the document type node. 10 <code>Node.DOCUMENT_FRAGMENT_NODE</code> Represents a document fragment node. 11 <code>Node.NOTATION_NODE</code> Represents a notation node. 12"},{"location":"04_DOM/#node-properties-and-methods","title":"Node Properties and Methods","text":"Property/Method Description <code>nodeName</code> Returns the name of the node. <code>nodeType</code> Returns an integer code representing the type of the node. <code>nodeValue</code> Sets or returns the value of the node. For element nodes, this is <code>null</code>. <code>parentNode</code> Returns the parent node of the specified node. <code>childNodes</code> Returns a NodeList of child nodes for the specified node. <code>firstChild</code> Returns the first child node of the specified node. <code>lastChild</code> Returns the last child node of the specified node. <code>previousSibling</code> Returns the previous sibling node of the specified node. <code>nextSibling</code> Returns the next sibling node of the specified node. <code>textContent</code> Sets or returns the text content of the node and its descendants. <code>appendChild(node)</code> Adds a new child node to the end of the list of children of a specified parent node. <code>removeChild(node)</code> Removes a child node from the DOM and returns the removed node. <code>replaceChild(newNode, oldNode)</code> Replaces a child node in the DOM and returns the replaced node. <code>cloneNode(deep)</code> Returns a duplicate of the node, including all its attributes and children. <code>hasChildNodes()</code> Returns a Boolean indicating whether the node has any child nodes. <code>isEqualNode(node)</code> Returns a Boolean indicating whether two nodes are equal. <code>isSameNode(node)</code> Returns a Boolean indicating whether two nodes are the same node. <code>normalize()</code> Merges adjacent text nodes and removes empty text nodes in the subtree of the specified node. <p>These properties and methods are fundamental for navigating and manipulating the structure and content of the DOM using the <code>Node</code> interface.</p> <p>To know more --&gt; Node Interface @ mdn web docs_</p>"},{"location":"04_DOM/#3-the-element-class","title":"3. The Element Class","text":"<p>The <code>Element</code> class represents an element in the DOM hierarchy, inheriting from the <code>Node</code> interface.</p> <p>In the context of the DOM (Document Object Model), an element refers to an individual HTML element within an HTML document. HTML elements are the building blocks of web pages and include tags such as <code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;img&gt;</code>, and so on.</p>"},{"location":"04_DOM/#some-element-properties-and-methods","title":"Some Element Properties and Methods","text":"Property/Method Description <code>attributes</code> Returns a NamedNodeMap of the attributes of the element. <code>classList</code> Returns a DOMTokenList containing the list of class attributes. <code>id</code> Sets or returns the ID of the element. <code>className</code> Sets or returns the class name(s) of the element. <code>tagName</code> Returns the tag name of the element in uppercase. <code>innerHTML</code> Gets or sets the HTML content (including child elements and text) of the element. <code>outerHTML</code> Gets or sets the HTML content (including the element itself) of the element. <code>textContent</code> Gets or sets the text content of the element and its descendants. <code>setAttribute(name, value)</code> Sets the value of an attribute on the specified element. <code>getAttribute(name)</code> Returns the value of the attribute with the specified name on the element. <code>removeAttribute(name)</code> Removes the specified attribute from the element. <code>hasAttribute(name)</code> Returns a Boolean indicating whether the element has the specified attribute or not. <code>appendChild(node)</code> Adds a new child node to the end of the list of children of a specified parent node. <code>removeChild(node)</code> Removes a child node from the DOM and returns the removed node. <code>querySelector(selector)</code> Returns the first element that matches a specified CSS selector within the element's subtree. <code>querySelectorAll(selector)</code> Returns a NodeList of all elements that match a specified CSS selector within the element's subtree. <code>addEventListener(event, callback)</code> Adds an event listener to the element. <code>removeEventListener(event, callback)</code> Removes an event listener from the element. <p>Read more: --&gt; Element Class @ mdn web docs</p>"},{"location":"04_DOM/#31-moving-to-relative-elements","title":"3.1 Moving to Relative Elements","text":"<p>We can navigate through the DOM tree from a given node  to relative elements such parent, childen and siblings using these properties and mathods:</p> Method/Property Description <code>nextElementSibling()</code> Returns the element immediately following the specified element in the DOM tree. <code>previousElementSibling()</code> Returns the element immediately preceding the specified element in the DOM tree. <code>parentElement()</code> Returns the parent element of the specified element in the DOM tree. <code>firstElementChild()</code> Returns the first child element of the specified element. <code>lastElementChild()</code> Returns the last child element of the specified element. <code>children</code> Returns a live HTMLCollection of child elements of the specified element. <code>childElementCount</code> Returns the number of child elements of the specified element."},{"location":"04_DOM/#32-direct-access-to-elements","title":"3.2 Direct Access to Elements","text":"<p>We can access in a more direct way to element nodes of the DOM with this methods:</p>"},{"location":"04_DOM/#methods-for-direct-access-to-elements","title":"Methods for Direct Access to Elements","text":"<ul> <li><code>getElementById(id)</code>: Retrieves an element by its ID attribute.</li> <li><code>getElementsByClassName(className)</code>: Retrieves a collection of elements that have a specified class name.</li> <li><code>getElementsByTagName(tagName)</code>: Retrieves a collection of elements with the specified tag name.</li> <li><code>querySelector(selector)</code>: Returns the first element that matches a specified CSS selector.</li> <li><code>querySelectorAll(selector)</code>: Returns a NodeList containing all elements that match a specified CSS selector.</li> </ul>"},{"location":"04_DOM/#example-in-javascript","title":"Example in JavaScript","text":"<pre><code>// Example of direct access and manipulation\nconst paragraph1 = document.getElementById('paragraph1');\nparagraph1.style.fontWeight = 'bold';\n\nconst elementsByClass = document.getElementsByClassName('myClass');\nfor (let element of elementsByClass) {\n    element.classList.add('highlight');\n}\n\nconst elementsByTagName = document.getElementsByTagName('p');\nfor (let element of elementsByTagName) {\n    element.style.color = 'blue';\n}\n\nconst elementByQuery = document.querySelector('#parent &gt; p:nth-child(2)');\nelementByQuery.textContent = 'Modified second paragraph';\n\nconst elementsByQueryAll = document.querySelectorAll('.myClass');\nelementsByQueryAll.forEach(element =&gt; {\n    element.style.border = '1px solid red';\n});\n</code></pre>"},{"location":"04_DOM/#33-accessing-the-attributes-of-an-element","title":"3.3 Accessing the attributes of an Element","text":"<p>DOM allows direct access to all attributes of an element. The <code>attributes</code> property provides access to the attributes of an element node.</p> <p>DOM provides several methods that facilitate direct access to modifying, inserting, and deleting attributes of an element:</p> <ul> <li><code>getAttribute(attributeName)</code>: This method is equivalent to <code>attributes.getNamedItem(attributeName)</code>.</li> <li><code>setAttribute(attributeName, attributeValue)</code>: This method is equivalent to <code>attributes.getNamedItem(attributeName).value = attributeValue</code>.</li> <li><code>removeAttribute(attributeName)</code>: This method is equivalent to <code>attributes.removeNamedItem(attributeName)</code>.</li> </ul> <p>We can also access and modify the value of an attribute directly using dot notation followed by the attribute name:</p> <pre><code>const value = element.value;\nelement.value = \"new value\";\nelement.checked = true;\n</code></pre>"},{"location":"04_DOM/#34-the-style-attribute-of-an-element","title":"3.4 The Style Attribute of an Element","text":"<p>We can directly modify the CSS properties of an element by accessing its <code>style</code> attribute: <pre><code>element.style.color = \"blue\";\nelement.style.fontFamily = \"Arial\";\nelement.style.display = \"block\";\n</code></pre></p>"},{"location":"04_DOM/#35-the-classlist-attribute","title":"3.5 The Classlist Attribute","text":"<p>The <code>classList</code> attribute of an Element node allows us to manage the list of classes to which the HTML element belongs. While the attribute itself is read-only, it provides several methods for querying and modifying the classes:</p> <ul> <li><code>add( String [, String] )</code>: Adds the specified classes. If these classes already exist in the element's class attribute, they are ignored.</li> <li> <p><code>remove( String [, String] )</code>: Removes the specified classes. Removing a class that does not exist does not throw an error.</p> <pre><code>// Select an element with id \"myElement\"\nconst element = document.getElementById(\"myElement\");\n\n// Add a class\nelement.classList.add(\"active\");\n\n// Remove a class\nelement.classList.remove(\"inactive\");\n</code></pre> </li> <li> <p><code>item( Number )</code>: Returns the class value by index in the collection.</p> </li> <li><code>toggle( String [, force] )</code>: When only one argument is present:<ul> <li>Toggles the class value; for example, if the class exists, it removes it and returns <code>false</code>; if not, it adds it and returns <code>true</code>.</li> <li>When the second argument is present:<ul> <li>If the second argument evaluates to <code>true</code>, adds the specified class.</li> <li>If the second argument evaluates to <code>false</code>, removes the specified class. <pre><code>// Select an element with class \"toggleElement\"\nconst element = document.querySelector(\".toggleElement\");\n\n// Toggle a class\nelement.classList.toggle(\"hidden\");\n\n// Toggle with force parameter (true/false)\nelement.classList.toggle(\"visible\", true);  // Adds \"visible\" class\nelement.classList.toggle(\"visible\", false); // Removes \"visible\" class\n</code></pre></li> </ul> </li> </ul> </li> <li> <p><code>contains( String )</code>: Checks if the specified class exists in the element's class attribute.</p> <pre><code>// Select an element with id \"myElement\"\nconst element = document.getElementById(\"myElement\");\n\n// Check if a class exists\nif (element.classList.contains(\"active\")) {\n  console.log(\"Element is active\");\n} else {\n  console.log(\"Element is not active\");\n}\n</code></pre> </li> <li> <p><code>replace( oldClass, newClass )</code>: Replaces an existing class with a new one.</p> <pre><code>// Select an element with id \"myElement\"\nconst element = document.getElementById(\"myElement\");\n\n// Check if a class exists\nif (element.classList.contains(\"active\")) {\n  console.log(\"Element is active\");\n} else {\n  console.log(\"Element is not active\");\n}\n</code></pre> </li> </ul>"},{"location":"04_DOM/#4-creating-new-content","title":"4. Creating New Content","text":"<p>When manipulating the Document Object Model (DOM) in JavaScript, there are various ways to create and add new content to a webpage. Initially, we may resort to a simpler method by directly modifying the <code>innerHTML</code> property of an element.</p> <p>Example: <pre><code>// Select an element by its ID\nconst container = document.getElementById('container');\n\n// Modify the innerHTML to add new content\ncontainer.innerHTML = '&lt;h2&gt;New Content&lt;/h2&gt;&lt;p&gt;This is dynamically added content.&lt;/p&gt;';\n// append a new paragraph\ncontainer.innerHTML += '&lt;p&gt;Adding new paragraph.&lt;/p&gt;';\n</code></pre></p> <p>While <code>innerHTML</code> provides a straightforward approach, more sophisticated methods offer greater control and performance benefits. These methods involve creating and manipulating DOM nodes directly:</p>"},{"location":"04_DOM/#41-methods-to-create-new-nodes","title":"4.1 Methods to Create New Nodes","text":"<p>In JavaScript, you can create various types of nodes using the following methods:</p> <ul> <li><code>createElement(tagName)</code>: Creates a new element node with the specified tag name.</li> <li><code>createTextNode(text)</code>: Creates a text node with the specified text content.</li> <li><code>createAttribute(name)</code>: Creates an attribute node with the given name.</li> <li><code>createCDATASection(text)</code>: Creates a CDATA section node with the specified text.</li> <li><code>createComment(text)</code>: Creates a comment node with the specified text.</li> <li><code>createDocumentFragment()</code>: Creates a document fragment node.</li> </ul>"},{"location":"04_DOM/#42-append-new-nodes-to-the-dom","title":"4.2 Append New Nodes to the DOM","text":"<p>Once you've created nodes, you can append them to the DOM (Document Object Model) using methods like:</p> <ul> <li><code>append()</code> method: accepts multiple parameters, each of which can be either a Node object or a DOMString (a plain text or HTML string). It appends each parameter as a child to the element.</li> <li><code>appendChild(node)</code>: This method accepts only a single parameter, which must be a Node object. It appends the specified child node as the last child of the element.</li> <li><code>insertBefore(newNode, referenceNode)</code>: Inserts a new node before a specified existing node in the DOM tree.</li> </ul> <p>Example:</p> <pre><code>// Create a new &lt;div&gt; element\nconst divElement = document.createElement('div');\ndivElement.textContent = 'Parent Element';\n\n// Append multiple child nodes using append()\ndivElement.append(\n  'Text Node',   // Appends a text node\n  document.createElement('span'),  // Appends an empty &lt;span&gt; element\n  '&lt;strong&gt;HTML&lt;/strong&gt;'  // Appends an HTML string as a text node\n);\n\n// Select the div with the .main class\nmainDiv = document.querySelector(\"div.main\");\n\n// Append the div element to the main div\nmainDiv.appendChild(divElement);\n</code></pre> <p>These methods allow you to dynamically create and add elements, text, attributes, comments, and more to your web page using JavaScript.</p>"},{"location":"05_events_forms/","title":"UNIT5 - Event Management and Form Validation","text":""},{"location":"05_events_forms/#1-event-handling-models-in-javascript","title":"1. Event Handling Models in JavaScript","text":"<p>falta aqu\u00ed algo </p>"},{"location":"05_events_forms/#11-assign-an-event-handler","title":"1.1 Assign an Event Handler","text":"<p>In JavaScript, event handling allows you to respond to user actions or other events triggered in the browser. There are different models for handling events, each offering various ways to attach event listeners and manage event propagation.</p> <ol> <li> <p>Traditional Event Model (<code>onclick</code>, <code>onmouseover</code>, etc.)</p> <ul> <li>Description: This model involves directly assigning event handler attributes to HTML elements.</li> <li>Usage: Attach events inline within HTML tags or set them via JavaScript using element properties (<code>element.onclick = function() {...}</code>).</li> <li>Example: <pre><code>&lt;button onclick=\"alert('Button clicked!')\"&gt;Click me&lt;/button&gt;\n</code></pre></li> </ul> </li> <li> <p>DOM Level 2 Event Model (<code>addEventListener()</code> method)</p> <ul> <li>Description: Introduced in DOM Level 2, this model provides a more flexible approach to event handling.</li> <li>Usage: Attach events using <code>addEventListener(event, handler, useCapture)</code>, where <code>event</code> is the event type (e.g., <code>'click'</code>), <code>handler</code> is the function to execute, and <code>useCapture</code> (optional) specifies event flow.</li> <li>Example: <pre><code>const button = document.querySelector('button');\nbutton.addEventListener('click', function() {\n  alert('Button clicked using addEventListener!');\n});\n</code></pre></li> </ul> </li> <li> <p>Event Delegation</p> <ul> <li>Description: Rather than attaching event listeners to individual elements, this technique involves attaching a single event listener to a parent element.</li> <li>Usage: Utilize event bubbling by placing event listeners on parent elements and delegating handling based on the target element (<code>event.target</code>).</li> <li>Example: <pre><code>&lt;ul id=\"list\"&gt;\n  &lt;li&gt;Item 1&lt;/li&gt;\n  &lt;li&gt;Item 2&lt;/li&gt;\n  &lt;li&gt;Item 3&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;script&gt;\n  const list = document.getElementById('list');\n  list.addEventListener('click', function(event) {\n    if (event.target.tagName === 'LI') {\n      console.log('Clicked on:', event.target.textContent);\n    }\n  });\n&lt;/script&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"05_events_forms/#2-types-of-events-in-javascript","title":"2. Types of Events in JavaScript","text":"<p>JavaScript provides a wide variety of events that can be used to interact with web pages. These events can be classified into different categories based on their nature and the elements they are associated with.</p>"},{"location":"05_events_forms/#categories-of-events","title":"Categories of Events","text":"<ol> <li>Mouse Events</li> <li>Keyboard Events</li> <li>Form Events</li> <li>Document Events</li> <li>Clipboard Events</li> <li>Drag and Drop Events</li> <li>Touch Events</li> </ol>"},{"location":"05_events_forms/#21-mouse-events","title":"2.1 Mouse Events","text":"<p>Mouse events are triggered by user actions with a mouse.</p> <ul> <li>click: Fired when the user clicks on an element.</li> <li>dblclick: Fired when the user double-clicks on an element.</li> <li>mousedown: Fired when the user presses a mouse button over an element.</li> <li>mouseup: Fired when the user releases a mouse button over an element.</li> <li>mousemove: Fired when the user moves the mouse pointer over an element.</li> <li>mouseover: Fired when the user moves the mouse pointer onto an element.</li> <li>mouseout: Fired when the user moves the mouse pointer out of an element.</li> </ul>"},{"location":"05_events_forms/#22-keyboard-events","title":"2.2 Keyboard Events Hands-On Exercise: Keyboard Event Handling","text":"<p>Keyboard events are triggered by user actions with the keyboard.</p> <ul> <li>keydown: Fired when the user presses a key.</li> <li>keyup: Fired when the user releases a key.</li> <li>keypress: Fired when the user presses a key (deprecated, use <code>keydown</code> instead).</li> </ul> <p>When a key is pressed and held down, it begins to \"autorepeat\": <code>keydown</code> fires repeatedly, and when the key is finally released, a single keyup event is triggered. Therefore, it's normal to have many <code>keydown</code> events and just one <code>keyup</code> event.</p> <p>Create a simple HTML page with JavaScript that allows the user to control a character using the arrow keys.</p> <ol> <li>HTML Structure: Create an HTML file (`index.html`) with a `div` element to represent the character.</li> <li>CSS Styling: Style the character (`#character`) to make it visible and positioned on the screen.</li> <li>JavaScript Functionality: Implement JavaScript code to handle `keydown` events for arrow keys and move the character accordingly.</li> <li>Event Handling: Attach an event listener to the `document` object to capture arrow key presses and update the character's position.</li> </ol> <p>Objective: Move the character smoothly on the screen using arrow keys.</p> <p>Instructions:</p> <ul> <li>Open `index.html` in a web browser.</li> <li>Use the arrow keys (`up`, `down`, `left`, `right`) to control the character's movement.</li> <li>Observe how the character updates its position in response to each arrow key press.</li> </ul> <p>Explanation: This exercise demonstrates the basics of handling keyboard events in JavaScript to create interactive web applications.</p> <p>Example HTML for the exercise:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Simple Keyboard Event Exercise&lt;/title&gt;\n  &lt;style&gt;\n    body {\n      font-family: Arial, sans-serif;\n      text-align: center;\n    }\n    #character {\n      position: relative;\n      width: 50px;\n      height: 50px;\n      background-color: blue;\n      margin-top: 20px;\n      transition: 0.2s ease-out;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h2&gt;Move the Character with Arrow Keys&lt;/h2&gt;\n  &lt;div id=\"character\"&gt;&lt;/div&gt;\n\n  &lt;script&gt;\n    // JavaScript code will go here\n    const character = document.getElementById('character');\n    let posX = 0;\n    let posY = 0;\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"05_events_forms/#23-form-events","title":"2.3 Form Events","text":"<p>Form events are related to form elements.</p> <ul> <li>submit: Fired when a form is submitted.</li> <li>reset: Fired when a form is reset.</li> <li>change: Fired when the value of an element changes (for <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, <code>&lt;select&gt;</code>).</li> <li>focus: Fired when an element gains focus.</li> <li>blur: Fired when an element loses focus.</li> <li>input: Fired when the user inputs text into an element.</li> </ul>"},{"location":"05_events_forms/#24-document-events","title":"2.4 Document Events","text":"<p>Document events are triggered by actions that affect the entire document.</p> <ul> <li>DOMContentLoaded: Fired when the initial HTML document has been completely loaded and parsed. <pre><code>document.addEventListener('DOMContentLoaded', (event) =&gt; {\n            console.log('DOM is fully loaded and parsed');\n});\n</code></pre></li> <li>DOMSubtreeModified: Triggered when nodes are added or removed from the subtree of an element or document.</li> <li>DOMNodeInserted: Occurs when a new child node is added to a parent node.</li> <li>DOMNodeRemoved: Occurs when a node with a parent node is removed.</li> </ul>"},{"location":"05_events_forms/#25-window-events","title":"2.5 Window Events","text":"<ul> <li>load: Fired when the whole page (window)and all dependent resources have finished loading. <pre><code>window.addEventListener('load', (event) =&gt; {\n            console.log('Page is fully loaded');\n        });\n</code></pre></li> </ul> <p>The <code>load</code> event of <code>window</code> and the <code>DOMContentLoaded</code> event of <code>document</code>can be used for similar purposes, acting as a \"main method\" where we can ensure the code inside is executed once the page is loaded, with some nuances:</p> <ul> <li>DOMContentLoaded: Fires once the DOM tree is fully constructed.</li> <li>load: Fires once all the page's resources, including multimedia, are fully loaded. It's good practice to place the code we want to execute inside a handler function for one of these events. However, if the script is loaded at the end of the <code>body</code>, we can at least ensure that the entire DOM is loaded.</li> </ul> <ul> <li>unload: Fired when the whole page (window)or a child resource is being unloaded.</li> <li>resize: Fired when the document view (window) is resized.</li> <li>scroll: Fired when the document view (window) is scrolled.</li> </ul>"},{"location":"05_events_forms/#26-drag-and-drop-events","title":"2.6 Drag and Drop Events","text":"<p>Drag and drop events are used for dragging and dropping elements.</p> <ul> <li>drag: Fired when an element is being dragged.</li> <li>dragstart: Fired when the user starts dragging an element.</li> <li>dragend: Fired when the user finishes dragging an element.</li> <li>dragenter: Fired when a dragged element enters a valid drop target.</li> <li>dragover: Fired when an element is being dragged over a valid drop target.</li> <li>dragleave: Fired when a dragged element leaves a valid drop target.</li> <li>drop: Fired when a dragged element is dropped on a valid drop target.</li> </ul>"},{"location":"05_events_forms/#3-html-forms","title":"3. HTML Forms","text":"<ul> <li>A web form is used to send, process, and retrieve data that is sent and received between a client and a web server.</li> <li>Each form element stores a data type or triggers one of its functionalities.</li> <li>Forms have a defined architecture, within the context of the HTML language.</li> </ul>"},{"location":"05_events_forms/#31-form-structure","title":"3.1 Form Structure","text":"<ul> <li>Forms are defined using tags.</li> <li>The main tag is <code>&lt;form&gt; &lt;/form&gt;</code>.</li> <li>To be functional, the <code>&lt;form&gt;</code> tag needs to initialize two attributes:</li> <li><code>action</code> \u2013 Contains the URL where the form data is redirected.</li> <li><code>method</code> \u2013 Indicates the method by which the form sends data. It can be POST or GET.</li> </ul>"},{"location":"05_events_forms/#32-form-tags","title":"3.2 Form Tags","text":""},{"location":"05_events_forms/#1-input","title":"1. <code>&lt;input&gt;</code>","text":"<p>The <code>&lt;input&gt;</code> tag is a fundamental HTML element used within forms to collect user input. It is versatile and supports various types (<code>type</code> attribute), each tailored for specific data entry needs. Common input types include text fields, checkboxes, radio buttons, file upload controls, and more. The <code>&lt;input&gt;</code> tag does not have a closing tag and is self-contained with attributes that control its appearance, behavior, and interaction with the user.</p>"},{"location":"05_events_forms/#attributes-for-input","title":"Attributes for Input:","text":"<p>type: Specifies the type of element being defined. This attribute determines the additional parameters. Possible values for the <code>type</code> attribute include:</p> <ul> <li><code>text</code>: Text input field.</li> <li><code>password</code>: Password input field, where characters are obscured (usually shown as asterisks).</li> <li><code>checkbox</code>: Checkbox for multiple-choice selection.</li> <li><code>radio</code>: Radio button for exclusive selection among two or more options.</li> <li><code>submit</code>: Button to submit the form.</li> <li><code>reset</code>: Button to reset or clear form fields.</li> <li><code>button</code>: Generic button within the form.</li> <li><code>file</code>: Button to browse and select files.</li> <li><code>hidden</code>: Hidden field not visible to the user in the form.</li> <li><code>image</code>: Image button within the form.</li> </ul>"},{"location":"05_events_forms/#more-html5-input-types","title":"More HTML5 input types:","text":"<ul> <li><code>email</code>: Forces the user to enter a valid email address.</li> <li><code>search</code>: Styled for search boxes, providing appropriate visual cues.</li> <li><code>tel</code>: Allows input of a telephone number (on mobile devices, triggers a numeric keypad, but does not restrict input to numbers only).</li> <li><code>url</code>: Enforces input restrictions to ensure the text conforms to URL format.</li> <li><code>number</code>: Allows input of floating-point numbers only. Range restrictions can be applied.</li> <li><code>range</code>: Creates a graphical slider for selecting a numeric range.</li> <li><code>date/time inputs</code> (Note: not universally supported across all browsers):<ul> <li><code>datetime-local</code></li> <li><code>month</code></li> <li><code>week</code></li> <li><code>time</code></li> </ul> </li> <li><code>color</code>: Provides a color selector control.</li> </ul> <p>Check --&gt; https://developer.mozilla.org/en-US/docs/Learn/Forms/HTML5_input_types</p>"},{"location":"05_events_forms/#more-attributes-for-input","title":"More Attributes for Input:","text":"<ul> <li>name: Specifies the name used to pass the variable's value to the server.</li> <li>value: Indicates the initial value of the input in the form. It can be set initially and accessed to read or validate it. The data type depends on the input type.</li> <li>size: Specifies the size of the element in pixels. For text and password fields, it refers to the number of characters.</li> <li>maxlength: Specifies the maximum number of characters that can be entered in a text or password field.</li> <li>checked: Exclusive to checkbox and radio button elements. Indicates which option is selected.</li> <li>disabled: Disables the element, preventing its value from being submitted to the server.</li> <li>readonly: Makes the element's content uneditable.</li> <li>src: Specifies the path to an image used as a button within the form.</li> <li>alt: Provides alternative text for the image.</li> <li>placeholder: Text that appears as a hint in the input field before the user focuses on it.</li> <li>autofocus: Specifies that the element should automatically have focus when the page loads.</li> </ul> <p>Check --&gt; https://developer.mozilla.org/en-US/docs/Learn/Forms/Basic_native_form_controls</p>"},{"location":"05_events_forms/#2-label-associates-a-label-with-an-input-select-textarea-or-button-element-providing-user-guidance-use-for-attribute-to-match-related-controls-id","title":"2. <code>&lt;label&gt;</code>: Associates a label with an <code>&lt;input&gt;</code>, <code>&lt;select&gt;</code>, <code>&lt;textarea&gt;</code>, or <code>&lt;button&gt;</code> element, providing user guidance. Use <code>for</code> attribute to match related control's <code>id</code>.","text":""},{"location":"05_events_forms/#3-select-creates-a-drop-down-list-for-selecting-options-uses-nested-option-tags-to-define-choices","title":"3. <code>&lt;select&gt;</code>: Creates a drop-down list for selecting options. Uses nested <code>&lt;option&gt;</code> tags to define choices.","text":""},{"location":"05_events_forms/#4-textarea-allows-multi-line-text-input-useful-for-longer-responses-like-comments-or-messages","title":"4. <code>&lt;textarea&gt;</code>: Allows multi-line text input. Useful for longer responses like comments or messages.","text":""},{"location":"05_events_forms/#5-button-creates-a-clickable-button-within-a-form-type-attribute-submit-reset-or-button-defines-behavior","title":"5. <code>&lt;button&gt;</code>: Creates a clickable button within a form. <code>type</code> attribute (<code>submit</code>, <code>reset</code>, or <code>button</code>) defines behavior.","text":""},{"location":"05_events_forms/#6-fieldset-and-legend-groups-related-form-controls-input-select-etc-together-legend-provides-a-title-for-the-group","title":"6. <code>&lt;fieldset&gt;</code> and <code>&lt;legend&gt;</code>: Groups related form controls (<code>&lt;input&gt;</code>, <code>&lt;select&gt;</code>, etc.) together. <code>&lt;legend&gt;</code> provides a title for the group.","text":""},{"location":"05_events_forms/#33-styling-forms","title":"3.3 Styling Forms","text":"<p>We can manually style forms using CSS to make them look better. Here are some key aspects to consider:</p> <ul> <li>Changing the style of buttons (different browsers display them differently).</li> <li>Using the fonts and colors of our website.</li> <li>Properly distributing form elements on the screen.</li> <li>Using CSS to distinguish erroneous fields during validation, e.g., by turning the border red or showing hidden error messages.</li> </ul> <p>To add or remove CSS classes using JavaScript, we can use <code>element.classList.add(\"class\")</code>.</p> <p>We can also use libraries like Bootstrap where form elements are already defined.</p>"},{"location":"05_events_forms/#1-manual-styling-with-css","title":"1. Manual Styling with CSS","text":""},{"location":"05_events_forms/#button-style","title":"Button Style","text":"<p>We can change the style of buttons to ensure they look consistent across browsers:</p> <pre><code>button {\n    background-color: #4CAF50; /* Green */\n    border: none;\n    color: white;\n    padding: 15px 32px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    margin: 4px 2px;\n    cursor: pointer;\n    border-radius: 4px;\n}\n\nbutton:hover {\n    background-color: #45a049;\n}\n</code></pre>"},{"location":"05_events_forms/#using-site-fonts-and-colors","title":"Using Site Fonts and Colors","text":"<p>We can use specific fonts and colors from our website:</p> <pre><code>body {\n    font-family: 'Arial', sans-serif;\n    background-color: #f2f2f2;\n    color: #333;\n}\n\ninput, select, textarea {\n    font-family: inherit;\n    font-size: 16px;\n    padding: 10px;\n    margin: 10px 0;\n    box-sizing: border-box;\n}\n\nlabel {\n    font-weight: bold;\n}\n</code></pre>"},{"location":"05_events_forms/#distributing-form-elements-on-the-screen","title":"Distributing Form Elements on the Screen","text":"<p>We can use a container to center the form and distribute its elements:</p> <pre><code>.form-container {\n    max-width: 500px;\n    margin: auto;\n    background: white;\n    padding: 20px;\n    border-radius: 5px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n</code></pre> <p>To organize forms and apply styles effectively, it is a good idea to group elements using <code>fieldset</code> or <code>div</code> with a class that helps in styling. For example, using a class like <code>form-group</code> can help you apply consistent styles to grouped elements.</p> <pre><code>&lt;div class=\"form-group\"&gt;\n    &lt;label for=\"name\"&gt;Name:&lt;/label&gt;\n    &lt;input type=\"text\" name=\"name\" id=\"name\" autofocus&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>.form-group {\n  margin-bottom: 1em;\n}\n\n.form-group label {\n    display: block;\n    margin-bottom: 5px;\n}\n\n.form-group&gt;input,\n.form-group&gt;textarea,\n.form-group&gt;select {\n  display: block;\n  width: 100%;\n  padding: 10px;\n  border-radius: 4px;\n  border: 1px solid #ccc;\n  font-family: inherit;\n  font-size: 16px;\n  box-sizing: border-box;\n}\n\n.form-group&gt;input[type=\"checkbox\"] {\n  display: inline-block;\n  width: auto;\n}\n</code></pre>"},{"location":"05_events_forms/#2-erroneous-fields","title":"2. Erroneous Fields","text":"<p>We can highlight erroneous fields and display error messages:</p> <pre><code>input.error, select.error, textarea.error {\n    border-color: red;\n}\n\n.error-message {\n    color: red;\n    font-size: 12px;\n    display: none;\n}\n\n.error-message.active {\n    display: block;\n}\n</code></pre> <p>We can use JavaScript to add or remove CSS classes:</p> <pre><code>document.getElementById('myInput').classList.add('error');\ndocument.getElementById('myErrorMessage').classList.add('active');\n</code></pre>"},{"location":"05_events_forms/#3-using-libraries-like-bootstrap","title":"3. Using Libraries like Bootstrap","text":"<p>Bootstrap provides predefined classes for forms:</p> <pre><code>&lt;form&gt;\n  &lt;div class=\"mb-3\"&gt;\n    &lt;label for=\"exampleInputEmail1\" class=\"form-label\"&gt;Email address&lt;/label&gt;\n    &lt;input type=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\"&gt;\n    &lt;div id=\"emailHelp\" class=\"form-text\"&gt;We'll never share your email with anyone else.&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"mb-3\"&gt;\n    &lt;label for=\"exampleInputPassword1\" class=\"form-label\"&gt;Password&lt;/label&gt;\n    &lt;input type=\"password\" class=\"form-control\" id=\"exampleInputPassword1\"&gt;\n  &lt;/div&gt;\n  &lt;div class=\"mb-3 form-check\"&gt;\n    &lt;input type=\"checkbox\" class=\"form-check-input\" id=\"exampleCheck1\"&gt;\n    &lt;label class=\"form-check-label\" for=\"exampleCheck1\"&gt;Check me out&lt;/label&gt;\n  &lt;/div&gt;\n  &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>Check more information about Bootstrap Forms</p>"},{"location":"05_events_forms/#4-form-validation","title":"4. Form Validation","text":"<p>Form validation is crucial in ensuring that user inputs are correct and complete before submission. This can be achieved through various methods, including client-side validation with HTML5 attributes, JavaScript validation, and server-side validation.</p> IMPORTANT <p>Client-side validation improves the usability of a website but does not eliminate the need for server-side validation.</p>"},{"location":"05_events_forms/#41-vanilla-javascript-validation","title":"4.1 Vanilla JavaScript Validation","text":"<p>Validation can be done in many ways, but it\u2019s advisable to do it in an organized manner using functions that we can reuse later. We propose this solution:</p>"},{"location":"05_events_forms/#form-to-validate","title":"Form to validate","text":"<pre><code>&lt;form id=\"contactForm\" class=\"needs-validation\"&gt;\n    &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\"&gt;\n        &lt;div class=\"error-message\"&gt;Name is required and must be at least 2 characters long.&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"email\"&gt;Email&lt;/label&gt;\n        &lt;input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\"&gt;\n        &lt;div class=\"error-message\"&gt;Please provide a valid email address.&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"password\"&gt;Password&lt;/label&gt;\n        &lt;input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\"&gt;\n        &lt;div class=\"error-message\"&gt;Password is required and must be at least 6 characters long.&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"05_events_forms/#main-validation-function","title":"Main  Validation Function","text":"<p>It's recommended that all the code be inside the window's load or DOMContentLoaded event. This ensures that the entire document is loaded before we start executing the code.</p> <pre><code>// Is a good practice that all the code is inside 'DOMContentLoaded' or 'load'\ndocument.addEventListener('DOMContentLoaded', function () {\n  // Capture all elements \n  const form = document.getElementById('contactForm');\n  const name = document.getElementById('name');\n  const email = document.getElementById('email');\n  const password = document.getElementById('password');\n\n  // Create the event handler to the form 'submit'\n  form.addEventListener('submit', function (event) {\n    event.preventDefault(); // Prevents the form from submitting automatically\n    event.stopPropagation(); // Prevents the event from bubbling up to parent elements\n\n    // Calling the main validation function \n    if (validateForm()) {\n      console.log(\"All fields are ok, we can proceed\");\n      form.submit();  // Forcing the submission\n    } else {\n      console.log(\"There is some not-valid field. The user should ckeck them.\")\n    }\n  });\n\n  // This function is in charge of validating all fields and \n  // return a boolean: true in case all fields are ok, false otherwise\n  function validateForm() {\n    // This flag is initialized as true. \n    // in case we find an error in a field this variable become false.\n    var isValid = true;\n\n    // Custom validation logic\n    // Example custom validation just checking the logic \n    if (name.value.trim().length &lt; 2) {\n      markFieldAsNotValid(name)\n      isValid = false;\n    } else {\n      markFieldAsValid(name)\n    }\n\n    // We can call custom field validation functions that validate certain fields\n    // also we can check different conditions and show different error messages\n    if (email.value === \"\") {\n      markFieldAsNotValid(email, \"Email is required\")\n      isValid = false;\n    } else if (!isValidEmail(email.value)) {\n      markFieldAsNotValid(email, \"Please provide a valid email address.\")\n      isValid = false;\n    } else {\n      markFieldAsValid(email)\n    }\n\n    if (!isValidPassword(password.value)) {\n      markFieldAsNotValid(password);\n      isValid = false;\n    } else {\n      markFieldAsValid(password);\n    }\n\n    // after all field validations we return the isValid flag\n    return isValid;\n  }\n\n  // definition of field validation functions and other auxiliary functions\n  // ....\n\n}\n</code></pre>"},{"location":"05_events_forms/#custom-field-validation-functions","title":"Custom field validation functions","text":"<p>When the validation is more complex, we can define functions that validate certain fields. </p> <pre><code>  function isValidEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  function isValidPassword(passwd) {\n    return (passwd.length &gt;= 6)\n  }\n</code></pre>"},{"location":"05_events_forms/#auxiliary-functions-to-manage-error-messages","title":"Auxiliary functions to manage error messages","text":"<p>We can create functions that manage the error messages. In this case we have created one to show the error and othe one to hide the error message. They work on the element that we pass to the function. The code navigates to the parent to add or remove the <code>is-not-valid-field</code> class.</p> <pre><code>// This functions set a field as not-valid and adds the error-message\n  function markFieldAsNotValid(element, message) {\n    // If we have a custom message we show it. In other case we just show the error-message present in the HTML\n    if (message) {\n      element.parentNode.querySelector(\".error-message\").textContent = message;\n    }\n    // Adding the class that shows the error-message and adds the red border (css)\n    element.parentNode.classList.add(\"is-not-valid-field\");\n  }\n\n  // This function set a field as valid and hide the error field\n  function markFieldAsValid(element, message = \"Invalid field. You should check it.\") {\n    element.parentNode.classList.remove(\"is-not-valid-field\");\n  }\n</code></pre> <p>We need to remember the structure of a <code>form-group</code>element:</p> <pre><code>&lt;div class=\"form-group\"&gt;\n    &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n    &lt;input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\"&gt;\n    &lt;div class=\"error-message\"&gt;Name is required and must be at least 2 characters long.&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>We need some CSS code to make visible the error message and the red border when the <code>is-not-valid-field</code> class is pressent in the <code>form-group</code> element.</p> <pre><code>.form-group.is-not-valid-field input,\n.form-group.is-not-valid-field select,\n.form-group.is-not-valid-field textarea {\n  border-color: red;\n}\n\n.error-message {\n  color: red;\n  font-size: 12px;\n  display: none;\n}\n\n.is-not-valid-field .error-message {\n  display: block;\n}\n</code></pre>  Hands-On Exercise <p>Add three new fields to the existing form:</p> <ul> <li>A confirm password field that must match the original password field.</li> <li>A birthdate field. Ensure the user is at least 18 years old.</li> <li>A checkbox to accept the conditions. The form should not submit unless this checkbox is checked.</li> </ul> <p>Implement the validation logic for these fields using vanilla JavaScript. Ensure that appropriate error messages are displayed for invalid inputs.</p> <p>Research different frameworks and select one that you would use to build a Single Page Application (SPA). State the reasons that convinced you.</p>"},{"location":"05_events_forms/#42-native-validation-with-html5","title":"4.2 Native validation with HTML5","text":""},{"location":"05_events_forms/#43-validation-html5-with-bootstrap-5","title":"4.3 Validation HTML5 with Bootstrap 5","text":""},{"location":"05_events_forms/#44-hybrid-validation","title":"4.4 Hybrid Validation","text":""},{"location":"05_events_forms/#45-validation-using-js-libraries","title":"4.5 Validation using JS libraries","text":""},{"location":"05_events_forms/#5-regular-expressions-regex","title":"5. Regular Expressions (regex)","text":""},{"location":"06_AJAX/","title":"UNIT6 - AJAX","text":""},{"location":"06_AJAX/#1-introduction-to-ajax","title":"1. Introduction to AJAX","text":"<p>What is AJAX? </p> <p></p>"},{"location":"06_AJAX/#definition","title":"Definition","text":"<p>AJAX, which stands for Asynchronous JavaScript and XML, is a technique used to create dynamic and interactive web applications. It allows web pages to be updated asynchronously by exchanging small amounts of data with the server behind the scenes. This means that it is possible to update parts of a web page, without reloading the whole page.</p>"},{"location":"06_AJAX/#11-the-http-request","title":"1.1 The HTTP Request","text":"<p>An AJAX request is essentially an asynchronous HTTP request. </p> <p>HTTP is a protocol for fetching resources such as HTML documents. It is the foundation of any data exchange on the Web and it is a client-server protocol, which means requests are initiated by the recipient, usually the Web browser. A complete document is typically constructed from resources such as text content, layout instructions, images, videos, scripts, and more.</p> <p></p> <p>Source --&gt; mdn web docs_ </p> <p>Here are the basic components of an HTTP request:</p>"},{"location":"06_AJAX/#http-methods","title":"HTTP Methods:","text":"<ul> <li>GET: Requests data from the server. It should only retrieve data and not change any server state.</li> <li>POST: Submits data to be processed to a specified resource. It often causes a change in server state.</li> <li>PUT: Updates a current resource with new data.</li> <li>PATCH: Uptates part of a current resource with new data.</li> <li>DELETE: Removes a specified resource.</li> </ul>"},{"location":"06_AJAX/#request-url","title":"Request URL","text":"<p>The URL specifies the endpoint to which the request is being sent. It is the address of the resource.</p>"},{"location":"06_AJAX/#headers","title":"Headers","text":"<p>HTTP headers let the client and the server pass additional information with an HTTP request or response.</p>"},{"location":"06_AJAX/#body","title":"Body","text":"<p>The body of an HTTP request contains the data to be sent to the server (mostly used with POST and PUT requests). The most common format to send data is plain text formated in JSON. </p> <p>Example of GET and POST request:</p> <pre><code>  GET https://example.com/comments/1 HTTP/1.1\n\n  ###\n\n  GET https://example.com/topics/1 HTTP/1.1\n\n  ###\n\n  POST https://example.com/comments HTTP/1.1\n  content-type: application/json\n  {\n      \"name\": \"sample\",\n      \"time\": \"Wed, 21 Oct 2015 18:27:50 GMT\"\n  }\n</code></pre>"},{"location":"06_AJAX/#http-response-status-codes","title":"HTTP Response Status Codes","text":""},{"location":"06_AJAX/#12-understanding-asynchrony-in-javascript","title":"1.2 Understanding Asynchrony in JavaScript","text":"<p>Asynchrony is a fundamental concept in JavaScript that allows programs to handle multiple tasks at once without blocking the main thread. It is crucial for improving performance, especially in web applications, where operations such as network requests, file reading, or timers are common.</p> <p></p> <p>Why Asynchrony is Important</p> <ol> <li>Improved Performance: By handling tasks concurrently, the application remains responsive and can perform multiple operations efficiently.</li> <li>Better User Experience: Users don't have to wait for long-running tasks to complete before interacting with the application.</li> <li>Non-blocking Operations: Critical for network requests, file reading, and other I/O operations where waiting would otherwise halt the execution of subsequent code.</li> </ol>"},{"location":"06_AJAX/#common-asynchronous-patterns","title":"Common Asynchronous Patterns","text":"<ol> <li> <p>Callbacks: Functions passed as arguments to other functions to be executed later. Can lead to \"callback hell\" when dealing with multiple nested callbacks.</p> </li> <li> <p>Promises:</p> <ul> <li>Objects representing the eventual completion or failure of an asynchronous operation.</li> <li>Provide methods like then and catch for handling success and error cases.</li> </ul> </li> <li> <p>Async/Await</p> <ul> <li>Syntactic sugar built on top of Promises, providing a more readable and concise way to write asynchronous code.</li> <li>Requires the use of the async keyword to define a function that uses await for asynchronous operations.</li> </ul> </li> </ol>"},{"location":"06_AJAX/#13-methods-to-make-ajax-requests-in-js","title":"1.3 Methods to Make Ajax Requests in JS","text":""},{"location":"06_AJAX/#xmlhttprequest-object","title":"XMLHttpRequest Object","text":"<ul> <li>Description: A classic method for making HTTP requests. Initially developed in 2006, it is still in use today. It originally had compatibility issues with Internet Explorer, which used a different name for this object.</li> <li>Usage: While it's older and considered more cumbersome, <code>XMLHttpRequest</code> is still functional and supported across all browsers.</li> </ul>"},{"location":"06_AJAX/#fetch-api","title":"Fetch API","text":"<ul> <li>Description: A more modern, powerful, flexible, and easier-to-use method for making HTTP requests.</li> <li>Usage: The Fetch API is now the preferred way to make HTTP requests due to its simplicity and built-in promise-based architecture.</li> </ul>"},{"location":"06_AJAX/#other-methods","title":"Other Methods","text":"<ul> <li>Axios: A promise-based HTTP client for the browser and Node.js. It is popular for its ease of use and ability to handle requests and responses as JSON.</li> <li>jQuery: A fast, small, and feature-rich JavaScript library. jQuery provides a simple <code>$.ajax</code> method for making Ajax requests, which simplifies the process. The jQuery library and its <code>$.ajax()</code> method had their moment of glory by facilitating things during the times of <code>XMLHttpRequest</code> and the old Microsoft IE.</li> </ul>"},{"location":"06_AJAX/#2-rest-api","title":"2. REST API","text":"<p>A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. REST APIs allow different systems to communicate over HTTP using the standard methods we have seen in the previous point, making it easier to integrate and interact with web applications and services.</p>"},{"location":"06_AJAX/#key-components","title":"Key Components","text":"<ul> <li>Endpoint: A specific URL where the API can be accessed.</li> <li>Method: The type of request being made (e.g., GET, POST, PUT, DELETE, PATCH).</li> <li>Request: The data or action you want to send to the server. In the request are included the headers and the body if necessary. </li> <li>Response: The data sent back from the server after processing the request.</li> </ul>"},{"location":"06_AJAX/#21-backend-tools-to-construct-rest-api","title":"2.1 Backend Tools to construct REST API","text":"<p>We can construct a REST API: With any server-side language:</p> <ul> <li>PHP</li> <li>Java</li> <li>Rubi</li> <li>Python</li> <li>NODE.js </li> <li>ASP.NET</li> </ul> <p>For constructing an API, you'll often use a server-side framework. Some popular options are:</p> <ul> <li>Node.js with Express (JavaScript)</li> <li>Django (Python)</li> <li>FastAPI (Python)</li> <li>Ruby on Rails (Ruby)</li> <li>Spring Boot (Java)</li> </ul> <p></p> <p>But this is a Frontend subject, so we are going to use public REST API and toy REST API constructed with <code>json-server</code>.</p>"},{"location":"06_AJAX/#22-public-rest-api","title":"2.2 Public REST API","text":"<p>Public REST APIs provide developers with access to a variety of services, data, and functionalities from different providers. Here is a list of some commonly used public REST APIs:</p>"},{"location":"06_AJAX/#social-media-and-communication","title":"Social Media and Communication","text":"<ol> <li> <p>Twitter API</p> <ul> <li>Description: Allows developers to interact with Twitter data.</li> <li>Documentation: Twitter API Docs</li> </ul> </li> <li> <p>Facebook Graph API</p> <ul> <li>Description: Provides access to Facebook's social graph data.</li> <li>Documentation: Facebook Graph API Docs</li> </ul> </li> <li> <p>Slack API</p> <ul> <li>Description: Enables integration with Slack for messaging and collaboration.</li> <li>Documentation: Slack API Docs</li> </ul> </li> </ol>"},{"location":"06_AJAX/#maps-and-geolocation","title":"Maps and Geolocation","text":"<ol> <li> <p>Google Maps API</p> <ul> <li>Description: Offers a wide range of maps-related services, including geolocation, routing, and place information.</li> <li>Documentation: Google Maps API Docs</li> </ul> </li> <li> <p>OpenWeatherMap API</p> <ul> <li>Description: Provides weather data, forecasts, and historical information.</li> <li>Documentation: OpenWeatherMap API Docs</li> </ul> </li> <li> <p>Mapbox API</p> <ul> <li>Description: Offers customizable maps and geolocation services.</li> <li>Documentation: Mapbox API Docs</li> </ul> </li> </ol>"},{"location":"06_AJAX/#finance-and-cryptocurrency","title":"Finance and Cryptocurrency","text":"<ol> <li> <p>CoinGecko API</p> <ul> <li>Description: Provides data on cryptocurrencies, including prices, market capitalization, and trading volume.</li> <li>Documentation: CoinGecko API Docs</li> </ul> </li> <li> <p>Alpha Vantage API</p> <ul> <li>Description: Offers financial data, including stock prices, technical indicators, and forex data.</li> <li>Documentation: Alpha Vantage API Docs</li> </ul> </li> </ol>"},{"location":"06_AJAX/#entertainment","title":"Entertainment","text":"<ol> <li> <p>Spotify API</p> <ul> <li>Description: Allows access to Spotify's music catalog and user data.</li> <li>Documentation: Spotify API Docs</li> </ul> </li> <li> <p>The Movie Database (TMDb) API</p> <ul> <li>Description: Provides information about movies, TV shows, and actors.</li> <li>Documentation: TMDb API Docs</li> </ul> </li> <li> <p>YouTube Data API</p> <ul> <li>Description: Allows access to YouTube content and user data.</li> <li>Documentation: YouTube Data API Docs</li> </ul> </li> </ol>"},{"location":"06_AJAX/#utility-and-miscellaneous","title":"Utility and Miscellaneous","text":"<ol> <li> <p>GitHub API</p> <ul> <li>Description: Provides access to GitHub repositories, issues, and user data.</li> <li>Documentation: GitHub API Docs</li> </ul> </li> <li> <p>REST Countries API</p> <ul> <li>Description: Offers information about countries, including population, area, and capital cities.</li> <li>Documentation: REST Countries API Docs</li> </ul> </li> <li> <p>NASA API</p> <ul> <li>Description: Provides access to a wide range of NASA data, including images, videos, and planetary information.</li> <li>Documentation: NASA API Docs</li> </ul> </li> <li> <p>Random User API</p> <ul> <li>Description: Generates random user data, including names, addresses, and profile pictures.</li> <li>Documentation: Random User API Docs</li> </ul> </li> <li> <p>Open Library API</p> <ul> <li>Description: Provides access to book data from the Open Library project.</li> <li>Documentation: Open Library API Docs</li> </ul> </li> <li> <p>PokeAPI</p> <ul> <li>Description: Offers data from the Pok\u00e9mon universe, including Pok\u00e9mon, abilities, and moves.</li> <li>Documentation: PokeAPI Docs</li> </ul> </li> </ol>  Hands-On Exercise 1: Creating a .rest File for a public REST API <p>In this exercise, you will create a `.rest` file using the REST Client extension for Visual Studio Code. You will explore a free public REST API for Pok\u00e9mon data. The file should contain at least 5 different endpoints.</p> <p>Follow these steps:</p> <ol> <li>Install the REST Client extension for Visual Studio Code if you haven't already.</li> <li>Choose a free access REST API.</li> <li>Create a new file named `your-chosen-api.rest` in your project directory.</li> <li>Add five different endpoints to your `your-chosen-api.rest` file:</li> <li>Test the endpoints.</li> </ol>"},{"location":"06_AJAX/#check-this","title":"Check this!!","text":"<p>Much more public REST API</p>"},{"location":"06_AJAX/#23-json-server","title":"2.3 JSON server","text":"<p>JSON Server is a powerful tool that allows developers to create a full fake REST API with minimal effort. It's especially useful for frontend developers who need a quick and easy way to simulate a backend server without setting up a full server environment. With JSON Server, you can quickly create a mock API, test your frontend code, and prototype applications without needing a real backend.</p>"},{"location":"06_AJAX/#key-features","title":"Key FeaturesSteps to Create a Fake API","text":"<ul> <li>Zero Coding Required: Create a full API from a simple JSON file.</li> <li>Extremely Fast Setup: Get a mock API running in minutes.</li> <li>RESTful Routes: Automatically generates RESTful routes based on your data.</li> <li>CRUD Operations: Supports Create, Read, Update, and Delete operations.</li> <li>Custom Routes: Allows you to define custom routes and add middleware for more complex setups.</li> <li>Static File Serving: Can serve static files alongside the API, useful for serving your frontend application.</li> </ul>  Hands-On Exercise: Creating a Fake API with JSON Server <p>In this exercise, you will create a fake REST API using JSON Server. This will help you understand how to mock a backend for your frontend development. Follow the steps below to set up and run your fake API:</p> <ol> <li> Install JSON Server: <p>First, ensure you have Node.js installed. Then, install JSON Server globally using npm.</p> <pre><code>npm install -g json-server</code></pre> </li> <li> Create a <code>db.json</code> File: <p>In your project directory, create a file named <code>db.json</code>. This file will contain your fake data. Below is an example structure for a simple API:</p> <pre><code>{\n  \"posts\": [\n    { \"id\": 1, \"title\": \"Hello World\", \"author\": \"John Doe\" },\n    { \"id\": 2, \"title\": \"Learning JSON Server\", \"author\": \"Jane Doe\" }\n  ],\n  \"comments\": [\n    { \"id\": 1, \"postId\": 1, \"body\": \"Great post!\" },\n    { \"id\": 2, \"postId\": 2, \"body\": \"Very informative.\" }\n  ],\n  \"profile\": { \"name\": \"John Doe\" }\n}</code></pre> </li> <li> Start JSON Server: <p>Run the JSON Server with the <code>db.json</code> file you created.</p> <pre><code>npx json-server db.json</code></pre> </li> <li> Access Your Fake API: <p>Once JSON Server is running, you can access your fake API at <code>http://localhost:3000</code>. Here are some example endpoints based on the <code>db.json</code> file:</p> <ul> <li><code>GET /posts</code> - List all posts</li> <li><code>GET /posts/1</code> - Get a specific post by ID</li> <li><code>POST /posts</code> - Create a new post</li> <li><code>PUT /posts/1</code> - Update a post by ID</li> <li><code>DELETE /posts/1</code> - Delete a post by ID</li> <li><code>GET /comments</code> - List all comments</li> <li><code>GET /profile</code> - Get the profile</li> </ul> </li> <li> Make Requests to Your Fake API: <p>Use tools like Postman, cURL, or the REST Client extension in Visual Studio Code to make requests to your fake API endpoints and observe the responses.</p> </li> </ol> <p>Experiment with different data structures and endpoints to get a feel for how JSON Server works. This is a powerful tool for quickly setting up a mock backend to aid in frontend development.</p>"},{"location":"06_AJAX/#3-different-solutions-to-check-your-rest-api","title":"3. Different Solutions to Check Your REST API","text":"<p>When developing and testing REST APIs, it's essential to have tools that can help you make requests to your endpoints and inspect the responses. </p> <p>We can just paste the endpoint URL in the address bar of the browser when we have a simple GET request.</p> <p>Try pasting this in your browser:</p> <pre><code>https://pokeapi.co/api/v2/pokemon/ditto\n</code></pre> <p>We can improve the JSON response shown in the browser with some plugin for Chrome as JSON Viewer</p> <p>Also we can use the command curl to test and endpoint in the command line. </p> <p>But when we have more complicated request, also POST with more complex payloads and headers, we will prefer to use a more </p> <p>Here are three popular solutions:</p>"},{"location":"06_AJAX/#31-postman","title":"3.1 Postman","text":""},{"location":"06_AJAX/#overview","title":"Overview","text":"<p>Postman is a comprehensive API development environment that allows you to create, share, test, and document APIs. It has a user-friendly interface and offers a wide range of features.</p>"},{"location":"06_AJAX/#key-features_1","title":"Key Features","text":"<ul> <li>Collections: Organize your API requests into collections for better management and collaboration.</li> <li>Environment Variables: Easily switch between different environments (e.g., development, staging, production) using variables.</li> <li>Automated Testing: Create test scripts using JavaScript to automate API testing.</li> <li>Mock Servers: Simulate API endpoints for testing purposes without needing the actual server.</li> <li>Collaboration: Share collections and workspaces with team members for better collaboration.</li> </ul>"},{"location":"06_AJAX/#example-usage","title":"Example Usage","text":"<ol> <li>Create a new request.</li> <li>Set the HTTP method (GET, POST, PUT, DELETE, etc.).</li> <li>Enter the API endpoint URL.</li> <li>Add headers, query parameters, and request body if needed.</li> <li>Click the \"Send\" button to make the request and inspect the response.</li> </ol>"},{"location":"06_AJAX/#download","title":"Download","text":"<p>Download Postman</p>"},{"location":"06_AJAX/#32-thunder-client","title":"3.2 Thunder Client","text":""},{"location":"06_AJAX/#overview_1","title":"Overview","text":"<p>Thunder Client is a lightweight REST API client extension for Visual Studio Code (VSCode). It's designed to be simple and easy to use within the VSCode environment.</p>"},{"location":"06_AJAX/#key-features_2","title":"Key Features","text":"<ul> <li>Integrated with VSCode: No need to switch between applications; use it directly within your code editor.</li> <li>Environment Variables: Manage environment variables to switch between different setups easily.</li> <li>Collections: Organize your requests into collections for better structure.</li> <li>Quick Tests: Basic testing capabilities to validate your API responses.</li> <li>Lightweight: Minimalist design with essential features for quick and efficient API testing.</li> </ul>"},{"location":"06_AJAX/#example-usage_1","title":"Example Usage","text":"<ol> <li>Install the Thunder Client extension in VSCode.</li> <li>Open the Thunder Client panel from the sidebar.</li> <li>Create a new request and set the HTTP method.</li> <li>Enter the API endpoint URL.</li> <li>Add headers, query parameters, and request body if needed.</li> <li>Click the \"Send\" button to make the request and view the response.</li> </ol>"},{"location":"06_AJAX/#download_1","title":"Download","text":"<p>Download Thunder Client</p>"},{"location":"06_AJAX/#33-rest-client","title":"3.3 REST Client","text":""},{"location":"06_AJAX/#overview_2","title":"Overview","text":"<p>REST Client is another VSCode extension that allows you to send HTTP requests and view the responses directly in your code editor. It's ideal for those who prefer a more code-centric approach.</p>"},{"location":"06_AJAX/#key-features_3","title":"Key Features","text":"<ul> <li>Request Files: Write your requests in <code>.http</code> or <code>.rest</code> files for better organization and version control.</li> <li>Environment Variables: Use environment variables to manage different settings for your API requests.</li> <li>Inline Documentation: Document your requests inline with your code for better readability.</li> <li>Support for Various HTTP Methods: Easily send GET, POST, PUT, DELETE, and other types of HTTP requests.</li> </ul>"},{"location":"06_AJAX/#example-usage_2","title":"Example Usage","text":"<ol> <li>Install the REST Client extension in VSCode.</li> <li>Create a new <code>.http</code> or <code>.rest</code> file.</li> <li>Write your request, e.g.:</li> </ol> <p><pre><code>GET https://example.com/comments/1 HTTP/1.1\n\n###\n\nGET https://example.com/topics/1 HTTP/1.1\n\n###\n\nPOST https://example.com/comments HTTP/1.1\ncontent-type: application/json\n{\n    \"name\": \"sample\",\n    \"time\": \"Wed, 21 Oct 2015 18:27:50 GMT\"\n}\n</code></pre>   4. Click the \"Send Request\" link above the request to execute it and view the response in a split panel4ew3.</p> <p></p>"},{"location":"06_AJAX/#download_2","title":"Download","text":"<p>Download REST Client</p>"},{"location":"06_AJAX/#4-xmlhttprequest","title":"4. XMLHttpRequest","text":"<p>We are not going to use this older way, but we can see this little example to understand it.</p> <pre><code>// Create a new XMLHttpRequest object\nvar xhr = new XMLHttpRequest();\n\n// Configure it: GET-request for the URL /users\nxhr.open('GET', 'https://jsonplaceholder.typicode.com/users', true);\n\n// Set up a function to handle the response\nxhr.addEventListener(\"load\", function () {\n  if (xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) {\n    // Parse the JSON response\n    var users = JSON.parse(xhr.responseText);\n\n    // Log the response to the console\n    console.log(users);\n\n    // Display the response in the &lt;pre&gt; element\n    document.getElementById('responseOutput').textContent = JSON.stringify(users, null, 2);\n  } else {\n    console.error('Request failed. Returned status of ' + xhr.status);\n  }\n});\n\n// Handle network errors\nxhr.addEventListener(\"error\", function () {\n  console.error('Request failed.');\n})\n\n// Send the request\nxhr.send();\n</code></pre>"},{"location":"06_AJAX/#5-fetch-api","title":"5. Fetch API","text":"<p>In modern web development, Fetch simplifies and enhances many aspects of AJAX connections. It is now compatible with most browsers, making it a preferred choice for handling asynchronous requests.</p>"},{"location":"06_AJAX/#key-methods-to-handle-asynchrony-with-fetch","title":"Key Methods to Handle Asynchrony with Fetch:","text":"<ol> <li>Promises</li> <li>async / await</li> </ol>"},{"location":"06_AJAX/#-link-to-fetch-in-msn","title":"--&gt; Link to Fetch in msn","text":""},{"location":"06_AJAX/#51-fetch-with-promises","title":"5.1 Fetch with Promises","text":"<p>Fetch API uses Promises to handle asynchronous operations. Here's a basic example of how to use Fetch with Promises:</p> <pre><code>// This is a GET request with promises\nfetch('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response =&gt; {\n    // parse the json response\n    response =&gt; response.json()\n  })\n  .then(data =&gt; {\n      // Do something with data\n      document.getElementById('output').innerText = JSON.stringify(data);\n  })\n  .catch(error =&gt; console.error('Error:', error));\n</code></pre>"},{"location":"06_AJAX/#52-fetch-with-asyncawait","title":"5.2 Fetch with Async/Await","text":"<p>The async/await syntax provides a cleaner and more readable way to handle asynchronous operations.  It's important to note that <code>await</code> can only be used inside an <code>async</code> function. Here's how to use Fetch with async/await:</p> <pre><code>// this is a GET request with async/await\nasync function fetchData() {\n    try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/posts/1');\n        // parse the json response\n        const data = await response.json();\n        // do something with data\n        console.log(data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n</code></pre>"},{"location":"06_AJAX/#53-handling-http-responses","title":"5.3 Handling HTTP Responses","text":"<p>The <code>Response</code> object in the Fetch API provides several methods to handle and format HTTP responses. Each of these methods returns a promise that resolves to different types of data.</p> <ul> <li><code>response.json()</code>: Returns a promise resolved to a JSON object.</li> <li><code>response.text()</code>: Returns a promise resolved to raw text.</li> <li><code>response.formData()</code>: Returns a promise resolved to <code>formData</code>.</li> <li><code>response.blob()</code>: Returns a promise resolved to a <code>Blob</code> (a file-like object of binary aw data).</li> </ul>"},{"location":"06_AJAX/#responsejson","title":"<code>response.json()</code>","text":"<p>That's the one that we will be using most of the times, because JSON is the most common format that the API's out there serves us data.</p> <ul> <li>Returns a promise resolved to a JSON object.</li> <li>Useful for handling responses containing JSON data.</li> </ul> <pre><code>fetch('https://api.example.com/data')\n    .then(response =&gt; response.json())\n    .then(data =&gt; console.log(data))\n    .catch(error =&gt; console.error('Error:', error));\n</code></pre>"},{"location":"06_AJAX/#connection-status-information","title":"Connection Status Information","text":"<p>The <code>Response</code> object also provides information about the status of the connection:</p>"},{"location":"06_AJAX/#responsestatus","title":"<code>response.status</code>","text":"<ul> <li>Returns the status code of the response.</li> <li>Typical values include:<ul> <li><code>100-199</code>: Informational responses.</li> <li><code>200-299</code>: Successful responses.<ul> <li><code>200</code>: OK.</li> </ul> </li> <li><code>300-399</code>:Redirection messages</li> <li><code>400-499</code>: Client error response.<ul> <li><code>404</code>: Not Found.</li> </ul> </li> <li><code>500-599</code>: Server error responses.<ul> <li><code>500</code>: Internal Server Error. </li> </ul> </li> <li>All HTTP Response Status Codes <pre><code>fetch('https://api.example.com/data')\n    .then(response =&gt; {\n        console.log(response.status); // e.g., 200, 404, 500\n        return response.json();\n    })\n    .then(data =&gt; console.log(data))\n    .catch(error =&gt; console.error('Error:', error));\n</code></pre></li> </ul> </li> </ul>"},{"location":"06_AJAX/#responseok","title":"<code>response.ok</code>","text":"<ul> <li> <p>Returns a boolean indicating whether the response was successful (status in the range 200-299).</p> <pre><code>fetch('https://api.example.com/data')\n    .then(response =&gt; {\n        if (response.ok) {\n            return response.json();\n        } else {\n            throw new Error('Network response was not ok');\n        }\n    })\n    .then(data =&gt; console.log(data))\n    .catch(error =&gt; console.error('Error:', error));\n</code></pre> </li> </ul>"},{"location":"06_AJAX/#53-get-post-put-patch-delete-requests","title":"5.3 GET, POST, PUT, PATCH, DELETE Requests","text":"<p>As you could see, if you don't specify a method, the default method is GET. In the previous examples we have created GET requests. You can see we have not defined <code>method</code>, <code>body</code>or <code>headers</code>into fetch options.</p> <p>When dealing with POST, PUT and PATCH requests, we need to include <code>method</code>, <code>body</code> and  <code>headers</code> as fetch options.</p>"},{"location":"06_AJAX/#get-requests","title":"GET Requests:","text":"<ul> <li>For GET requests, we typically do not need to include a Content-Type header. GET requests do not have a body, so there's no content type to specify.</li> <li>However we can send some data as params when the API endpoint allows it. </li> <li>But maybe we could need to include some information in the header as <code>'Authorization'</code> in the cases is required.</li> </ul> <p>Example:</p> <pre><code>// GET simple request example\nfetch('https://api.example.com/get-images?query=cats&amp;limit=20')\n    .then(response =&gt; response.json())\n    .then(data =&gt; console.log(data))\n    .catch(error =&gt; console.error('Error:', error));\n\n// GET Authorization required\nfetch('https://api.example.com/get-images?query=cats&amp;limit=20', {\n  headers: {\n        'Authorization': 'Bearer your-api-key'\n    },\n})\n    .then(response =&gt; response.json())\n    .then(data =&gt; console.log(data))\n    .catch(error =&gt; console.error('Error:', error));\n</code></pre>"},{"location":"06_AJAX/#post-put-patch-request","title":"POST, PUT, PATCH Request:","text":"<p>For these types of requests that create or modify a resource, we do need to send a <code>body</code>. It  will be necessary to include:</p> <ul> <li><code>Content-Type</code> header to specify the media type of content<ul> <li>Common values for the Content-Type header include <code>application/json</code>, <code>application/x-www-form-urlencoded</code>, <code>multipart/form-data</code>, etc.</li> </ul> </li> <li><code>method</code>:<ul> <li><code>'POST'</code></li> <li><code>'PUT'</code></li> <li><code>'PATCH</code></li> </ul> </li> <li><code>body</code>: Most of the times, when <code>Content-Type</code> is JSON we have to 'stringify' some data object:<ul> <li><code>body: JSON.stringify(data)</code></li> </ul> </li> </ul> <p>Examples: <pre><code>const BASE_URL = 'https://api.example.com';\nconst API_KEY = 'your-api-key';\n\n// Function to handle POST requests\nexport async function postData(endpoint, body) {\n    try {\n        const response = await fetch(`${BASE_URL}${endpoint}`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${API_KEY}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        });\n        if (!response.ok) {\n            throw new Error(`Error: ${response.statusText}`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Post Data Error:', error);\n        throw error;\n    }\n}\n\n// Function to handle PUT requests\nexport async function putData(endpoint, body) {\n    try {\n        const response = await fetch(`${BASE_URL}${endpoint}`, {\n            method: 'PUT',\n            headers: {\n                'Authorization': `Bearer ${API_KEY}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        });\n        if (!response.ok) {\n            throw new Error(`Error: ${response.statusText}`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Put Data Error:', error);\n        throw error;\n    }\n}\n</code></pre></p>"},{"location":"06_AJAX/#delete-requests","title":"DELETE Requests","text":"<ul> <li>The DELETE method is used to delete a resource identified by a URL. Like the GET method, the DELETE method typically doesn't need a body, and thus it usually doesn't require a <code>Content-Type</code> header. However, there are some scenarios where you might need to include a body with a DELETE request and also could be neccessary to include some information in the header as <code>'Authorization'</code>.</li> </ul> <p>Example: <pre><code>// Simple delete function without options\nexport async function simpleDeleteData(endpoint) {\n    try {\n        const response = await fetch(`${BASE_URL}${endpoint}`, {\n          method: 'DELETE'\n        });\n        if (!response.ok) {\n            throw new Error(`Error: ${response.statusText}`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Delete Data Error:', error);\n        throw error;\n    }\n}\n\n// mode advanced, with some options\nexport async function deleteData(endpoint, body = null) {\n    try {\n        const options = {\n            method: 'DELETE',\n            headers: {\n                'Authorization': `Bearer ${API_KEY}`\n            }\n        };\n        // asking for a body. In case there is body we stringify it \n        if (body) {\n            options.headers['Content-Type'] = 'application/json';\n            options.body = JSON.stringify(body);\n        }\n        const response = await fetch(`${BASE_URL}${endpoint}`, options);\n        if (!response.ok) {\n            throw new Error(`Error: ${response.statusText}`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Delete Data Error:', error);\n        throw error;\n    }\n}\n</code></pre></p>"},{"location":"06_AJAX/#54-encapsule-fetch-requests-in-reusable-modules","title":"5.4 Encapsule fetch requests in reusable modulesIMPORTANT","text":"<p>It is always a good practice to encapsule the <code>fetch</code> requests to our API in a separate js module that we can import in the main module. For that purpose we have to use Ecma Script Modules (ESM)</p> <ol> <li> <p>Import the Main Script as a Module</p> <pre><code>&lt;script src=\"your-main.js\" type=\"module\"&gt;&lt;/script&gt;\n</code></pre> </li> <li> <p>Create the <code>your-api.js</code> Module</p> <p>Create a separate JavaScript file named <code>your-api.js</code> that will encapsulate all the logic for accessing the API. This module will contain constants, such as the base URL and API keys, and functions for making API requests.</p> <pre><code>// your-api.js\n\nconst BASE_URL = 'https://api.example.com';\nconst API_KEY = 'your-api-key';\n\n// Function to handle GET requests\nexport async function fetchData(endpoint) {\n    try {\n        const response = await fetch(`${BASE_URL}${endpoint}`, {\n            headers: {\n                'Authorization': `Bearer ${API_KEY}`,\n                'Content-Type': 'application/json'\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`Error: ${response.statusText}`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Fetch Data Error:', error);\n        throw error;\n    }\n}\n\n// Function to handle POST requests\nexport async function postData(endpoint, body) {\n    try {\n        const response = await fetch(`${BASE_URL}${endpoint}`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${API_KEY}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        });\n        if (!response.ok) {\n            throw new Error(`Error: ${response.statusText}`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Post Data Error:', error);\n        throw error;\n    }\n}\n\n// Other API-related functions can be added here\n</code></pre> </li> <li> <p>Import and Use the API Module in the Main Script</p> <p>In your main JavaScript file, <code>your-main.js</code>, import the functions from the <code>your-api.js</code> module and use them to make API requests.</p> <pre><code>// your-main.js\nimport { fetchData, postData } from './your-api.js';\n\nasync function main() {\n    try {\n        // Example of making a GET request\n        const data = await fetchData('/some-endpoint');\n        console.log('Fetched Data:', data);\n\n        // Example of making a POST request\n        const postDataBody = { key: 'value' };\n        const postDataResponse = await postData('/some-endpoint', postDataBody);\n        console.log('Posted Data:', postDataResponse);\n    } catch (error) {\n        console.error('Main Function Error:', error);\n    }\n}\n\n// Run the main function\nmain();\n</code></pre> </li> </ol> <p>From now in advance it is MANDATORY to encapsule the fetch functions of each API that we are accessing in our project in a separate module.</p>"},{"location":"07_local_storage/","title":"UNIT7 - Local Storage","text":"<p>Work in progress...</p>"}]}