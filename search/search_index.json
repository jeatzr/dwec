{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Client-Side Web Development","text":"<p>This website has been created to share the materials for the subject \"Desarrollo Web en Entorno Cliente\" in its bilingual option.</p> <p>The contents have been divided into the following units:</p> <ol> <li>Introduction to Frontend Tools</li> <li>JS Fundamentals</li> <li>Arrays, Objects, and Classes</li> <li>Manipulating the DOM</li> <li>Event Management and Form Validation</li> <li>AJAX</li> <li>Local Storage</li> </ol> <p>DWEC Bilingual Materials by Jos\u00e9 Enrique Ati\u00e9nzar Ib\u00e1\u00f1ez is licensed under CC BY-NC-SA 4.0</p>"},{"location":"01_frontend_introduction/","title":"UNIT1 - Introduction to Frontend Tools","text":""},{"location":"01_frontend_introduction/#1-difference-between-the-internet-and-the-www","title":"1. Difference Between the Internet and the WWW","text":""},{"location":"01_frontend_introduction/#the-internet-the-www","title":"The Internet === The WWW ??","text":""},{"location":"01_frontend_introduction/#the-internet","title":"The Internet:","text":"<ul> <li>Definition: The Internet is a global network of interconnected computers and other devices. It is the infrastructure that enables various types of digital communication and data exchange.</li> <li>History: The development of the Internet began in the late 1960s with the creation of ARPANET, a project funded by the U.S. Department of Defense. Over the following decades, it evolved into a global network with the adoption of TCP/IP protocols in the 1980s.</li> <li>Components: The Internet consists of hardware (servers, routers, cables) and dertain standards and protocols (TCP/IP, Ethernet).</li> <li>Functions: It supports a wide range of services such as email, file transfer, instant messaging, and, of course, the World Wide Web.</li> <li>Analogy: Think of the Internet as the physical network of roads and highways.</li> </ul>"},{"location":"01_frontend_introduction/#the-world-wide-web-www","title":"The World Wide Web (WWW):","text":"<ul> <li>Definition: The World Wide Web is a collection of information, accessible via the Internet, which is formatted and interlinked using hypertext and hypermedia. It is a service that operates on the Internet. History: The World Wide Web was invented by Tim Berners-Lee in 1989 while working at CERN. He developed the first web browser and web server, and the first website went live in 1991. The WWW rapidly grew in popularity throughout the 1990s, becoming a major part of everyday life.</li> <li>Components: The WWW consists of web pages, websites, and web browsers. Web pages are documents written in HTML and accessed through URLs.</li> <li> <p>Functions: It allows users to access and navigate web pages through web browsers (like Chrome, Firefox, Safari). These pages can contain text, images, videos, and links to other </p> </li> <li> <p>Analogy: Think of the WWW as a specific system of paths and landmarks (websites and web pages) that exist on the physical roads and highways (the Internet).</p> </li> </ul>"},{"location":"01_frontend_introduction/#summary","title":"Summary:","text":"<ul> <li>Internet: The underlying global network connecting millions of computers.</li> <li>WWW: A subset of the Internet, consisting of web pages and sites, accessed through web browsers.</li> </ul> <p>The WWW relies on the Internet to function, but the Internet also supports many other services beyond the Web.</p>"},{"location":"01_frontend_introduction/#2-web-architecture","title":"2. Web Architecture","text":"<p>The most common architecture is client/server.   - A client is a service consumer. The web browser on our device acts as a client.   - A server is one or more processes hosted on machines that provide these services.\"</p> <p></p>"},{"location":"01_frontend_introduction/#3-frontend-and-backend-development","title":"3. Frontend and Backend development","text":"<ul> <li>Backend: The part of the web application that runs on the server.</li> <li>Frontend: The part of the web application that runs on the client.</li> </ul>"},{"location":"01_frontend_introduction/#31-backend-development","title":"3.1 Backend Development","text":"<p>It's the development carried out on the server side. It's responsible for the business logic and data persistence (storage in the database).</p> <p>Backend languajes:</p> <ul> <li>Java</li> <li>Python</li> <li>Node.js</li> <li>Ruby</li> <li>PHP</li> <li>ASP.NET</li> </ul> <p></p>"},{"location":"01_frontend_introduction/#32-frontend-development","title":"3.2 Frontend Development","text":"<p>It's the part developed to run on the client (web browser). The web browser only knows how to interpret three languages:</p> <ul> <li>HTML: For the structure and content of the page</li> <li>CSS: Defines the appearance of the web page.</li> <li>JavaScript: Language that defines dynamic behavior.</li> </ul> <p></p> <p>Currently, it is gaining a lot of prominence due to the increased weight of web applications on the client side -&gt; Single-page application (SPAs).</p> <p>A single-page application (SPA) is a web application or website that interacts with the user by dynamically rewriting the current web page with new data from the web server, instead of the default method of a web browser loading entire new pages. The goal is faster transitions that make the website feel more like a native app. (Source: Wikipedia)</p> <p>We can write the logic of our page in Vanilla JS. But the complexity of projects has made it necessary for various JavaScript frameworks and libraries to appear:</p> <ul> <li>Angular</li> <li>React</li> <li>Vue</li> <li>Svelte</li> <li>Many more and many more to come.</li> </ul> <p></p>"},{"location":"01_frontend_introduction/#4-javascript-languaje","title":"4. Javascript Languaje","text":"<p>JS is an interpreted languaje defined as:</p> <ul> <li> <p>Object oriented: JavaScript uses objects to organize and structure code, associating properties and methods with data.</p> </li> <li> <p>Imperative: JavaScript executes statements sequentially to perform tasks, focusing on how to achieve results step by step.</p> </li> <li> <p>Prototype-based: Instead of classes, JavaScript uses prototypes as templates for creating objects, allowing objects to inherit properties and methods directly from other objects.</p> </li> <li> <p>Weakly typed: JavaScript allows flexible variable types, where variables can change types during execution without explicit declarations.</p> </li> <li> <p>Dynamically typed: Types are determined at runtime in JavaScript, enabling variables to hold different types of values as the program runs, which enhances flexibility but requires careful handling to avoid unexpected behavior.</p> </li> </ul> <p>It is primarily used on the client side, implemented as part of the web browser to enhance the web interface and provide dynamic behavior.</p> <p>It can be used also in the server side with node.js to create the backend and many other applications.</p> <p>REMINDER</p> <ul> <li>Compiled Languajes: A compiled language is a programming language where source code is translated entirely into machine code before execution, typically resulting in faster performance but requiring specific compilation for different platforms. Examples include C, C++, and Rust.</li> <li>Interpreted Languajes: An interpreted language is a programming language where the code is executed line by line by an interpreter, translating each instruction to machine code one at a time during runtime. This approach enhances portability across different systems but typically results in slower performance compared to compiled languages. Examples include Python, JavaScript, and Ruby.</li> </ul>"},{"location":"01_frontend_introduction/#41-js-versions","title":"4.1 JS versions","text":"<p>JS is a dialect of ECMAScript and is defined by that standard. </p> <p>History:</p> <ul> <li>It was created by Brendan Eich for Netscape in 1995, initially called LiveScript before being renamed JavaScript. </li> <li>In 1997, ECMA created the first ECMAScript standard. </li> <li>ECMAScript 5, ES5, released in 2009, introduced many improvements and remained a standard for many years. </li> <li>ECMAScript 6, also known as ES6, released in 2015, introduced major enhancements such as the use of classes and modules. It is the most widely supported version by all current browsers.</li> <li>Since ES6, a new version has been released every year. For example, the version for 2023 is ECMAScript 14. We can check ESCMAScript version history on Wikipedia or the official site of ECMA to check the most releases of ECMAScript.</li> </ul> <p></p> <p>Image source: Gabriel Lebec @ Course Report</p>"},{"location":"01_frontend_introduction/#42-typescript","title":"4.2 TypeScript","text":"<p>TypeScript is a statically typed superset of JavaScript that compiles to plain JavaScript. It is developed and maintained by Microsoft. TypeScript adds optional static types, classes, and interfaces to JavaScript, providing a robust development experience for building large-scale applications.</p> <p></p>"},{"location":"01_frontend_introduction/#5-tools-for-frontend-web-development","title":"5. Tools for frontend web development","text":""},{"location":"01_frontend_introduction/#51-text-editors","title":"5.1 Text editors","text":"<p>The most important tool to code will be a good text editor. </p> <p>We can find several options in the market, from the old and reliable (but simple) Notepad++ to the very powerful VS Code.</p> <ul> <li>Notepad++</li> <li>Sublime Text</li> <li>Atom</li> <li>VS Code</li> </ul> <p></p> <p>We will use the most extended nowadays: VSCode. This powerful and handy editor from Microsoft has a lot of desiderable features as:</p> <ul> <li>Syntax highlighting</li> <li>Multiplatform: For Windows, macOS and Linux</li> <li>Support for debugging</li> <li>Built-in Git control and integration with GitHub</li> <li>Integration with GitHub Copylot. </li> <li>\"Snippets\" or reusable pieces of code</li> <li>A multitude of installable extensions</li> </ul> <p>Online code editors. They have the advantage of not having to install and configure tools on your computer. They are very useful as a sandbox (controlled environment).</p> <ul> <li>Stackblitz</li> <li>Code Sandbox</li> <li>Code Pen</li> </ul>"},{"location":"01_frontend_introduction/#52-web-browsers","title":"5.2 Web browsers","text":"<p>Developers rely on browsers not only to view web pages but also for essential tools and capabilities that aid in the development and debugging process:</p> <ul> <li>Development Tools: Modern browsers come equipped with developer tools (like Chrome Developer Tools, Firefox Developer Tools, and Safari Web Inspector) that provide features such as:<ul> <li>DOM Inspection</li> <li>CSS Inspection</li> <li>Javascript console</li> </ul> </li> </ul> <p></p>"},{"location":"01_frontend_introduction/#53-version-control-tools","title":"5.3 Version control tools","text":"<p>Version control tools are software systems that help manage changes to files, documents, or any collection of information over time. They are essential for tracking modifications made by individuals or teams, facilitating collaboration, and ensuring the integrity and traceability of project history. The tools we will use are:</p> <ul> <li>Git: Git is a distributed version control system designed for speed and efficiency. It allows multiple developers to work on the same project simultaneously and offers branching and merging capabilities. This is a tool we need to install in our computer: Git</li> </ul> <p></p> <ul> <li> <p>GitHub: GitHub primarily functions as a hosting platform for Git repositories, so we can synchronize our local Git project to Github. But we can see all the different purposes of this tool:</p> <ol> <li> <p>Version Control: GitHub hosts Git repositories, enabling developers to manage and track changes to their codebase over time.</p> </li> <li> <p>Collaboration: Facilitates teamwork by allowing multiple developers to work on the same project simultaneously, manage branches, and merge changes.</p> </li> <li> <p>Code Hosting: Provides a platform for developers to host and share their source code repositories, making them accessible for viewing, cloning, and contributing.</p> </li> <li> <p>Issue Tracking: Includes an issue tracking system for managing and resolving bugs, tasks, and feature requests related to projects.</p> </li> <li> <p>Project Management: Offers tools like project boards and milestones to organize tasks, track progress, and prioritize work items across teams.</p> </li> <li> <p>CI/CD Integration: Integrates with CI/CD tools to automate build, test, and deployment processes, ensuring code changes are tested and deployed efficiently.</p> </li> <li> <p>Community and Open Source: Fosters a community around open source software development, allowing users to discover, contribute to, and collaborate on projects globally.</p> </li> <li> <p>Documentation: Provides tools for creating and maintaining project documentation, wikis, and README files to explain project goals, usage instructions, and contribution guidelines.</p> </li> </ol> </li> </ul> <p>DOCUMENT DOCUMENT DOCUMENT!!!:</p> <ul> <li>Dont forget to document your project with a README.md file written in Markdown. Markdown is a lightweight markup language that is commonly used for formatting text on the web. When writing README files on platforms like GitHub, Markdown provides a simple and readable way to structure and style text without needing to write HTML directly.</li> <li>Learn something about Markdown languaje </li> <li> <p>See this example -&gt; README.md</p> </li> <li> <p>Example of Markdown syntax: </p> </li> </ul> <pre><code># Project Name\n\nDescription of your project.\n\n## Installation\n\nInstructions on how to install and run your project.\n\n## Usage\n\nExamples and instructions on how to use your project.\n\n### Code Example\n\n```javascript\nconsole.log('Hello, World!');\n</code></pre>"},{"location":"01_frontend_introduction/#54-package-managers","title":"5.4 Package Managers","text":"<p>Package managers help us install various utilities, features, and frameworks. They streamline the process of adding, updating, and managing software packages, ensuring that we have the necessary dependencies and tools to develop and run our applications efficiently. Popular examples are pip for Python and npm form JavaScript.  In our case, JS,  the two main options are:</p> <ul> <li> <p>npm (Node Package Manager) is the default package manager for Node.js. It helps developers install, share, and manage JavaScript libraries and dependencies for their projects. It also provides a registry where developers can publish their own packages.</p> </li> <li> <p>Yarn is an alternative package manager for JavaScript that focuses on speed, security, and reliability. Developed by Facebook, Yarn uses a lockfile to ensure consistent installations across different environments and optimizes the process of installing and updating dependencies.</p> </li> </ul> <p></p>"},{"location":"01_frontend_introduction/#55-linters-transpilers-and-bundlers","title":"5.5 Linters, Transpilers, and Bundlers","text":"<p>Linters are tools that analyze your code to find and fix programming errors, bugs, stylistic errors, and other problematic patterns. They help enforce coding standards and improve code quality. Examples include:</p> <ul> <li>ESLint: A popular linter for JavaScript and TypeScript that helps identify and fix problems in your code.</li> <li>JSHint: Another JavaScript linter that detects errors and potential problems in your code.</li> </ul> <p></p> <p>Transpilers are tools that convert code written in one programming language or version into another. They are often used to translate modern JavaScript (ES6+) into older versions that are compatible with all browsers. Examples include:</p> <ul> <li>Babel: A widely-used JavaScript transpiler that converts ES6+ code into ES5, making it compatible with older browsers.</li> <li>TypeScript Compiler (tsc): Converts TypeScript code into JavaScript, allowing developers to use TypeScript's type-checking features while still deploying JavaScript.</li> <li>Sass: A preprocessor scripting language that is interpreted or compiled into CSS, making it easier to write and maintain styles.</li> </ul> <p></p> <p>Bundlers are tools that combine multiple files and modules into a single file (or a few files) for easier distribution and deployment. They handle dependencies, optimize code, and often include features like code splitting and minification. Examples include:</p> <ul> <li>Webpack: A powerful module bundler for JavaScript applications that processes and bundles various assets like JavaScript, CSS, and images.</li> <li>Parcel: A fast, zero-configuration web application bundler that works out of the box with no configuration needed.</li> <li>Rollup: A module bundler for JavaScript that compiles small pieces of code into something larger and more complex, often used for building libraries.</li> </ul> <p></p> <p>These tools are essential in modern web development, helping maintain code quality, ensuring compatibility across different environments, and optimizing the final output for performance.</p>"},{"location":"01_frontend_introduction/#56-libraries-and-frameworks","title":"5.6 Libraries and Frameworks","text":"<p>Libraries and frameworks extend capabilities and simplify the use of JavaScript (JS) or CSS. They provide pre-written code to perform common tasks, helping developers build applications more efficiently and with fewer errors.</p> <ul> <li>Bootstrap: A CSS framework that simplifies the creation of web interface elements.</li> <li>jQuery: A JavaScript library that makes using JS easier and improves compatibility. A bit old fashioned and unnecesary, but still used in legacy websites.</li> </ul>"},{"location":"01_frontend_introduction/#frameworks","title":"Frameworks","text":"<ul> <li>Angular: A JS framework created by Google that facilitates the creation of Single Page Applications (SPA) and follows the MVC (Model-View-Controller) pattern. It is widely used and has a large community.</li> <li>Vue.js: An open-source JS framework also designed for creating SPAs.</li> <li>React: An open-source JS library created by Facebook. It is mainly used for defining the View layer, though it can work with extensions to define more parts of the application architecture. It is also used for creating SPAs.</li> </ul> <p>Some jokes :) Framework war Meme - jQuery meme </p>  Hands-On Exercise 1.1 <p>Take a look on State Of JS and comment. </p> <p>Research different frameworks and select one that you would use to build a Single Page Application (SPA). State the reasons that convinced you.</p>"},{"location":"01_frontend_introduction/#6-include-javascript-code","title":"6. Include JavaScript code.","text":""},{"location":"01_frontend_introduction/06_include_js/","title":"UNIT 1 - Introduction to Frontend Tools","text":""},{"location":"01_frontend_introduction/06_include_js/#6-include-javascript-code","title":"6. Include Javascript code","text":"<p>We have several ways to include  JavaScript code in our web page:</p>"},{"location":"01_frontend_introduction/06_include_js/#61","title":"6.1","text":""},{"location":"02_js_fundamentals/","title":"UNIT2 - JavaScript Fundamentals","text":""},{"location":"02_js_fundamentals/#1-general-syntax-of-javascript","title":"1. General Syntax of JavaScript","text":""},{"location":"02_js_fundamentals/#ecmascript-syntax","title":"ECMAScript Syntax","text":"<p>JavaScript, also known as ECMAScript, has a syntax similar to languages like C++ and Java.</p>"},{"location":"02_js_fundamentals/#single-line-comments","title":"Single-line Comments","text":"<p>Use <code>//</code> to write comments on a single line.</p> <pre><code>// This is a single-line comment\n</code></pre>"},{"location":"02_js_fundamentals/#multi-line-comments","title":"Multi-line Comments","text":"<p>Use <code>/* ... */</code> to write comments that span multiple lines. <pre><code>/* This is \na multiline\ncomment\n*/\n</code></pre></p>"},{"location":"02_js_fundamentals/#semicolons","title":"Semicolons","text":"<p>The semicolon (<code>;</code>) at the end of a line is optional but recommended to avoid potential issues during code execution.</p> <pre><code>let x = 5;  // Semicolon is recommended\n</code></pre>"},{"location":"02_js_fundamentals/#reserved-words","title":"Reserved words","text":"<p>Do not use reserved keywords for variable names, as they have special meaning in the language. <pre><code>// Incorrect\nlet for = 10;  // 'for' is a reserved word\n\n// Correct\nlet count = 10;\n</code></pre></p> <p>List of reserved words: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#reserved_words</p>"},{"location":"02_js_fundamentals/#weak-typing","title":"Weak typing","text":"<p>JavaScript is a weakly typed language, meaning you do not need to declare data types explicitly. <pre><code>let variable = 10;   // No need to declare type, it's a number\nvariable = \"text\";   // Now it's a string\n</code></pre></p> <p>Lexical Grammar: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar</p>"},{"location":"02_js_fundamentals/#2-console-messages-and-browser-alerts","title":"2. Console messages and browser alerts","text":""},{"location":"02_js_fundamentals/#21-debugging-console","title":"2.1 Debugging Console","text":"<p>We can view the console in the browser by selecting the \"Inspect\" option. We can interact with the system console object by invoking its methods.</p> <pre><code>console.log('Hello World!');           // general message\nconsole.info('This is an info message'); // info message\nconsole.warn('Be careful!');            // warning message\nconsole.error('Fatal error');           // error message\n</code></pre>"},{"location":"02_js_fundamentals/#debugger-statement","title":"Debugger statement","text":"<p>The <code>debugger</code> statement can be used to pause the execution of a script for debugging purposes.</p> <p>Using the <code>debugger</code> statement, you can pause the code execution at a specific point to inspect the current state of variables and the call stack.</p> <p><pre><code>function add(a, b) {\n    debugger;  // Execution will pause here if the developer tools are open\n    return a + b;\n}\nadd(2, 3);\n</code></pre> When the code execution reaches the debugger statement, it will pause, allowing you to use the browser's developer tools to inspect the current state and debug your code effectively.</p>"},{"location":"02_js_fundamentals/#22-alert-prompt-and-confirm","title":"2.2 Alert, Prompt and Confirm","text":"<p>These methods are used to show browser alerts, request data, and confirm actions with an OK/Cancel dialog.</p>"},{"location":"02_js_fundamentals/#alert","title":"alert()","text":"<p>The <code>alert()</code> method displays an alert dialog with a specified message and an OK button.</p> <pre><code>alert(\"This is an alert message!\");\n</code></pre>"},{"location":"02_js_fundamentals/#prompt","title":"prompt()","text":"<p>The <code>prompt()</code> method displays a dialog with a message prompting the user to input some text. It returns the text entered by the user, or <code>null</code> if the user pressed Cancel.</p> <pre><code>let userInput = prompt(\"Please enter your name:\");\nconsole.log(\"User entered: \" + userInput);\n</code></pre>"},{"location":"02_js_fundamentals/#confirm","title":"confirm()","text":"<p>The <code>confirm()</code> method displays a dialog with a specified message, along with an OK and a Cancel button. It returns <code>true</code> if the user pressed OK, and <code>false</code> otherwise.</p> <pre><code>let userConfirmed = confirm(\"Do you really want to delete this item?\");\nif (userConfirmed) {\n    console.log(\"User confirmed the action.\");\n} else {\n    console.log(\"User canceled the action.\");\n}\n</code></pre>"},{"location":"02_js_fundamentals/#best-practices","title":"Best Practices","text":"<p>We should try to avoid using these methods whenever possible. They interrupt the user experience and are generally considered bad practice for modern web development. We will use them only for now, as we do not yet know other forms of dynamic communication with the user.</p>"},{"location":"02_js_fundamentals/#3-variable-declaration","title":"3. Variable declaration","text":"<p>We can declare variables in three ways:</p>"},{"location":"02_js_fundamentals/#var","title":"var","text":"<p>The traditional way to declare a variable. It is not recomended nowadays. </p> <p>Variables declared with <code>var</code> inside a function are function-scoped, meaning they are accessible throughout the function in which they are declared, but not outside of it. </p> <p><code>var</code>  will create globally-scoped variables when declared outside of a function or in the global scope.</p> <pre><code>var globalVar = \"I'm accessible from anywhere in the script\";\nfunction testVar() {\n    var functionVar = \"I'm accessible within this function only\";\n    console.log(globalVar);  // Outputs: I'm accessible from anywhere in the script\n    console.log(functionVar);  // Outputs: I'm accessible within this function only\n}\nconsole.log(globalVar);  // Outputs: I'm accessible from anywhere in the script\n// console.log(functionVar);  // Uncaught ReferenceError: functionVar is not defined\n</code></pre>"},{"location":"02_js_fundamentals/#let","title":"let","text":"<p>A variable that is only accessible within the block, statement, or expression where it is declared. <code>let</code> is block-scoped.</p> <pre><code>function testLet() {\n    let blockVar = \"I'm accessible within this block only\";\n    if (true) {\n        let innerBlockVar = \"I'm accessible within this inner block only\";\n        console.log(blockVar);  // Outputs: I'm accessible within this block only\n        console.log(innerBlockVar);  // Outputs: I'm accessible within this inner block only\n    }\n    console.log(blockVar);  // Outputs: I'm accessible within this block only\n    // console.log(innerBlockVar);  // Uncaught ReferenceError: innerBlockVar is not defined\n}\n</code></pre>"},{"location":"02_js_fundamentals/#const","title":"const","text":"<p>A constant that is only accessible within the block, statement, or expression where it is declared. Constants cannot be reassigned after their initial declaration. <code>const</code> is block-scoped.</p> <pre><code>function testConst() {\n    const constantVar = \"I'm a constant within this block\";\n    if (true) {\n        const innerConstantVar = \"I'm a constant within this inner block\";\n        console.log(constantVar);  // Outputs: I'm a constant within this block\n        console.log(innerConstantVar);  // Outputs: I'm a constant within this inner block\n    }\n    console.log(constantVar);  // Outputs: I'm a constant within this block\n    // console.log(innerConstantVar);  // Uncaught ReferenceError: innerConstantVar is not defined\n    // constantVar = \"New value\";  // Uncaught TypeError: Assignment to constant variable.\n}\n</code></pre>"},{"location":"02_js_fundamentals/#best-practices_1","title":"Best Practices","text":"<p>It is recommended to use <code>let</code> or <code>const</code> depending on whether the value of the variable should change or not.</p> <ul> <li>Use <code>let</code> for variables that will change.</li> <li>Use <code>const</code> for variables that should not change.</li> </ul> <pre><code>let mutableVariable = \"I can change\";\nmutableVariable = \"I have changed\";\n\nconst immutableVariable = \"I cannot change\";\n// immutableVariable = \"Trying to change\";  // Uncaught TypeError: Assignment to constant variable.\n</code></pre>"},{"location":"02_js_fundamentals/#4-primitive-data-types","title":"4. Primitive Data Types","text":"<p>JavaScript has several primitive data types:</p> <ul> <li> <p>Number: Represents both integer and floating-point numbers.</p> </li> <li> <p>String: Represents a sequence of characters (text).</p> </li> <li> <p>Boolean: Represents a logical entity and can have two values: <code>true</code> or <code>false</code>.</p> </li> <li> <p>Undefined: Indicates that a variable has been declared but has not yet been assigned a value.</p> </li> <li> <p>Null: Represents the intentional absence of any object value. It is one of JavaScript's primitive values and is treated as falsy for boolean operations.</p> </li> </ul>"},{"location":"02_js_fundamentals/#note","title":"Note:","text":"<ul> <li>Undefined: <code>undefined</code> means a variable has been declared but has not yet been assigned a value.</li> <li>Null: <code>null</code> is an assignment value. It can be assigned to a variable as a representation of no value.</li> </ul> <p>These are the basic building blocks of data in JavaScript. Understanding and using them appropriately is crucial for effective programming in JavaScript.</p>"},{"location":"02_js_fundamentals/#41-number-type","title":"4.1 Number Type","text":"<p>In JavaScript, the <code>number</code> data type represents both integers and floating-point numbers.</p>"},{"location":"02_js_fundamentals/#characteristics-of-numbers","title":"Characteristics of Numbers","text":"<ul> <li>Positive or Negative Numbers:</li> </ul> <pre><code>let positiveNumber = 4;\nlet negativeNumber = -30;\n</code></pre> <ul> <li>Numbers with or without decimals</li> </ul> <pre><code>let integer = 34;\nlet floatingPoint = 34.4;\nlet zero = 0;\nlet negativeFloat = -9.45;\nlet largeNumber = 150000000;\n</code></pre>"},{"location":"02_js_fundamentals/#arithmetic-operations","title":"Arithmetic Operations","text":"<p>You can perform various arithmetic operations on numbers:</p> <ul> <li>Addition <code>+</code></li> <li>Subtraction <code>-</code></li> <li>Multiplication <code>*</code></li> <li>Division <code>/</code></li> <li>Modulus <code>%</code>: Returns the remainder of a division.</li> <li>Exponentiation <code>**</code>: Raises the first operand to the power of the second operand.</li> <li>Increment <code>++</code>: Increases the value of a variable by 1.</li> <li>Decrement <code>--</code>: Decreases the value of a variable by 1.</li> </ul> <pre><code>let sum = 4 + 5;  // 9\nlet difference = 10 - 3;  // 7\nlet product = 4 * 3;  // 12\nlet quotient = 12 / 4;  // 3\n\nlet power = 2 ** 3;  // 8\n\nlet counter = 0;\ncounter++;  // counter is now 1\n\ncounter--;  // counter is now 0\n</code></pre>"},{"location":"02_js_fundamentals/#comparison-operations","title":"Comparison Operations","text":"<p>You can also compare numbers using various comparison operators:</p> <ul> <li>Less than <code>&lt;</code></li> <li>Greater than <code>&gt;</code></li> <li>Less than or equal to <code>&lt;=</code></li> <li>Greater than or equal to <code>&gt;=</code></li> <li>Equal to <code>==</code></li> <li>Strict equal to <code>===</code></li> <li>Not equal to <code>!=</code></li> <li>Strict not equal to <code>!==</code></li> </ul> <p><pre><code>let isLessThan = 5 &lt; 10;  // true\nlet isGreaterThan = 10 &gt; 5;  // true\nlet isLessThanOrEqualTo = 5 &lt;= 5;  // true\nlet isGreaterThanOrEqualTo = 10 &gt;= 10;  // true\nlet isEqualTo = 5 == '5';  // true (type coercion)\nlet isStrictEqualTo = 5 === 5;  // true\nlet isStrictEqualToDifferentTypes = 5 === '5';  // false (no type coercion)\nlet isNotEqualTo = 5 != '5';  // false (type coercion)\nlet isStrictNotEqualTo = 5 !== '5';  // true (no type coercion)\n</code></pre> --&gt; Equality comparisons and sameness</p>"},{"location":"02_js_fundamentals/#additional-number-methods-in-math-object","title":"Additional Number Methods in Math Object","text":"<p>JavaScript also provides several built-in methods for working with numbers by the Math Object.</p>  Hands-On Exercise <p>In JS there is not an operator to calculate the integer division operation. Can you implement a way to obtain this operation using the operations listed above ?</p> <p>Examples:</p> <ul> <li>10 // 3 = 3</li> <li>13 // -3 = -4</li> </ul>"},{"location":"02_js_fundamentals/#more-about-number","title":"More about number","text":"<ul> <li><code>typeof</code>: Type of the variable</li> <li><code>NaN</code>: Not-a-Number</li> <li><code>isNaN()</code>: Check if value is NaN</li> <li><code>.toString()</code>: Convert number to string</li> <li><code>.toFixed()</code>: Format number to fixed decimal places</li> </ul> <pre><code>// Type of the variable\nlet typeOfNumber = typeof 123;  // 'number'\nlet typeOfString = typeof '123';  // 'string'\n\n// NaN (Not-a-Number)\nlet notANumber = NaN;\nlet isNanCheck1 = isNaN(123);  // false\nlet isNanCheck2 = isNaN(NaN);  // true\nlet isNanCheck3 = isNaN('Hello');  // true\n\n// Convert number to string\nlet numberToString = (123).toString();  // '123'\n\n// Format number to fixed decimal places\nlet fixedDecimal = (123.456).toFixed(2);  // '123.46'\n</code></pre>"},{"location":"02_js_fundamentals/#42-string-type","title":"4.2 String Type","text":"<p>In JavaScript, the <code>string</code> data type is used to represent textual data.</p>"},{"location":"02_js_fundamentals/#characteristics-of-strings","title":"Characteristics of Strings","text":"<ul> <li>Strings: A sequence of characters enclosed in quotes.</li> <li>Double quotes: <code>\"Hello world\"</code></li> <li>Single quotes: <code>'Hello world'</code></li> </ul>"},{"location":"02_js_fundamentals/#operations-with-strings","title":"Operations with Strings","text":"<ul> <li>Concatenation: Combining multiple strings into one.<ul> <li>Example: <code>cadena = 'Hola' + ' mundo'</code> results in <code>'Hola mundo'</code></li> </ul> </li> <li>Comparison Operations: Comparing strings.<ul> <li>Equal to (<code>==</code>)</li> <li>Strict equal to (<code>===</code>)</li> <li>Not equal to (<code>!=</code>)</li> </ul> </li> <li>Other Useful Methods: We can find them in the String Object</li> </ul> <pre><code>// Characteristics of Strings\nlet string1 = \"Hello world\";\nlet string2 = 'Hello world';\n\n// Concatenation\nlet greeting = 'Hola' + ' mundo';  // 'Hola mundo'\n\n// Comparison Operations\nlet isEqual = 'Hello' == 'Hello';  // true\nlet isStrictEqual = 'Hello' === 'Hello';  // true\nlet isStrictEqual2 = '123' === 132;  // false\nlet isNotEqual = 'Hello' != 'World';  // true\n\n// Other useful methods\nlet stringLength = greeting.length;  // 10\nlet upperCase = greeting.toUpperCase();  // 'HOLA MUNDO'\nlet lowerCase = greeting.toLowerCase();  // 'hola mundo'\nlet includesWord = greeting.includes('mundo');  // true\nlet splitString = greeting.split(' ');  // ['Hola', 'mundo']\nlet substring = greeting.substring(1, 4);  // 'ola'  substring(start, end+1)\nlet charAt = greeting.charAt(1);  // 'o'\nlet indexOfChar = greeting.indexOf('m');  // 5\nlet replacedString = greeting.replace('mundo', 'everyone');  // 'Hola everyone'\nlet trimmedString = '   Hola mundo   '.trim();  // 'Hola mundo'\n</code></pre>"},{"location":"02_js_fundamentals/#template-literals","title":"Template literals","text":"<p>Template literals, also known as template strings, are a feature in JavaScript that allows for easier string interpolation and multi-line strings. They are enclosed by backticks (<code>`</code>) instead of single or double quotes.</p> <pre><code>let text = `Hello, world!`;\n</code></pre>"},{"location":"02_js_fundamentals/#features-of-template-literals","title":"Features of Template Literals","text":"<ol> <li>String Interpolation: Embed expressions within a string using the <code>${expression}</code> syntax.</li> </ol> <pre><code>let firstName = \"John\";\nlet lastName = \"Doe\";\nlet age = 30;\nlet introduction = `My name is ${firstName} ${lastName} and I am ${age} years old.`;\n\nlet result = `2 + 2 is ${2 + 2}`;  // \"2 + 2 is 4\"\n</code></pre> <ol> <li>Multi-line Strings: Create strings that span multiple lines.</li> </ol> <pre><code>let address = `1234 Elm Street\nSpringfield, IL\n62704`;\n</code></pre>  Hands-On Exercise: Working with Strings in JavaScript <p>Follow these steps to complete the exercise:</p> <ol> <li>Concatenation and Template Literals:             <ul> <li>Create two string variables, <code>firstName</code> and <code>lastName</code>.</li> <li>Concatenate them using both the <code>+</code> operator and template literals to form a full name.</li> </ul> </li> <li>String Methods:             <ul> <li>Use <code>.toUpperCase()</code> and <code>.toLowerCase()</code> methods to change the case of the full name.</li> <li>Extract a substring from the full name using both <code>substring()</code> and <code>slice()</code>.</li> </ul> </li> <li>String Interpolation:             <ul> <li>Create a multi-line string using template literals that includes the full name and an address.</li> </ul> </li> <li>Splitting and Trimming Strings:             <ul> <li>Create a string that includes a list of comma-separated items.</li> <li>Split the string into an array and trim any extra whitespace from each item.</li> </ul> </li> <li>Checking and Converting:             <ul> <li>Create a variable that includes a number as a string.</li> <li>Check if it is a number using <code>isNaN()</code> and convert it to a number.</li> <li>Use <code>.toString()</code> to convert a number back to a string.</li> <li>Use <code>.toFixed()</code> to format a number to two decimal places.</li> </ul> </li> </ol>"},{"location":"02_js_fundamentals/#43-boolean-type","title":"4.3 Boolean Type","text":"<ul> <li>It only accepts two values: <code>true</code> or <code>false</code></li> <li>It is useful for checking the state of the application</li> <li> <p>It is recommended that its name defines the positive state</p> <ul> <li>Example: <code>userIsLogged</code>, <code>itemFound</code>, <code>errorFound</code> </li> </ul> </li> <li> <p><code>Boolean(value);</code> returns the boolean value of a condition or variable.</p> </li> </ul>"},{"location":"02_js_fundamentals/#boolean","title":"Boolean()","text":"<p><code>Boolean(value);</code> returns the boolean value of a condition or variable.</p>"},{"location":"02_js_fundamentals/#true-vs-false","title":"True vs False","text":"True False 1 0, -0 <code>\"Whatever\"</code> <code>\"\"</code> 3.14 NaN <code>100 &gt; 5</code> null <code>1 &lt; 100</code> undefined <code>'1' == 1</code> <code>'1' === 1</code> <pre><code>// Example 1: Using Boolean() to get the boolean value\nconsole.log(Boolean(1));           // true\nconsole.log(Boolean(0));           // false\nconsole.log(Boolean(\"Whatever\"));  // true\nconsole.log(Boolean(\"\"));          // false\n\n// Example 2: Using expressions\nconsole.log(100 &gt; 5);              // true\nconsole.log(1 &lt; 100);              // true\nconsole.log('1' == 1);             // true\nconsole.log('1' === 1);            // false\n\n// Example 3: Checking for undefined and null\nlet a;\nconsole.log(Boolean(a));           // false\n\nlet b = null;\nconsole.log(Boolean(b));           // false\n\n// Example 4: NaN check\nlet c = NaN;\nconsole.log(Boolean(c));           // false\nconsole.log(isNaN(c));             // true\n\n// Example 5: Combining multiple checks\nlet value = \"Hello\";\nif (value &amp;&amp; typeof value === \"string\") {\n    console.log(\"Value is a non-empty string\"); // This will log\n}\n\nlet number = 0;\nif (!number) {\n    console.log(\"Number is zero or false\"); // This will log\n}\n</code></pre>"},{"location":"02_js_fundamentals/#44-undefined-and-null-types","title":"4.4 Undefined and Null Types","text":"<p>In JavaScript, <code>undefined</code> and <code>null</code> are two distinct types that represent absence of value or non-existence. They are often confused with each other but have different meanings and use cases.</p>"},{"location":"02_js_fundamentals/#undefined","title":"Undefined","text":"<ul> <li>Type: <code>undefined</code></li> <li>Description: A variable that has been declared but has not yet been assigned a value has the value <code>undefined</code>.</li> <li>Example:     <pre><code>let a;\nconsole.log(a); // Output: undefined\n</code></pre></li> </ul>"},{"location":"02_js_fundamentals/#null","title":"Null","text":"<ul> <li>Type: <code>object</code></li> <li>Description: <code>null</code> is an assignment value that can be used to represent no value or no object. It's explicitly set by the programmer to indicate \"no value\".</li> <li>Example:     <pre><code>let b = null;\nconsole.log(b); // Output: null\n</code></pre></li> </ul>"},{"location":"02_js_fundamentals/#key-differences","title":"Key Differences","text":"<ul> <li> <p>Type:</p> <ul> <li><code>undefined</code>: The type of <code>undefined</code> is <code>undefined</code>.</li> <li><code>null</code>: The type of <code>null</code> is <code>object</code> (this is a historical bug in JavaScript, but it remains for backward compatibility).</li> </ul> </li> <li> <p>Default Value:</p> <ul> <li><code>undefined</code> is the default value for uninitialized variables.</li> <li><code>null</code> is an explicit assignment to indicate an empty or non-existent value.</li> </ul> </li> <li> <p>Usage:</p> <ul> <li>Use <code>undefined</code> to check if a variable has been declared but not yet assigned a value.</li> <li>Use <code>null</code> to intentionally signify that a variable should be empty.</li> </ul> </li> </ul>"},{"location":"02_js_fundamentals/#examples","title":"Examples","text":"<pre><code>// Undefined example\nlet x;\nconsole.log(x); // Output: undefined\n\n// Null example\nlet y = null;\nconsole.log(y); // Output: null\n\n// Checking types\nconsole.log(typeof x); // Output: undefined\nconsole.log(typeof y); // Output: object\n</code></pre>"},{"location":"02_js_fundamentals/#5-control-sentences","title":"5. Control Sentences","text":""},{"location":"02_js_fundamentals/#51-conditional-statements","title":"5.1 Conditional Statements","text":""},{"location":"02_js_fundamentals/#ifelse","title":"if...else","text":"<p>Conditional statements allow the execution of specific code blocks based on certain conditions. The most common conditional statements are <code>if</code>, <code>else if</code>, and <code>else</code>.</p> <p>Examples of usage:</p> <pre><code>let number = 10;\n\nif (number &gt; 0) {\n    console.log(\"The number is positive.\");\n} else if (number &lt; 0) {\n    console.log(\"The number is negative.\");\n} else {\n    console.log(\"The number is zero.\");\n}\n</code></pre>"},{"location":"02_js_fundamentals/#switch","title":"switch","text":"<p>A <code>switch</code> statement evaluates a variable or expression and matches its value to one of several possible cases. Each case corresponds to a specific code block that executes when a match is found. If no match is found, an optional <code>default</code> case can execute.</p> <p>Examples of usage:</p>"},{"location":"02_js_fundamentals/#javascript","title":"JavaScript","text":"<pre><code>let fruit = 'apple';\n\nswitch (fruit) {\n    case 'apple':\n        console.log(\"This is an apple.\");\n        break;\n    case 'banana':\n        console.log(\"This is a banana.\");\n        break;\n    case 'orange':\n        console.log(\"This is an orange.\");\n        break;\n    default:\n        console.log(\"Unknown fruit.\");\n}\n</code></pre>"},{"location":"02_js_fundamentals/#conditional-ternary-operator","title":"Conditional (ternary) operator","text":"<p>The conditional ternary operator is a concise way to perform conditional evaluations. It takes three operands: a condition, a result for true, and a result for false. The syntax is:</p> <p><code>condition ? expression_if_true : expression_if_false</code></p> <p>Examples of usage:</p> <pre><code>let age = 18;\nlet canVote = (age &gt;= 18) ? \"Yes, you can vote.\" : \"No, you cannot vote.\";\nconsole.log(canVote);\n</code></pre>"},{"location":"02_js_fundamentals/#52-loops-or-iterations","title":"5.2 Loops or Iterations","text":""},{"location":"02_js_fundamentals/#for-traditional-loop-with-a-counter","title":"for (traditional loop with a counter)","text":"<p>The <code>for</code> loop is a traditional loop that iterates with a counter. It is used to repeat a block of code a certain number of times.</p> <p>Examples of usage:</p> <pre><code>for (let i = 0; i &lt; 5; i++) {\n    console.log(i);\n}\n\n// Counting backwards in 5 units steps\nfor (let i = 50; i &gt;= 0; i -= 5) {\n    console.log(i);\n}\n</code></pre>"},{"location":"02_js_fundamentals/#forin-iterates-over-properties-of-an-object","title":"for..in (iterates over properties of an object)","text":"<p>The <code>for..in</code> loop iterates over the enumerable properties of an object. It is used to traverse object properties.</p> <p>Examples of usage: <pre><code>let person = {name: 'John', age: 30, city: 'New York'};\nfor (let key in person) {\n    console.log(key + ': ' + person[key]);\n}\n</code></pre></p>"},{"location":"02_js_fundamentals/#forof-es6-iterates-over-a-collection-of-objects","title":"for..of (ES6) (iterates over a collection of objects)","text":"<p>The <code>for..of</code> loop, introduced in ES6, iterates over iterable objects such as arrays, strings, and other collections.</p> <p>Examples of usage:</p> <pre><code>let fruits = ['apple', 'banana', 'orange'];\nfor (let fruit of fruits) {\n    console.log(fruit);\n}\n</code></pre>"},{"location":"02_js_fundamentals/#foreach-method-to-iterate-over-a-collection-of-objects","title":"forEach (method to iterate over a collection of objects)","text":"<p>However, in JavaScript, the most common way to iterate over arrays of objects is using the <code>forEach</code> method. This method executes a provided function once for each array element, making it more convenient and readable for such tasks.</p> <pre><code>const users = [\n    { name: 'John', age: 30 },\n    { name: 'Jane', age: 25 },\n    { name: 'Jim', age: 35 }\n];\n\nusers.forEach(user =&gt; {\n    console.log(`${user.name} is ${user.age} years old.`);\n});\n</code></pre>"},{"location":"02_js_fundamentals/#while-traditional-while-loop","title":"while (traditional while loop)","text":"<p>The <code>while</code> loop repeats a block of code as long as a specified condition is true.</p> <pre><code>let i = 0;\nwhile (i &gt; 0.5) {\n    console.log(i);\n    i = Math.rand();\n}\nconsole.log(`Found a rand number greater than 0.5: ${i}`);\n</code></pre>"},{"location":"02_js_fundamentals/#6-native-javascript-objects","title":"6. Native JavaScript Objects","text":"<p>JavaScript provides several built-in objects that allow developers to work with different data types, perform common tasks, manipulate the DOM and handle errors. These objects are part of the JavaScript language and are available globally.</p> <p></p> <p>JavaScript native objects can be categorized into two types based on their usage context and origin:</p>"},{"location":"02_js_fundamentals/#browser-independent-objects-available-also-in-nodejs","title":"Browser-Independent Objects (Available also in Node.js)","text":"<p>These objects are part of the JavaScript language specification and can be used in both browser and server-side environments (like Node.js). They typically start with an uppercase letter:</p> <ul> <li>Math: Provides mathematical constants and functions.</li> <li>Number: Represents numerical values and provides methods for numeric operations.</li> <li>Date: Represents dates and times.</li> <li>Array: Represents a list-like collection of elements.</li> </ul> <p>These objects are implemented as part of the JavaScript language itself and do not rely on the presence of a browser environment.</p>"},{"location":"02_js_fundamentals/#browser-dependent-objects-client-side-environment","title":"Browser-Dependent Objects (Client-Side Environment)","text":"<p>These objects are specific to the browser environment and are not available in server-side JavaScript (Node.js). They typically start with a lowercase letter:</p> <ul> <li>window: Represents the global browser window and acts as the global object in client-side JavaScript.</li> <li>document: Represents the HTML document loaded in the browser window.</li> <li>navigator: Provides information about the client's browser and operating system.</li> <li>localStorage / sessionStorage: Provides storage mechanisms within the browser for persisting data.</li> </ul> <p>These objects interact directly with the browser's Document Object Model (DOM) and are essential for client-side scripting and web application development.</p>"},{"location":"02_js_fundamentals/#usage-contexts","title":"Usage Contexts","text":"<ul> <li>Node.js: Browser-independent objects (e.g., Math, Number, Date) can be used in Node.js applications without any dependency on a browser environment.</li> <li>Browser: Browser-dependent objects (e.g., window, document, navigator) are specific to the client-side environment and require a web browser for execution.</li> </ul> <p>We are going to explain the most useful for us for the scope of this course.</p>"},{"location":"02_js_fundamentals/#61-date-object","title":"6.1 Date Object","text":"<ul> <li>The Date object in JavaScript is used for working with dates and times. </li> <li>It allows you to create and manipulate dates, get and set various date components (like year, month, day, hour, minute, second), and perform operations such as formatting and arithmetic.</li> <li>Internally, the number of milliseconds since 00:00:00 UTC on January 1, 1970, is stored.</li> </ul> <p>Constructor: </p> <pre><code>let currentDate = new Date();               // Current date and hour\nlet specificDate = new Date(1626176282855); // Example with number of millisecons\nlet customDate = new Date(2023, 5, 12, 14, 30, 0, 0); // June 12, 2023, 14:30:00\n</code></pre>"},{"location":"02_js_fundamentals/#getfullyear-getmonth-getdate-getday-gethours-getminutes-getseconds-getmilliseconds-retrieve-various-components-of-the-date","title":"getFullYear(), getMonth(), getDate(), getDay(), getHours(), getMinutes(), getSeconds(), getMilliseconds(): Retrieve various components of the date.","text":"<pre><code>let now = new Date();\nlet year = now.getFullYear();\nlet month = now.getMonth(); // 0-indexed (January is 0)\nlet day = now.getDate();\nlet hours = now.getHours();\nlet minutes = now.getMinutes();\nlet seconds = now.getSeconds();\n</code></pre>"},{"location":"02_js_fundamentals/#setfullyear-setmonth-setdate-sethours-setminutes-setseconds-setmilliseconds-set-various-components-of-the-date","title":"setFullYear(), setMonth(), setDate(), setHours(), setMinutes(), setSeconds(), setMilliseconds(): Set various components of the date.","text":"<pre><code>day = new Date(2000, 0, 1); // January 1, 2000\nbirthday.setFullYear(2001); // Change year to 2001\n</code></pre>"},{"location":"02_js_fundamentals/#todatestring-toisostring-tolocaledatestring-tolocaletimestring-convert-date-objects-to-different-string-representations","title":"toDateString(), toISOString(), toLocaleDateString(), toLocaleTimeString(): Convert date objects to different string representations.","text":"<pre><code>let today = new Date();\nlet dateString = today.toDateString(); // \"Tue Jul 13 2024\"\nlet isoString = today.toISOString(); // \"2024-07-13T12:30:00.000Z\"\nlet localeDateString = today.toLocaleDateString(); // Depends on locale\n</code></pre>"},{"location":"02_js_fundamentals/#working-with-dates","title":"Working with dates","text":"<p>Here's an example that demonstrates creating a <code>Date</code> object, accessing its components, and formatting its output:</p> <pre><code>let now = new Date();\n\nlet year = now.getFullYear();\nlet month = now.getMonth(); // 0-indexed (July is 6)\nlet day = now.getDate();\nlet hours = now.getHours();\nlet minutes = now.getMinutes();\nlet seconds = now.getSeconds();\n\nconsole.log(`Current date and time: ${day}/${month + 1}/${year} ${hours}:${minutes}:${seconds}`);\n</code></pre> <p>Here's the example in JavaScript comparing two dates:</p> <pre><code>// Create two dates\nlet date1 = new Date('2023-07-13');\nlet date2 = new Date('2023-07-14');\n\n// Compare the dates\nif (date1 &lt; date2) {\n    console.log(`${date1.toDateString()} is before ${date2.toDateString()}`);\n} else if (date1 &gt; date2) {\n    console.log(`${date1.toDateString()} is after ${date2.toDateString()}`);\n} else {\n    console.log(`${date1.toDateString()} and ${date2.toDateString()} are equal`);\n}\n</code></pre>"},{"location":"02_js_fundamentals/#62-math-object","title":"6.2 Math Object","text":"<p>The Math object in JavaScript provides mathematical constants and functions, allowing you to perform mathematical tasks without explicitly creating a Math object instance. It includes methods for rounding, trigonometry, logarithms, exponentiation, some constants as PI number, and more.</p> <ul> <li><code>Math.abs()</code>: Absolute value</li> <li><code>Math.ceil()</code>: Round up</li> <li><code>Math.floor()</code>: Round down</li> <li><code>Math.round()</code>: Round to nearest integer</li> <li><code>Math.max()</code>: Maximum value</li> <li><code>Math.min()</code>: Minimum value</li> <li><code>Math.random()</code>: Random number between 0 and 1</li> <li><code>Math.sqrt()</code>: Square root</li> <li><code>Math.PI</code>: PI number</li> </ul> <pre><code>let absoluteValue = Math.abs(-5);  // 5\nlet roundedUp = Math.ceil(4.2);  // 5\nlet roundedDown = Math.floor(4.8);  // 4\nlet rounded = Math.round(4.5);  // 5\nlet roundedDownExample = Math.round(4.4);  // 4\nlet max = Math.max(1, 2, 3);  // 3\nlet min = Math.min(1, 2, 3);  // 1\nlet random = Math.random();  // e.g., 0.543\nlet squareRoot = Math.sqrt(16);  // 4\n\n// Also Math object contains some useful constants as PI or E number\nlet piNumber = Math.PI;  // 3.1415......\n</code></pre>"},{"location":"02_js_fundamentals/#64-string-object","title":"6.4 String Object","text":"<p>The String object is a wrapper around JavaScript's primitive string data type. It provides various methods and properties to work with strings effectively.</p>"},{"location":"02_js_fundamentals/#creating-string-objects","title":"Creating String Objects","text":"<p>In JavaScript, you can create a string primitive directly or use the String object constructor to create a String object:</p> <pre><code>// String primitive\nlet message = 'Hello, World!';\n\n// Using String object constructor\nlet anotherMessage = new String('Hello, World!');\n</code></pre>"},{"location":"02_js_fundamentals/#useful-methods-and-properties","title":"Useful Methods and properties","text":"<ul> <li><code>length</code>: Returns the length of the string.</li> <li><code>charAt(index)</code>: Returns the character at the specified index.</li> <li><code>concat(str1, str2, ...)</code>: Concatenates one or more strings to the end of the calling string and returns a new string.</li> <li><code>toUpperCase()</code>: Converts all characters to uppercase.</li> <li><code>toLowerCase()</code>: Converts all characters to lowercase.</li> <li><code>indexOf(searchValue, startIndex)</code>: Returns the index of the first occurrence of <code>searchValue</code> in the string, starting the search at <code>startIndex</code>.</li> <li><code>substring(startIndex, endIndex)</code>: Returns a new substring from <code>startIndex</code> to <code>endIndex</code> (excluding <code>endIndex</code>).</li> <li><code>slice(startIndex, endIndex)</code>: Extracts a section of the string and returns it as a new string.</li> <li><code>split(separator)</code>: Splits the string into an array of substrings based on a specified <code>separator</code>.</li> </ul> <p>Examples of use:</p> <p>Those methods already have been used in the String Primitive Data Type</p>"},{"location":"02_js_fundamentals/#65-browser-interaction-objects","title":"6.5 Browser Interaction Objects","text":"<p>In addition to those presented earlier, there are other types of objects that allow manipulation of browser-specific features:</p> <ul> <li>navigator: Provides information about the client's browser and operating system.</li> <li>screen: Represents the properties of the user's screen.</li> <li>window: Represents the global browser window and acts as the global object in client-side JavaScript.</li> <li>document: Represents the HTML document loaded in the browser window.</li> <li>history: Provides the browser's session history (pages visited in the current tab/window).</li> </ul>"},{"location":"02_js_fundamentals/#navigator","title":"navigator","text":"<p>To identify the characteristics of the platform where a web application is running, you can use properties and methods provided by the <code>navigator</code> object in JavaScript:</p> <ol> <li> <p>Type of Browser and Version:</p> <ul> <li>Use <code>navigator.userAgent</code> to obtain the User-Agent string, which includes information about the browser type and version.</li> </ul> </li> <li> <p>Operating System:</p> <ul> <li>Use <code>navigator.platform</code> to retrieve the platform on which the browser is executing (e.g., \"Win32\", \"Linux x86_64\", \"MacIntel\").</li> </ul> </li> <li> <p>Geolocation:</p> <ul> <li>Utilize the Geolocation API to request and obtain the device's current geographical location, provided the user grants permission.</li> </ul> </li> </ol> <p>Example JavaScript code: <pre><code>// User Agent\nlet browserInfo = navigator.userAgent;\nconsole.log(`User-Agent: ${browserInfo}`);\n\n// Platform Info\nlet platformInfo = navigator.platform;\nconsole.log(`Platform: ${platformInfo}`);\n\n// Geolocation\nif ('geolocation' in navigator) {\n    navigator.geolocation.getCurrentPosition(position =&gt; {\n      console.log('Latitude:', position.coords.latitude);\n      console.log('Longitude:', position.coords.longitude);\n    }, error =&gt; {\n        console.error('Error getting geolocation:', error);\n    });\n} else {\n    console.error('Geolocation is not supported by this browser.');\n}\n</code></pre></p>"},{"location":"02_js_fundamentals/#screen","title":"screen","text":"<p>The <code>screen</code> object in JavaScript represents the user's screen and provides read-only properties to retrieve information about its characteristics.</p>"},{"location":"02_js_fundamentals/#properties-of-the-screen-object","title":"Properties of the <code>screen</code> Object","text":"<ul> <li><code>screen.width</code>: Returns the width of the user's screen in pixels.</li> <li><code>screen.height</code>: Returns the height of the user's screen in pixels.</li> <li><code>screen.availWidth</code>: Returns the available width of the user's screen (excluding operating system taskbars, etc.) in pixels.</li> <li><code>screen.availHeight</code>: Returns the available height of the user's screen (excluding operating system taskbars, etc.) in pixels.</li> <li><code>screen.colorDepth</code>: Returns the bit depth of the color palette for displaying images on the user's screen.</li> <li><code>screen.pixelDepth</code>: Returns the bit depth of the pixel buffer of the user's screen.</li> </ul> <p>These properties allow web applications to adapt their content or behavior based on the user's screen dimensions and capabilities, enhancing the user experience.</p> <p>Here's a simple example demonstrating how to access and use some of these properties in JavaScript:</p> <pre><code>console.log(`Screen width: ${screen.width}px`);\nconsole.log(`Screen height: ${screen.height}px`);\nconsole.log(`Available screen width: ${screen.availWidth}px`);\nconsole.log(`Available screen height: ${screen.availHeight}px`);\nconsole.log(`Color depth: ${screen.colorDepth} bits`);\nconsole.log(`Pixel depth: ${screen.pixelDepth} bits`);\n</code></pre>"},{"location":"02_js_fundamentals/#window","title":"window","text":"<p>The <code>window</code> object is considered one of the most important objects in JavaScript for several reasons:</p> <ul> <li> <p>Window Management: It allows for managing browser windows and provides methods to manipulate and interact with them.</p> </li> <li> <p>Implicit Object: The <code>window</code> object is implicit, meaning you don't need to explicitly reference it to access objects and properties nested within its hierarchy. For example, <code>window.document</code> directly refers to the <code>document</code> object without explicitly stating <code>window</code>.</p> </li> </ul>"},{"location":"02_js_fundamentals/#document","title":"document","text":"<p>The <code>document</code> object in JavaScript represents the current web page loaded in the browser window. It provides access to the DOM (Document Object Model) of the page, allowing developers to manipulate its content, structure, and styles dynamically.</p>"},{"location":"02_js_fundamentals/#key-features-of-the-document-object","title":"Key Features of the <code>document</code> Object:","text":"<ul> <li> <p>DOM Manipulation: Developers can access and modify elements within the web page using methods like <code>getElementById</code>, <code>querySelector</code>, and properties like <code>textContent</code>, <code>innerHTML</code>.</p> </li> <li> <p>Event Handling: Enables attaching event listeners to elements and responding to user interactions or other events on the page.</p> </li> <li> <p>Dynamic Updates: Allows scripts to dynamically update the content of the page based on user input, server responses, or other conditions.</p> </li> </ul>"},{"location":"02_js_fundamentals/#example-of-dom-manipulation","title":"Example of DOM Manipulation:","text":"<pre><code>// Accessing an element by its ID and changing its content\nconst headerElement = document.getElementById('header');\nheaderElement.textContent = 'Welcome to our Website!';\n</code></pre>"},{"location":"02_js_fundamentals/#history","title":"history","text":"<p>In JavaScript, the <code>history</code> object provides methods and properties to navigate through the user's browsing history. It allows storing references to visited web pages and facilitates navigation between them using a list-like structure.</p>"},{"location":"02_js_fundamentals/#key-features-of-the-history-object","title":"Key Features of the <code>history</code> Object:","text":"<ul> <li> <p><code>history.length</code>: Returns the number of entries in the browsing history stack.</p> </li> <li> <p><code>history.back()</code>: Moves back one page in the session history. Equivalent to clicking the browser's back button.</p> </li> <li> <p><code>history.forward()</code>: Moves forward one page in the session history. Equivalent to clicking the browser's forward button.</p> </li> <li> <p><code>history.go(n)</code>: Loads a specific page from the session history, where <code>n</code> can be a positive or negative integer. Negative values move backwards, and positive values move forwards.</p> </li> </ul>"},{"location":"02_js_fundamentals/#example-usage","title":"Example Usage:","text":"<pre><code>// Navigating back and forward in history\nfunction goBack() {\n    window.history.back();\n}\n\nfunction goForward() {\n    window.history.forward();\n}\n\n// Accessing the length of the history stack\nlet historyLength = window.history.length;\nconsole.log(`Number of pages in history: ${historyLength}`);\n</code></pre>"},{"location":"02_js_fundamentals/#7-functions","title":"7. Functions","text":"<p>A function in programming is a reusable block of code that performs a specific task. It can take inputs, process them, and return an output. Functions are fundamental building blocks in programming, allowing for modular, readable, and maintainable code.</p>"},{"location":"02_js_fundamentals/#key-characteristics-of-functions","title":"Key Characteristics of Functions:","text":"<ol> <li>Modularity: Functions allow code to be divided into smaller, manageable pieces, each performing a specific task.</li> <li>Reusability: Once defined, a function can be called multiple times within a program, reducing redundancy.</li> <li>Abstraction: Functions enable the encapsulation of complex operations, hiding the details and exposing only necessary interfaces.</li> <li>Maintainability: Functions make it easier to update and manage code. Changes made within a function do not affect other parts of the code that rely on it.</li> </ol>"},{"location":"02_js_fundamentals/#basic-structure-of-a-function","title":"Basic Structure of a Function:","text":"<ol> <li>Function Declaration: Defines the function and specifies its name, parameters, and body.</li> <li>Function Call: Executes the function by referencing its name and passing any required arguments. Optionally we can save the value that is returned by the function. </li> </ol>"},{"location":"02_js_fundamentals/#example-in-javascript","title":"Example in JavaScript:","text":"<p>Note that in Javascript we don't declare the type of the parameters and the return.</p> <pre><code>// Function Declaration\nfunction greet(name) {\n    return `Hello, ${name}!`;\n}\n\n// Function Call\nlet message = greet('Alice');\nconsole.log(message); // Output: Hello, Alice!\n</code></pre>"},{"location":"02_js_fundamentals/#71-global-functions-in-javascript","title":"7.1 Global Functions in JavaScript","text":"<p>Global functions in JavaScript are built-in functions that are part of the global object and can be called from anywhere in your code. They are available in both the browser and Node.js environments. Here are some of the most commonly used global functions:</p> <ol> <li> <p><code>parseInt(string, radix)</code></p> <ul> <li>Parses a string and returns an integer of the specified radix (base).</li> <li>Example:  <pre><code>let num = parseInt(\"10\", 10); // 10\n</code></pre></li> </ul> </li> <li> <p><code>parseFloat(string)</code></p> <ul> <li>Parses a string and returns a floating-point number.</li> <li>Example:     <pre><code>let num = parseFloat(\"10.5\"); // 10.5\n</code></pre></li> </ul> </li> <li> <p><code>isNaN(value)</code></p> <ul> <li>Determines whether a value is NaN (Not-a-Number).</li> <li>Example:     <pre><code>let result = isNaN(\"hello\"); // true\n</code></pre></li> </ul> </li> <li> <p><code>isFinite(value)</code></p> <ul> <li>Determines whether a value is a finite number.</li> <li>Example:     <pre><code>let result = isFinite(10); // true\nlet result2 = isFinite(Infinity); // false\n</code></pre></li> </ul> </li> <li> <p><code>eval(string)</code></p> <ul> <li>Evaluates JavaScript code represented as a string.</li> <li>Example:     <pre><code>let result = eval(\"2 + 2\"); // 4\n</code></pre></li> </ul> </li> <li> <p><code>encodeURI(uri)</code></p> <ul> <li>Encodes a Uniform Resource Identifier (URI) by escaping certain characters.</li> <li>Example:     <pre><code>let uri = \"https://www.example.com?name=John Doe\";\nlet encodedURI = encodeURI(uri); // \"https://www.example.com?name=John%20Doe\"\n</code></pre></li> </ul> </li> <li> <p><code>encodeURIComponent(uriComponent)</code></p> <ul> <li>Encodes a URI component by escaping certain characters.</li> <li>Example:     <pre><code>let uriComponent = \"John Doe &amp; Co\";\nlet encodedURIComponent = encodeURIComponent(uriComponent); // \"John%20Doe%20%26%20Co\"\n</code></pre></li> </ul> </li> <li> <p><code>decodeURI(encodedURI)</code></p> <ul> <li>Decodes a Uniform Resource Identifier (URI) created by <code>encodeURI</code>.</li> <li>Example:     <pre><code>let encodedURI = \"https://www.example.com?name=John%20Doe\";\nlet decodedURI = decodeURI(encodedURI); // \"https://www.example.com?name=John Doe\"\n</code></pre></li> </ul> </li> <li> <p><code>decodeURIComponent(encodedURIComponent)</code></p> <ul> <li>Decodes a URI component created by <code>encodeURIComponent</code>.</li> <li>Example:     <pre><code>let encodedURIComponent = \"John%20Doe%20%26%20Co\";\nlet decodedURIComponent = decodeURIComponent(encodedURIComponent); // \"John Doe &amp; Co\"\n</code></pre></li> </ul> </li> <li> <p><code>setTimeout(function, delay)</code></p> <ul> <li>Calls a function or evaluates an expression after a specified number of milliseconds.</li> <li>Example:       <pre><code>setTimeout(function() {\n    console.log(\"Hello after 2 seconds\");\n}, 2000);\n</code></pre></li> </ul> </li> <li> <p><code>setInterval(function, delay)</code></p> <ul> <li>Repeatedly calls a function or evaluates an expression at specified intervals (in milliseconds).</li> <li>Example:       <pre><code>setInterval(function() {\n    console.log(\"Hello every 2 seconds\");\n}, 2000);\n</code></pre></li> </ul> </li> <li> <p><code>clearTimeout(timeoutID)</code></p> <ul> <li>Clears a timer set with <code>setTimeout</code>.</li> <li>Example:       <pre><code>let timeoutID = setTimeout(function() {\n    console.log(\"This won't run\");\n}, 2000);\nclearTimeout(timeoutID);\n</code></pre></li> </ul> </li> <li> <p><code>clearInterval(intervalID)</code></p> <ul> <li>Clears a timer set with <code>setInterval</code>.</li> <li>Example:       <pre><code>let intervalID = setInterval(function() {\n    console.log(\"This won't run repeatedly\");\n}, 2000);\nclearInterval(intervalID);\n</code></pre></li> </ul> </li> </ol>"},{"location":"02_js_fundamentals/#72-declaring-user-functions","title":"7.2 Declaring User Functions","text":"<p>It is possible to create custom functions in JavaScript, different from the predefined functions provided by the language. There are two types of function declarations:</p> <ol> <li>Classical Function Declaration using the <code>function</code> Keyword</li> <li>Function by Expression (Lambda)</li> <li>Arrow Functions (introduced in ES6)</li> </ol>"},{"location":"02_js_fundamentals/#classical-function-declaration","title":"Classical Function Declaration","text":"<p>The classical way to define a function in JavaScript is by using the <code>function</code> keyword. This method allows you to create named or anonymous functions.</p> <p>Example:</p> <pre><code>// Named function\nfunction add(a, b) {\n    return a + b;\n}\n\n// Function call\nlet result = add(2, 3);\nconsole.log(result); // Output: 5\n</code></pre>"},{"location":"02_js_fundamentals/#function-by-expression-and-lambda-function","title":"Function by Expression and Lambda function.","text":"<p>You can asign a function to a variable by a expression.</p> <p>We can assing or pass as a parameter an anonymous function. We call this a Lambda function.</p> <pre><code>// 1. Function by expression\nconst multiply = function multiplication(a, b) {\n    return a * b;\n};\n\n// Calling the function\nlet result = multiply(5, 3);\nconsole.log(result); // Output: 15\n\n// 2. Lambda or anonymous function by expression\n// this second options has more sense\nconst divide = function (a,b) {\n    return a / b;\n}\n\n// We call exactly the same\nlet resultDiv = divide(15, 3);\nconsole.log(resultDiv); // Output: 5\n</code></pre>"},{"location":"02_js_fundamentals/#arrow-functions-lambda","title":"Arrow Functions (Lambda)Instructions:Example Usage:Hints:","text":"<p>Arrow functions provide a more concise syntax to write functions in JavaScript. They are anonymous (also called Lambda) and are often used in place of function expressions.</p> <pre><code>// Traditional Function\nconst f1 = function (a) {\n  return a + 100;\n}\n\n// Breakdown of the Arrow Function\n\n// 1. Remove the \"function\" keyword and place the arrow between the argument and the opening brace.\nconst f2 = (a) =&gt; {\n  return a + 100;\n}\n\n// 2. Remove the braces of the body and the \"return\" keyword \u2014 the return is implicit.\nconst f3 = (a) =&gt; a + 100;\n\n// 3. Omit the parentheses around the argument\nconst f4 = a =&gt; a + 100;\n</code></pre>  Hands-On Exercise: Calculate Days Between Two Dates <p>Write a JavaScript function that calculates the number of days between two given dates.</p> <ol> <li>Create a function <code>calculateDaysBetweenDates(date1, date2)</code> that takes two date strings as input.</li> <li>Parse the date strings into <code>Date</code> objects.</li> <li>Calculate the difference in milliseconds between the two dates.</li> <li>Convert the difference in milliseconds to days.</li> <li>Return the number of days between the two dates.</li> </ol> <pre><code>let date1 = \"2024-07-01\";\nlet date2 = \"2024-07-13\";\nlet daysBetween = calculateDaysBetweenDates(date1, date2);\nconsole.log(`There are ${daysBetween} days between ${date1} and ${date2}.`); // Output: There are 12 days between 2024-07-01 and 2024-07-13.</code></pre> <ul> <li>Use <code>new Date(dateString)</code> to create <code>Date</code> objects from the date strings.</li> <li>Subtract the earlier date from the later date to get the difference in milliseconds.</li> <li>There are <code>1000 * 60 * 60 * 24</code> milliseconds in a day.</li> </ul>"},{"location":"02_js_fundamentals/#73-callback-functions","title":"7.3 Callback Functions","text":"<p>At a high level, a callback is when a function B is passed as a parameter to another function A. This allows function A to invoke (or \"call back\") function B at a later time, typically in response to some event or condition.</p>"},{"location":"02_js_fundamentals/#key-points","title":"Key Points:","text":"<ul> <li>Flexibility: Callbacks provide a way to specify custom behavior that should be executed when an action is completed or an event occurs.</li> <li>Asynchronous Operations: They are commonly used in asynchronous programming to handle operations that take time to complete, such as fetching data from a server.</li> <li>External Definition: Callback functions are defined outside of the function that uses them, allowing for modular and reusable code.</li> </ul>"},{"location":"02_js_fundamentals/#example-concept","title":"Example Concept:","text":"<pre><code>// Function A takes function B as a callback parameter\nfunction A(callback) {\n    // Function A's logic\n    console.log(\"Inside function A\");\n\n    // Invoke the callback function B\n    callback();\n}\n\n// Function B (callback function)\nfunction B() {\n    console.log(\"Callback function B executed\");\n}\n\n// Call function A and pass function B as a callback\nA(B);\n</code></pre>"},{"location":"02_js_fundamentals/#ad-hoc-callback-functions","title":"Ad-hoc callback functions","text":"<p>In JavaScript, ad-hoc callback functions are functions that are defined inline at the moment they are passed as arguments to another function. The <code>forEach</code> method is a good example where ad-hoc callbacks are frequently used to iterate over arrays.</p>"},{"location":"02_js_fundamentals/#example-using-foreach","title":"Example Using <code>forEach</code>:","text":"<pre><code>// Array of numbers\nconst numbers = [1, 2, 3, 4, 5];\n\n// Using forEach with an ad-hoc callback function\nnumbers.forEach(function(item) {\n    console.log(item); // Show each number\n});\n\n\n// Using forEach with an ad-hoc callback arrow function\nnumbers.forEach( item =&gt; {\n    console.log(item * 2); // Show each number multiplied by 2\n});\n</code></pre>"},{"location":"03_objects_arrays/","title":"UNIT3 - Arrays, Objects, and Classes","text":""},{"location":"03_objects_arrays/#1-arrays","title":"1. Arrays","text":"<p>An Array is an ordered set of related values. Each of these values is called an element, and each element has an index indicating its numerical position in the Array. You must declare an Array before you can use it.</p>"},{"location":"03_objects_arrays/#key-points","title":"Key Points:","text":"<ul> <li>Elements: The individual values in an array.</li> <li>Indexes: Numerical positions of the elements, starting from 0.</li> <li>Declaration: Arrays must be declared before use.</li> </ul>"},{"location":"03_objects_arrays/#11-declaring-an-array","title":"1.1 Declaring an Array","text":"<p>In JavaScript, there are two main ways to create arrays:</p> <ol> <li>Using the <code>Array</code> constructor.</li> <li>Using array literal notation to define the array and its items.</li> </ol>"},{"location":"03_objects_arrays/#1-using-the-array-constructor","title":"1. Using the <code>Array</code> constructor","text":"<pre><code>const a1 = new Array(); // New empty array\nconsole.log(a1.length);\n\nconst a2 = new Array(4); // New array with 4 elements\n\n// New array with 3 defined elements\nconst artist = new Array('Michael Jackson', 'Taylor Swift', 'David Bowie');\n\n// Fill a1 new array with random values\nfor (let i =0; i&lt;10; i++){\n  a1[i] = Math.random();\n}\n\n// Showing length and array\nconsole.log(a1.length)\nconsole.log(a2.length)\nconsole.log(artist.length)\nconsole.log(a1)\nconsole.log(a2)\nconsole.log(artist)\n</code></pre>"},{"location":"03_objects_arrays/#2-using-array-literal-notation","title":"2. Using array literal notation","text":"<pre><code>const artist2 = ['Michael Jackson', 'Taylor Swift', 'David Bowie'];\n\n// Showing length, array, and first item:\nconsole.log(artist2.length)\nconsole.log(artist2)\nconsole.log(artist2[0])\n</code></pre>"},{"location":"03_objects_arrays/#12-accessing-items-in-the-array","title":"1.2 Accessing Items in the Array","text":"<p>You can access items in an array using their index. Array indexes start at 0, so the first element is at index 0, the second element is at index 1, and so on.</p>"},{"location":"03_objects_arrays/#example-of-accessing-items","title":"Example of Accessing Items:","text":"<pre><code>// Declare an array\nconst colors = [\"Red\", \"Green\", \"Blue\", \"Yellow\"];\n\n// Access elements by index\nconsole.log(colors[0]); // Output: Red\nconsole.log(colors[1]); // Output: Green\nconsole.log(colors[2]); // Output: Blue\nconsole.log(colors[3]); // Output: Yellow\n\n// Access the last element using the length property\nconsole.log(colors[colors.length - 1]); // Output: Yellow\n\n// Modify an element by index\ncolors[1] = \"Purple\";\nconsole.log(colors); // Output: [\"Red\", \"Purple\", \"Blue\", \"Yellow\"]\n\n// Loop through the array to access each element\ncolors.forEach(function(color, index) {\n    console.log(index + \": \" + color);\n});\n// Output:\n// 0: Red\n// 1: Purple\n// 2: Blue\n// 3: Yellow\n</code></pre>"},{"location":"03_objects_arrays/#13-ways-to-iterate-over-an-array","title":"1.3 Ways to Iterate Over an Array","text":"<p>In JavaScript, there are several ways to iterate over an array. Here are some of the most common methods:</p> <ol> <li>Traditional <code>for</code> Loop</li> <li><code>for...of</code> Loop</li> <li><code>for...in</code> Loop</li> <li><code>forEach</code> Method</li> </ol>"},{"location":"03_objects_arrays/#1-traditional-for-loop","title":"1. Traditional <code>for</code> Loop","text":"<p>The traditional <code>for</code> loop is the most basic and flexible way to iterate over an array.</p> <pre><code>const fruits = [\"Apple\", \"Banana\", \"Cherry\", \"Date\"];\n\nfor (let i = 0; i &lt; fruits.length; i++) {\n    console.log(fruits[i]);\n}\n// Output:\n// Apple\n// Banana\n// Cherry\n// Date\n</code></pre>"},{"location":"03_objects_arrays/#2-forof-loop","title":"2. <code>for...of</code> Loop","text":"<p>The for...of loop is used to iterate over the values of an array. <pre><code>for (const fruit of fruits) {\n    console.log(fruit);\n}\n// Output:\n// Apple\n// Banana\n// Cherry\n// Date\n</code></pre></p>"},{"location":"03_objects_arrays/#3-forin-loop","title":"3. <code>for...in</code> Loop","text":"<p>The for...in loop is used to iterate over the enumerable properties of an object, but it can also be used to iterate over the indices of an array (not recommended for arrays).</p> <pre><code>for (const index in fruits) {\n    console.log(fruits[index]);\n}\n// Output:\n// Apple\n// Banana\n// Cherry\n// Date\n</code></pre>"},{"location":"03_objects_arrays/#4-foreach-method","title":"4. <code>forEach</code> Method","text":"<p>The forEach method executes a provided callback function once for each array element.</p> <p>This is the most used method to iterate over arrays.</p> <pre><code>fruits.forEach((fruit, index) =&gt; {\n    console.log(index + \": \" + fruit);\n});\n// Output:\n// 0: Apple\n// 1: Banana\n// 2: Cherry\n// 3: Date\n</code></pre>"},{"location":"03_objects_arrays/#14-array-properties","title":"1.4 Array Properties","text":"<p>Arrays in JavaScript come with several built-in properties that provide useful information and functionality. Here are two of the most important properties:</p>"},{"location":"03_objects_arrays/#1-length","title":"1. <code>length</code>","text":"<p>The <code>length</code> property of an array returns the number of elements in the array.</p> <pre><code>const fruits = [\"Apple\", \"Banana\", \"Cherry\"];\nconsole.log(fruits.length); // Output: 3\n</code></pre>"},{"location":"03_objects_arrays/#2-prototype","title":"2. <code>prototype</code>","text":"<p>The <code>prototype</code> property allows you to add new properties and methods to all array objects.</p> <pre><code>Array.prototype.first = function() {\n    return this[0];\n};\n\nconsole.log(fruits.first()); // Output: Apple\n</code></pre>"},{"location":"03_objects_arrays/#15-array-important-methods","title":"1.5 Array Important Methods","text":"<p>JavaScript arrays come with a variety of built-in methods that provide powerful functionalities for manipulating and interacting with array elements. Here are some of the most important methods:</p> <ol> <li><code>push</code></li> <li><code>pop</code></li> <li><code>shift</code></li> <li><code>unshift</code></li> <li><code>concat</code></li> <li><code>slice</code></li> <li><code>splice</code></li> <li><code>indexOf</code></li> <li><code>includes</code></li> <li><code>forEach</code></li> <li><code>map</code></li> <li><code>filter</code></li> <li><code>reduce</code></li> </ol>"},{"location":"03_objects_arrays/#1-push","title":"1. <code>push</code>","text":"<p>Adds one or more elements to the end of an array and returns the new length of the array.</p> <pre><code>const fruits = [\"Apple\", \"Banana\"];\nfruits.push(\"Cherry\");\nconsole.log(fruits); // Output: [\"Apple\", \"Banana\", \"Cherry\"]\n</code></pre>"},{"location":"03_objects_arrays/#2-pop","title":"2. <code>pop</code>","text":"<p>Removes the last element from an array and returns that element.</p> <pre><code>const lastFruit = fruits.pop();\nconsole.log(lastFruit); // Output: Cherry\nconsole.log(fruits); // Output: [\"Apple\", \"Banana\"]\n</code></pre>"},{"location":"03_objects_arrays/#3-shift","title":"3. <code>shift</code>","text":"<p>Removes the first element from an array and returns that element.</p> <pre><code>const firstFruit = fruits.shift();\nconsole.log(firstFruit); // Output: Apple\nconsole.log(fruits); // Output: [\"Banana\"]\n</code></pre>"},{"location":"03_objects_arrays/#4-unshift","title":"4. <code>unshift</code>","text":"<p>Adds one or more elements to the beginning of an array and returns the new length of the array.</p> <pre><code>fruits.unshift(\"Apple\");\nconsole.log(fruits); // Output: [\"Apple\", \"Banana\"]\n</code></pre>"},{"location":"03_objects_arrays/#5-concat","title":"5. <code>concat</code>","text":"<p>Merges two or more arrays and returns a new array.</p> <pre><code>const moreFruits = [\"Cherry\", \"Date\"];\nconst allFruits = fruits.concat(moreFruits);\nconsole.log(allFruits); // Output: [\"Apple\", \"Banana\", \"Cherry\", \"Date\"]\n</code></pre>"},{"location":"03_objects_arrays/#6-slice","title":"6. <code>slice</code>","text":"<p>Returns a shallow copy of a portion of an array into a new array object. </p> <p><pre><code>const someFruits = allFruits.slice(1, 3);\nconsole.log(someFruits); // Output: [\"Banana\", \"Cherry\"]\n</code></pre> The last index is not included. In the example we take from index 1 to index 3 (not included).</p>"},{"location":"03_objects_arrays/#7-splice","title":"7. <code>splice</code>","text":"<p>Changes the contents of an array by removing or replacing existing elements and/or adding new elements.</p> <pre><code>allFruits.splice(2, 1, \"Blueberry\");\nconsole.log(allFruits); // Output: [\"Apple\", \"Banana\", \"Blueberry\", \"Date\"]\n</code></pre>"},{"location":"03_objects_arrays/#8-indexof","title":"8. <code>indexOf</code>","text":"<p>Returns the first index at which a given element can be found in the array, or -1 if it is not present.</p> <pre><code>const index = allFruits.indexOf(\"Banana\");\nconsole.log(index); // Output: 1\n</code></pre>"},{"location":"03_objects_arrays/#9-includes","title":"9. <code>includes</code>","text":"<p>Determines whether an array includes a certain element, returning true or false.</p> <pre><code>const hasBanana = allFruits.includes(\"Banana\");\nconsole.log(hasBanana); // Output: true\n</code></pre>"},{"location":"03_objects_arrays/#10-foreach","title":"10. <code>forEach</code>","text":"<p>Executes a provided function once for each array element.</p> <pre><code>allFruits.forEach(function(fruit, index) {\n    console.log(index + \": \" + fruit);\n});\n// Output:\n// 0: Apple\n// 1: Banana\n// 2: Blueberry\n// 3: Date\n</code></pre>"},{"location":"03_objects_arrays/#11-map","title":"11. <code>map</code>","text":"<p>Creates a new array with the results of calling a provided function on every element in the calling array.</p> <pre><code>const upperCaseFruits = allFruits.map(function(fruit) {\n    return fruit.toUpperCase();\n});\nconsole.log(upperCaseFruits); // Output: [\"APPLE\", \"BANANA\", \"BLUEBERRY\", \"DATE\"]\n</code></pre>"},{"location":"03_objects_arrays/#12-filter","title":"12. <code>filter</code>","text":"<p>Creates a new array with all elements that pass the test implemented by the provided function.</p> <pre><code>const longNamedFruits = allFruits.filter(function(fruit) {\n    return fruit.length &gt; 5;\n});\nconsole.log(longNamedFruits); // Output: [\"Blueberry\"]\n</code></pre>"},{"location":"03_objects_arrays/#13-reduce","title":"13. <code>reduce</code>","text":"<p>Executes a reducer function on each element of the array, resulting in a single output value.</p> <pre><code>const totalLength = allFruits.reduce(function(accumulator, fruit) {\n    return accumulator + fruit.length;\n}, 0);\nconsole.log(totalLength); // Output: 26\n</code></pre>  Hands-On Exercise: Array Manipulation with `map` <p>Create a web page that calculates the square of each number in an array and displays the results.</p>"},{"location":"03_objects_arrays/#2-objects","title":"2. Objects","text":"<p>JavaScript is designed on a simple object-based paradigm. An object is a collection of properties, where a property is an association between a name (or key) and a value. </p> <p>The value of a property can be a function, in which case the property is known as a method. </p> <p>In addition to the objects that are predefined in the browser, you can define your own objects.</p> <p>Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_objects</p>"},{"location":"03_objects_arrays/#key-points_1","title":"Key Points:","text":"<ul> <li>Properties: Associations between a name (key) and a value.</li> <li>Methods: Functions that are properties of objects.</li> <li>Custom Objects: User-defined objects in addition to browser-defined objects.</li> </ul>"},{"location":"03_objects_arrays/#21-declaring-objects","title":"2.1 Declaring Objects","text":"<p>In JavaScript, there are two main ways to create objects:</p> <ol> <li>Using the <code>Object</code> constructor and then adding properties.</li> <li>Using object literal notation to define the object and its properties directly.</li> </ol>"},{"location":"03_objects_arrays/#1-using-the-object-constructor","title":"1. Using the <code>Object</code> Constructor","text":"<p>You can create an empty object using the <code>Object</code> constructor and then add properties to it.</p> <pre><code>// Create an empty object using the Object constructor\nconst myCar = new Object();\n\n// Add properties to the object\nmyCar.make = \"Ford\";\nmyCar.model = \"Mustang\";\nmyCar.year = 1969;\n\n// Access properties\nconsole.log(`Make: ${myCar.Make} Model: ${myCar.model}`);\n</code></pre>"},{"location":"03_objects_arrays/#2-using-object-literal-notation","title":"2. Using object literal notation","text":"<p>You can define the object and its properties directly using object literal notation, which is more concise and easier to read.</p> <pre><code>// Create an object with literal notation\nconst myCar2 = {\n  make: 'Seat',\n  model: '600',\n  year: '1965'\n}\n\n// Access properties\nconsole.log(`Make: ${myCar2.Make} Model: ${myCar2.model}`);\n</code></pre>"},{"location":"03_objects_arrays/#creating-an-object-with-methods","title":"Creating an object with methods:","text":"<pre><code>// Define an object using object literal notation\nconst person = {\n    firstName: \"John\",\n    lastName: \"Doe\",\n    age: 30,\n    // this is a method:\n    greet: function() {\n        console.log(\"Hello, \" + this.firstName + \" \" + this.lastName);\n    }\n};\n\n// Access properties and call the method\nconsole.log(person.firstName); // Output: John\n// Calling the method\nperson.greet(); // Output: Hello, John Doe\n</code></pre>"},{"location":"03_objects_arrays/#22-constructor-functions-and-object-instances","title":"2.2 Constructor Functions and Object Instances","text":"<p>In JavaScript, you can create a constructor function to define the structure and behavior of objects. Then, you can create instances of the object using the <code>new</code> keyword.</p> <pre><code>// Define a constructor function\nfunction Person(firstName, lastName, age) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.age = age;\n    this.greet = function() {\n        console.log(\"Hello, \" + this.firstName + \" \" + this.lastName);\n    };\n}\n\n// Create instances of the Person object\nconst person1 = new Person(\"John\", \"Doe\", 30);\nconst person2 = new Person(\"Jane\", \"Smith\", 25);\n\n// Access properties and call methods\nconsole.log(person1.firstName); // Output: John\nperson1.greet(); // Output: Hello, John Doe\n\nconsole.log(person2.firstName); // Output: Jane\nperson2.greet(); // Output: Hello, Jane Smith\n</code></pre>"},{"location":"03_objects_arrays/#3-classes-in-javascript","title":"3. Classes in JavaScript","text":"<p>Since ES6 (ECMAScript 2015), JavaScript supports class syntax, allowing for a more traditional object-oriented programming style. Here are some key features of ES6 classes:</p>"},{"location":"03_objects_arrays/#class-declaration-with-constructor","title":"Class Declaration with Constructor","text":"<p>Classes in JavaScript can have a <code>constructor</code> method, which is a special method for initializing instances of the class with certain properties.</p> <pre><code>class Car {\n  constructor(brand, model) {\n    this.brand = brand;\n    this.model = model;\n    this.mileage = 0;\n  }\n}\n</code></pre>"},{"location":"03_objects_arrays/#setter-and-getter-methods","title":"Setter and Getter Methods","text":"<p>ES6 classes also support setter and getter methods using the <code>set</code> and <code>get</code> keywords, respectively, allowing controlled access to object properties. We can have regular methods also.</p> <pre><code>class Car {\n  constructor(brand, model) {\n    this._brand = brand;\n    this._model = model;\n    this._mileage = 0;\n  }\n\n  // Regular method\n  drive(distance) {\n    this.mileage += distance;\n    console.log(`Driving ${distance} miles in ${this.brand} ${this.model}.`);\n  }\n\n  // Getter method\n  get mileage() {\n    return this._mileage;\n  }\n\n  // Setter method\n  set mileage(value) {\n    if (value &gt;= 0) {\n      this._mileage = value;\n    } else {\n      console.error(\"Mileage cannot be negative.\");\n    }\n  }\n}\n\n// Create an instance of Car\nconst myCar = new Car(\"Toyota\", \"Corolla\");\n\n// Call regular method to drive\nmyCar.drive(50);\nmyCar.drive(30);\n\n// Access mileage using getter method\nconsole.log(`Total mileage: ${myCar.mileage} miles.`);\n</code></pre>"},{"location":"03_objects_arrays/#4-arrays-of-objects","title":"4. Arrays of objects","text":"<p>In JavaScript, arrays can hold a collection of objects. Each object within the array can have its own properties and methods, allowing for structured data organization and manipulation.</p> <pre><code>// Define an array of objects (array of cars)\nlet cars = [\n  { brand: \"Toyota\", model: \"Corolla\", year: 2020 },\n  { brand: \"Honda\", model: \"Civic\", year: 2019 },\n  { brand: \"Ford\", model: \"Mustang\", year: 2021 }\n];\n\n// Accessing objects in the array\nconsole.log(cars[0]); // Output: { brand: \"Toyota\", model: \"Corolla\", year: 2020 }\n\n// Adding a new object to the array\ncars.push({ brand: \"Tesla\", model: \"Model S\", year: 2022 });\n\n// Modifying an object in the array\ncars[1].year = 2020;\n\n// Removing an object from the array\ncars.splice(2, 1); // Removes the object at index 2\n\n// Iterating over the array of objects\ncars.forEach(function(car) {\n  console.log(`${car.brand} ${car.model} (${car.year})`);\n});\n</code></pre>"},{"location":"03_objects_arrays/#5-json-notation","title":"5. JSON Notation","text":"<p>JSON (JavaScript Object Notation) is a lightweight data-interchange format that is easy for humans to read and write, and easy for machines to parse and generate. It is widely used as a format for exchanging data between a server and a web application, and is a standard data format with many programming languages.</p>"},{"location":"03_objects_arrays/#syntax","title":"Syntax","text":"<ul> <li>Data is in name/value pairs: JSON data is represented as key-value pairs.</li> <li>Data is separated by commas: JSON data is separated by commas.</li> <li>Curly braces hold objects: JSON data is enclosed in curly braces <code>{}</code> to denote objects.</li> <li>Square brackets hold arrays: JSON arrays are enclosed in square brackets <code>[]</code>.</li> </ul> <pre><code>{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"age\": 30,\n  \"isStudent\": false,\n  \"address\": {\n    \"streetAddress\": \"123 Main Street\",\n    \"city\": \"Anytown\",\n    \"state\": \"CA\",\n    \"postalCode\": \"12345\"\n  },\n  \"phoneNumbers\": [\n    { \"type\": \"home\", \"number\": \"555-1234\" },\n    { \"type\": \"work\", \"number\": \"555-5678\" }\n  ]\n}\n</code></pre>"},{"location":"03_objects_arrays/#key-points_2","title":"Key Points","text":"<ul> <li>Data Types:JSON supports strings, numbers, objects, arrays, booleans, and null values.</li> <li>Universal Format: JSON is independent of programming languages, making it suitable for data exchange.</li> <li>Parsing: JSON can be parsed into JavaScript objects using JSON.parse() and converted back to JSON using JSON.stringify().</li> </ul>"},{"location":"03_objects_arrays/#usage","title":"Usage","text":"<ul> <li>Web APIs: Many web APIs use JSON to send data between servers and web browsers.</li> <li>Configuration Files: JSON is used in configuration files due to its human-readable format.</li> <li>Data Storage: JSON is used for storing and exchanging structured data in databases and applications.</li> </ul>"},{"location":"03_objects_arrays/#parsing-an-object-to-json-ready-to-send-or-store-and-vice-versa","title":"Parsing an object to JSON ready to send or store. And vice-versa.","text":"<pre><code>// Object with multiple attributes, including an array of objects\nlet user = {\n  name: \"John Doe\",\n  age: 35,\n  address: {\n    street: \"Main Street\",\n    city: \"New York\",\n    country: \"USA\"\n  },\n  orderHistory: [\n    { id: 1, product: \"Smartphone\", quantity: 1 },\n    { id: 2, product: \"Tablet\", quantity: 2 },\n    { id: 3, product: \"Laptop\", quantity: 1 }\n  ]\n};\n\n// Convert to JSON using JSON.stringify()\nlet jsonUser = JSON.stringify(user);\n\nconsole.log(\"Object converted to JSON:\");\nconsole.log(jsonUser);\n\n// Convert back to object using JSON.parse()\nlet parsedObject = JSON.parse(jsonUser);\n\nconsole.log(\"\\nJSON converted back to object:\");\nconsole.log(parsedObject);\n</code></pre>"},{"location":"04_DOM/","title":"UNIT4 - Manipulating the DOM","text":"<p>Work in progress...</p>"},{"location":"05_events_forms/","title":"UNIT5 - Event Management and Form Validation","text":"<p>Work in progress...</p>"},{"location":"06_AJAX/","title":"UNIT6 - AJAX","text":"<p>What is AJAX? </p> <p></p> <p>Work in progress...</p>"},{"location":"07_local_storage/","title":"UNIT7 - Local Storage","text":"<p>Work in progress...</p>"}]}